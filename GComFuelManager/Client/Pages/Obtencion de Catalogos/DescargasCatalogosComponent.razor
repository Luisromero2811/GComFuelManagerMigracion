@inject IJSRuntime Js
@inject IRepositorio repositorio
@inject NotificationService ns
@inject SweetAlertService Swal

@page "/obtencion/catalogos"

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Analista Credito, Precios, Gestion de Transportes")]

<h4><b>Descargas de catalogos</b></h4>

<div class="col-12 d-flex justify-content-center mt-4">
    <div class="col-12 card shadow">
        <div class="card-body">
            <div class="row p-4">
                <AuthorizeView Roles="Admin, Administrador Sistema ,Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo, Analista Credito, Programador" Context="BtnCli">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadClient">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/Clientes.png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Clientes</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Ejecutivo de Cuenta Operativo, Analista Credito, Programador, Precios" Context="BtnDes">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadDestiny">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/mapa.png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Destinos</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes" Context="BtnGT">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadGT">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/GrupoTransportes.png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Grupo Transportista</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes" Context="BtnET">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadET">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/delivery-truck (1).png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Empresa Transportista</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes" Context="BtnDr">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadDrivers">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/worker (1).png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Choferes</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito, Programador, Gestion de Transportes" Context="BtnVt">
                    <div class="col-4 mb-4">
                        <div class="col-12">
                            <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@DownloadVehicles">
                                <div class="col-12 row">
                                    <div class="col-4">
                                        <img src="img/delivery-truck.png" class="img-fluid" />
                                    </div>
                                    <div class="col d-flex align-items-center text-black justify-content-start">
                                        <b>Catalogo de Unidades</b>
                                    </div>
                                </div>
                            </RadzenButton>
                        </div>
                    </div>
                </AuthorizeView>
            </div>
        </div>
    </div>
</div>

@code {

    private List<Cliente> Clientes { get; set; } = new List<Cliente>();
    private List<Destino> Destinos { get; set; } = new List<Destino>();
    private List<GrupoTransportista> GrupoTransportistas { get; set; } = new List<GrupoTransportista>();
    private List<Transportista> Transportistas { get; set; } = new List<Transportista>();
    private List<Chofer> Choferes { get; set; } = new List<Chofer>();
    private List<Tonel> Toneles { get; set; } = new List<Tonel>();

    private async Task DownloadClient()
    {
        try
        {
            var response = await repositorio.Get<List<Cliente>>($"api/Clientes/all");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 49;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   Clientes
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:C1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoClientes_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DownloadDestiny()
    {
        try
        {
            var response = await repositorio.Get<List<Destino>>($"api/Estacion/all");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destinos = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 49;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   Destinos
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:G1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoDestinos_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DownloadGT()
    {
        try
        {
            var response = await repositorio.Get<List<GrupoTransportista>>($"api/Transportista/allGT");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                GrupoTransportistas = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 49;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   GrupoTransportistas
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:A1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoGTransportes_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DownloadET()
    {
        try
        {
            var response = await repositorio.Get<List<Transportista>>($"api/Transportista");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Transportistas = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 79;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   Transportistas
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:A1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoTransportistas_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DownloadDrivers()
    {
        try
        {
            var response = await repositorio.Get<List<Chofer>>($"api/Chofer/getAll");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Choferes = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 79;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   Choferes
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:D1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoChoferes_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task DownloadVehicles()
    {
        try
        {
            var response = await repositorio.Get<List<Tonel>>($"api/Vehiculo/getAll");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Toneles = response.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var Worksheet = excel.Workbook.Worksheets.Add("CatalogoClientes");
                Worksheet.Columns.Width = 79;
                Worksheet.Columns.AutoFit();
                //Formación del Excel
                var tablebody = Worksheet.Cells["A1:A1"].LoadFromCollection(
                   Toneles
                 , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                var header = Worksheet.Cells["A1:L1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await Js.GuardarComo($"CatalogoUnidades_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

