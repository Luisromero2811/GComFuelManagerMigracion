@page "/inventarios/resumen"
@inject IRepositorio http
@inject IJSRuntime js
@inject InventarioValidator validator
@inject SweetAlertService Swal
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Inventarios")]

<Card HeaderText="Cierres de inventario" CardClass="mb-2" LoadingContent="loading">

</Card>
<div style="width:100%;overflow-x:scroll;">
    <Tabla Datos="Cierres">
        <Cabeceras>
            <tr>
                <th>Producto</th>
                <th>Sitio</th>
                <th>Almacen</th>
                <th>Localidad</th>
                <th>Inventario fisico</th>
                <th>Fisica reservada</th>
                <th>Fisico disponible</th>
                <th>Pedido total</th>
                <th>Ordenada reservada</th>
                <th>En orden</th>
                <th>Total disponible</th>
                <th>Total disponible en full</th>
            </tr>
        </Cabeceras>
        <Columnas Context="inv">
            <tr>
                <td>@inv.Producto</td>
                <td>@inv.Sitio</td>
                <td>@inv.Almacen</td>
                <td>@inv.Localidad</td>
                <td>@inv.Fisico.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.Reservado.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.Disponible.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.PedidoTotal.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.OrdenReservado.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.EnOrden.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.TotalDisponible.ToString("N2", CultureInfo.InvariantCulture) lts</td>
                <td>@inv.TotalDisponibleFull.ToString("N2", CultureInfo.InvariantCulture)</td>
            </tr>
        </Columnas>
    </Tabla>
</div>

<Modal_Custom @ref="modal_" />

@code {
    List<InventarioCierreDTO> Cierres = new();
    Modal_Custom modal_ = new();

    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarCierres();
    }

    private async Task CargarCierres()
    {
        try
        {
            loading = true;
            var response = await http.Get<List<InventarioAnteriorNuevoCierreDTO>>($"api/inventario/resumen");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                Cierres = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CerrarInventario(InventarioCierreDTO inv)
    {
        try
        {
            loading = true;
            var response = await http.Post<InventarioCierreDTO>($"api/inventario/cierre", inv);
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                await CargarCierres();
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void AbrirDetalleCierre(InventarioCierreDTO inv)
    {
        modal_.OpenModal<DetalleCierreInventarioComponente>("Detalle de cierre", new Dictionary<string, object> { { "Cierre", inv } });
    }
}
