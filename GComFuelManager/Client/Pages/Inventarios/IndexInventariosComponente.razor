@page "/inventarios"
@inject IRepositorio http
@inject IJSRuntime js
@inject InventarioValidator validator
@inject SweetAlertService Swal
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Inventarios")]

<Card HeaderText="Inventarios" LoadingContent="loading" />
<Card HeaderText="Registrar inventario">
    <Body>
        <EditForm Model="Inventario" class="col-12 row g-2" OnValidSubmit="GuardarInventario">
            <DataAnnotationsValidator />
            <FluentValidationValidator Validator="validator" />
            <div class="col-4">
                <label>Producto</label>
                <InputSelect @bind-Value="Inventario.ProductoId" class="form-select form-select-sm">
                    <option>-- Productos --</option>
                    @foreach (var item in Productos)
                    {
                        <option value="@item.Cod">@item.Nombre_Producto</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.ProductoId)" />
            </div>
            <div class="col-4">
                <label>Sitio</label>
                <InputSelect @bind-Value="Inventario.SitioId" class="form-select form-select-sm">
                    <option>-- Sitios --</option>
                    @foreach (var item in Sitios)
                    {
                        <option value="@item.Id">@item.Valor</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.SitioId)" />
            </div>
            <div class="col-4">
                <label>Almacen</label>
                <InputSelect @bind-Value="Inventario.AlmacenId" class="form-select form-select-sm">
                    <option>-- Almacenes --</option>
                    @foreach (var item in Almacenes)
                    {
                        <option value="@item.Id">@item.Valor</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.AlmacenId)" />
            </div>
            <div class="col-4">
                <label>Localidad</label>
                <InputSelect @bind-Value="Inventario.LocalidadId" class="form-select form-select-sm">
                    <option>-- Localidades --</option>
                    @foreach (var item in Localidades)
                    {
                        <option value="@item.Id">@item.Valor</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.LocalidadId)" />
            </div>
            <div class="col-4">
                <label>Tipo de movimiento</label>
                <InputSelect @bind-Value="Inventario.TipoMovimientoId" class="form-select form-select-sm">
                    <option>-- Tipo de movimiento --</option>
                    @foreach (var item in TiposMovimientos)
                    {
                        <option value="@item.Id">@item.Valor</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.TipoMovimientoId)" />
            </div>
            <div class="col-4">
                <label>Referencia</label>
                <InputTextArea @bind-Value="Inventario.Referencia" class="form-control form-control-sm" />
                <ValidationMessage For="@(()=>Inventario.Referencia)" />
            </div>
            <div class="col-4">
                <label>Numero</label>
                <InputText @bind-Value="Inventario.Numero" class="form-control form-control-sm" />
                <ValidationMessage For="@(()=>Inventario.Numero)" />
            </div>
            <div class="col-4">
                <label>Cantidad</label>
                <InputNumber @bind-Value="Inventario.Cantidad" class="form-control form-control-sm" @bind-Value:format="#,##0.00" />
                <ValidationMessage For="@(()=>Inventario.Cantidad)" />
            </div>
            <div class="col-4">
                <label>Unidad de medida</label>
                <InputSelect @bind-Value="Inventario.UnidadMedidaId" class="form-select form-select-sm">
                    <option>-- Unidades de medida --</option>
                    @foreach (var item in UnidadesMedida)
                    {
                        <option value="@item.Id">@item.Valor</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>Inventario.UnidadMedidaId)" />
            </div>
            <div class="col-12">
                <div class="col-4">
                    <button class="btn btn-sm gcom-bg-amarillo" type="submit">
                        <i class="fa fa-solid fa-floppy-disk" />
                        Guardar
                    </button>
                </div>
            </div>
        </EditForm>
    </Body>
</Card>
<div class="col-12 mt-2 d-flex justify-content-between">
    <div class="col-6 d-flex justify-content-start gap-2">
        <div>
            <label>De:</label>
            <input type="date" class="form-control form-control-sm" @bind="Filtro.Fecha_Inicio" />
        </div>
        <div>
            <label>A:</label>
            <input type="date" class="form-control form-control-sm" @bind="Filtro.Fecha_Fin" />
        </div>
        <button class="col-2 btn btn-sm gcom-bg-amarillo mt-auto" type="button" @onclick="CargarInventario">
            <i class="fa fa-solid fa-magnifying-glass" />
        </button>
    </div>
    <button class="btn bt-sm col-3 gcom-bg-amarillo mt-auto" @onclick="Exportar">
        <i class="fa fa-solid fa-file-excel" />
        Exportar
    </button>
</div>
<div class="ancho-tabla mt-2">
    <Tabla Datos="Inventarios">
        <Cabeceras>
            <tr>
                <th style="width: 80px;"></th>
                <th style="width: 100px;" class="resizable-column">Producto</th>
                <th style="width: 100px;" class="resizable-column">Sitio</th>
                <th style="width: 100px;" class="resizable-column">Almacen</th>
                <th style="width: 100px;" class="resizable-column">Localidad</th>
                <th style="width: 100px;" class="resizable-column">Fecha Fisica</th>
                <th style="width: 100px;" class="resizable-column">Tipo de movimiento</th>
                <th style="width: 100px;" class="resizable-column">Referencia</th>
                <th style="width: 100px;" class="resizable-column">Numero</th>
                <th style="width: 100px;" class="resizable-column">Cantidad</th>
                <th style="width: 100px;" class="resizable-column">Unidad de medida</th>
                <th style="width: 100px;" class="resizable-column">Fecha de ejecucion de cierre</th>
            </tr>
        </Cabeceras>
        <Filtros>
            <tr>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.ProductoId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Productos)
                        {
                            <option value="@item.Cod">@item.Den</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.SitioId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Sitios)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.AlmacenId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Almacenes)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.LocalidadId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in Localidades)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.TipoMovimientoId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in TiposMovimientos)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td>
                    <select class="form-select form-select-sm"
                            onchange="@((ChangeEventArgs args)=>Filtrar(args,nameof(Filtro.UnidadMedidaId)))">
                        <option value="0">Todos</option>
                        @foreach (var item in UnidadesMedida)
                        {
                            <option value="@item.Id">@item.Valor</option>
                        }
                    </select>
                </td>
                <td></td>
            </tr>
        </Filtros>
        <Columnas Context="item">
            <tr>
                <td>
                    @if (item.FechaCierre is null)
                    {
                        <div class="btn-group">
                            <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>EditarInventario(item.Id))">
                                <i class="fa fa-solid fa-edit" />
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="@(()=>EliminarInventario(item.Id))">
                                <i class="fa fa-solid fa-trash" />
                            </button>
                        </div>
                    }
                </td>
                <td>@item.Producto</td>
                <td>@item.Sitio</td>
                <td>@item.Almacen</td>
                <td>@item.Localidad</td>
                <td>@item.FechaRegistro.ToShortDateString()</td>
                <td>@item.TipoMovimiento</td>
                <td>@item.Referencia</td>
                <td>@item.Numero</td>
                <td>@item.Cantidad.ToString("N2", CultureInfo.InvariantCulture)</td>
                <td>@item.UnidadMedida</td>
                <td>@(item.FechaCierre?.ToShortDateString() ?? "----")</td>
            </tr>
        </Columnas>
    </Tabla>
</div>
<div class="col-12">
    <PaginacionComponent PaginaActual="Filtro.Pagina_ACtual" PaginasTotales="Filtro.Total_paginas" PaginaSeleccionada="SeleccionarPagina" />
    <div class="col-12">
        <p>Total de registros: @Filtro.Total_registros</p>
    </div>
</div>
@code {
    InventarioPostDTO Inventario = new();
    InventarioDTO Filtro = new();
    bool loading = false;
    Dictionary<string, string> query = new();

    List<InventarioDTO> Inventarios = new List<InventarioDTO>();

    IEnumerable<Producto> Productos = new List<Producto>();
    IEnumerable<CatalogoValorDTO> Sitios = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> Almacenes = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> Localidades = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> UnidadesMedida = new List<CatalogoValorDTO>();
    IEnumerable<CatalogoValorDTO> TiposMovimientos = new List<CatalogoValorDTO>();

    protected override async Task OnInitializedAsync()
    {
        Filtro.Fecha_Fin = Filtro.Fecha_Fin.AddDays(1);

        await Task.WhenAll(
            CargarInventario(),
            GetProductos(),
            CatalogoSitio(),
            CatalogoAlmacen(),
            CatalogoLocalidad(),
            CatalogoTipoMovimiento(),
            CatalogoUnidadMedida()
        );
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[nameof(Filtro.ProductoId)] = Filtro.ProductoId.ToString();
        query[nameof(Filtro.SitioId)] = Filtro.SitioId.ToString();
        query[nameof(Filtro.AlmacenId)] = Filtro.AlmacenId.ToString();
        query[nameof(Filtro.LocalidadId)] = Filtro.LocalidadId.ToString();
        query[nameof(Filtro.TipoMovimientoId)] = Filtro.TipoMovimientoId.ToString();
        query[nameof(Filtro.UnidadMedidaId)] = Filtro.UnidadMedidaId.ToString();
        query[nameof(Filtro.Pagina)] = Filtro.Pagina.ToString();
        query[nameof(Filtro.Registros_por_pagina)] = Filtro.Registros_por_pagina.ToString();
        query[nameof(Filtro.Fecha_Inicio)] = Filtro.Fecha_Inicio.ToString("MM-dd-yyyy");
        query[nameof(Filtro.Fecha_Fin)] = Filtro.Fecha_Fin.ToString("MM-dd-yyyy");
        query[nameof(Filtro.PorFecha)] = true.ToString();

        return query;
    }

    private async Task CargarInventario()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = false.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<List<InventarioDTO>>($"api/inventario?{url}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                Inventarios = response.Response;
                Filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
                Filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                Filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task SeleccionarPagina(int pagina)
    {
        Filtro.Pagina = pagina;
        Filtro.Pagina_ACtual = pagina;
        await CargarInventario();
    }

    private async Task GetProductos()
    {

        try
        {
            var response = await http.Get<IEnumerable<Producto>>("api/producto");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task CatalogoSitio()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/sitio");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                Sitios = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CatalogoAlmacen()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/almacen");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                Almacenes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CatalogoLocalidad()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/localidad");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                Localidades = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CatalogoUnidadMedida()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/unidadmedida");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                UnidadesMedida = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CatalogoTipoMovimiento()
    {
        try
        {
            var response = await http.Get<IEnumerable<CatalogoValorDTO>>("api/inventario/catalogo/tipomovimiento");
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                TiposMovimientos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GuardarInventario()
    {
        try
        {
            var response = await http.Post<InventarioPostDTO>("api/inventario", Inventario);
            if (response.Error)
            {
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                await CargarInventario();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Filtrar(ChangeEventArgs args, string pro)
    {
        switch (pro)
        {
            case nameof(Filtro.ProductoId):
                Filtro.ProductoId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.SitioId):
                Filtro.SitioId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.AlmacenId):
                Filtro.AlmacenId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.LocalidadId):
                Filtro.LocalidadId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.TipoMovimientoId):
                Filtro.TipoMovimientoId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            case nameof(Filtro.UnidadMedidaId):
                Filtro.UnidadMedidaId = int.Parse(args.Value?.ToString() ?? string.Empty);
                break;
            default:
                break;
        }
        await CargarInventario();
    }

    private async Task Exportar()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.Excel)] = true.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<byte[]>($"api/inventario?{url}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                await js.GuardarComo($"Inventarios_{DateTime.Now.ToString("ddMMyyyyHHmmss")}.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task BuscarInventario()
    {
        try
        {
            loading = true;
            query[nameof(Filtro.PorFecha)] = true.ToString();
            var url = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());
            var response = await http.Get<List<InventarioDTO>>($"api/inventario?{url}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                Inventarios = response.Response;
                Filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
                Filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                Filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task EditarInventario(int id)
    {
        try
        {
            loading = true;
            var response = await http.Get<InventarioPostDTO>($"api/inventario/{id}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                Inventario = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task EliminarInventario(int id)
    {
        try
        {
            loading = true;
            var response = await http.Delete($"api/inventario/{id}");
            if (response.Error)
            {
                loading = false;
                await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                await CargarInventario();
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
