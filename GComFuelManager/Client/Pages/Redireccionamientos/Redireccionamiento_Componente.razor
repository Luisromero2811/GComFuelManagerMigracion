@page "/redireccionamiento"
@inject IRepositorio http
@inject SweetAlertService swal
@inject DialogService ds
@inject IJSRuntime js
@inject NotificationService ms

@attribute [Authorize(Roles = "Admin, Administrador Sistema")]

<AuthorizeView Roles="Admin, Administrador Sistema" Context="Redireccionamiento">
    <div class="col-12 card">
        <div class="col-12 card-header">
            <b>Redireccionamiento</b>
        </div>
        <div class="col-12 card-body">
            <div class="col-12">
                <div class="col-12 row my-1">
                    <div class="col-2">
                        <input class="col-12 form-control form-control-sm" type="number" @bind="filtroDTO.Bol" min="0" placeholder="BOL" />
                    </div>
                    <div class="col-1">
                        <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@Buscar_Ordenes">
                            <i class="fa fa-solid fa-magnifying-glass"></i>
                            @if (Loading_Buscar)
                            {
                                <SpinnerLoading />
                            }
                        </button>
                    </div>
                </div>

                <EditForm Model="@Redireccion" OnValidSubmit="@Crear_Redireccion" class="col-12 form row">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="col-4">
                        <label>Grupo</label>
                        <DropDownFilter Listado="Grupos" TListado="Grupo" @bind-Valor="@Redireccion.Grupo_Red" Propiedad_Valor="Cod" TValue="Int16" FiltrarValor="GetGrupos"
                                        Default_Placeholder="-- Seleccione un grupo --" On_Change_Method="@(()=>GetClientes(string.Empty))">
                            <RenderValue Context="grupo">
                                @grupo.Den
                            </RenderValue>
                            <Render Context="grupo">
                                @grupo.Den
                            </Render>
                        </DropDownFilter>
                        <ValidationMessage For="@(()=>Redireccion.Grupo_Red)" />

                    </div>
                    <div class="col-4">
                        <label>Cliente</label>
                        <DropDownFilter Listado="Clientes" TListado="CodDenDTO" @bind-Valor="@Redireccion.Cliente_Red" Propiedad_Valor="Cod" TValue="int" FiltrarValor="@GetClientes"
                                        Default_Placeholder="-- Seleccione un cliente --" On_Change_Method="@(()=>GetEstaciones(string.Empty))">
                            <RenderValue Context="cliente">
                                @cliente.Den
                            </RenderValue>
                            <Render Context="cliente">
                                @cliente.Den
                            </Render>
                        </DropDownFilter>
                        <ValidationMessage For="@(()=>Redireccion.Cliente_Red)" />
                    </div>
                    <div class="col-4">
                        <label>Destino</label>
                        <DropDownFilter Listado="Destinos" TListado="CodDenDTO" @bind-Valor="@Redireccion.Destino_Red" Propiedad_Valor="Cod" TValue="int" FiltrarValor="@GetEstaciones"
                                        Default_Placeholder="-- Seleccione un destino --">
                            <RenderValue Context="destino">
                                @destino.Den
                            </RenderValue>
                            <Render Context="destino">
                                @destino.Den
                            </Render>
                        </DropDownFilter>
                        <ValidationMessage For="@(()=>Redireccion.Destino_Red)" />
                    </div>

                    <div class="col-4">
                        <label>Precio</label>
                        <input type="number" step="0.0001" @bind="@Redireccion.Precio_Red" class="form-control form-control-sm" />
                        <ValidationMessage For="@(()=>Redireccion.Precio_Red)" />
                    </div>

                    <div class="col-4">
                        <label>Motivo</label>
                        <textarea class="form-control form-control-sm" @bind="Redireccion.Motivo_Red"/>
                        <ValidationMessage For="@(()=>Redireccion.Motivo_Red)" />
                    </div>

                    <div class="col-4">
                        <label>Fecha de redireccion</label>
                        <input @bind="Redireccion.Fecha_Red" type="date" class="form-control form-control-sm" min="@DateTime.Today" />
                        <ValidationMessage For="@(()=>Redireccion.Fecha_Red)" />
                    </div>

                    <div class="col-12 d-flex justify-content-center mt-1">
                        <div class="col-4">
                            <button class="col-12 btn btn-sm gcom-bg-amarillo" type="submit">
                                Guardar
                                @if (Loading_Guardar)
                                {
                                    <SpinnerLoading />
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="col-12 overflow-scroll ancho" style="height:450px;resize:both;">
        <table class="table table-sm table-bordered table-hover" id="miTabla">
            <thead class="fila">
                <tr style="max-height:50px;white-space:nowrap;">
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:150px;">
                        Fecha de carga
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                        Cliente
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                        Producto
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:200px;">
                        Destino
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:100px;">
                        Precio de venta
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:150px;">
                        Volumen cargado
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:150px;">
                        Referencia
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:120px;">
                        BOL
                    </th>
                    <th class="th-resizable overflow-hidden" style="min-width:20px;width:160px;">
                        Estado
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Loading_Buscar || Loading_Guardar)
                {
                    <tr>
                        <td colspan="9">
                            <SpinnerLoading />
                        </td>
                    </tr>
                }
                else if (Ordenes_Synthesis.Count == 0 || Ordenes_Synthesis is null)
                {
                    <tr>
                        <td colspan="9">
                            No hay registros
                        </td>
                    </tr>
                }
                else
                {
                    <Virtualize Items="@Ordenes_Synthesis" Context="item" TItem="Orden">
                        <tr style="white-space:nowrap;">
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Fchcar?.ToString("dd/MM/yyyy")
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Destino?.Cliente?.Den
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Producto?.Den
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Destino?.Den
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.OrdenEmbarque?.Pre?.ToString("N4", CultureInfo.InvariantCulture)
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Vol?.ToString("N",CultureInfo.InvariantCulture)
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Ref
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.BatchId
                                </div>
                            </td>
                            <td class="overflow-hidden">
                                <div class="text-hidden-overflow">
                                    @item?.Estado?.den
                                </div>
                            </td>
                        </tr>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
</AuthorizeView>
<style type="text/css">
    table {
        border-collapse: collapse;
        width: 100%;
        font-size: 12px;
        text-align: left;
        table-layout: fixed;
    }

    table, th, td {
        background-color: white;
    }

    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .fila td {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 28px;
        background-color: #f2f2f2;
    }

    .ancho {
        width: @TotalWidth;
    }

    tr:hover {
        background-color: #FFF633;
    }

    tr:active {
        background-color: #FFF633;
    }

    .asignar {
        table-layout: auto;
        width: auto;
    }

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

    .sticky-column-header {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 2;
        background-color: white;
    }

    .sticky-column, .sticky-column + th, .sticky-column + td {
        min-width: 180px;
    }

    .table-container {
        overflow: auto;
        width: 100%;
        border: 1px solid #ccc;
        max-height: 400px; /* Establece una altura máxima si es necesario */
    }

    th, td {
        padding: 8px;
        border: 1px solid #ccc;
    }

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px; /* Ancho del área de redimensionamiento */
            background: transparent;
        }
</style>

@code {
    Redireccionamiento Redireccion { get; set; } = new();
    List<Grupo> Grupos { get; set; } = new();
    List<CodDenDTO> Clientes { get; set; } = new();
    List<CodDenDTO> Destinos { get; set; } = new();
    List<Orden> Ordenes_Synthesis { get; set; } = new();

    Pedimento Pedimento { get; set; } = new();
    CierreFiltroDTO filtroDTO = new();

    Dictionary<string, string> Query = new();

    List<Pedimento> Pedimentos { get; set; } = new();
    List<Producto> Productos { get; set; } = new();
    List<OrdenEmbarque> Ordenes { get; set; } = new();

    bool Loading_Guardar = false;
    bool Loading_Buscar = false;

    int width = 0;
    bool isClose = false;
    string TotalWidth = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetGrupos(string.Empty);
        await js.InvokeVoidAsync("importarScript", "js/resizableTable.js");
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);

            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";
            // await js.InvokeVoidAsync("columnSize.SetTable","miTabla", DotNetObjectReference.Create(this));
            // importedJs = await js.InvokeAsync<IJSObjectReference>("import", "./js/ColumnsSize.js");
        }
    }

    public async Task GetGrupos(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Grupo_Filtrado"] = value;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<Grupo>>($"api/grupo?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task Buscar_Ordenes()
    {
        try
        {
            Loading_Buscar = true;
            var response = await http.Get<List<Orden>>($"api/pedido/ordenes/despachadas/{filtroDTO.Bol}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                Loading_Buscar = false;
            }
            else
            {
                Ordenes_Synthesis = response.Response;
                Loading_Buscar = false;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Buscar = false;
        }
    }

    private async Task Crear_Redireccion()
    {
        try
        {
            Loading_Guardar = true;
            var response = await http.Post<Redireccionamiento>("api/redireccion",Redireccion);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                Loading_Guardar = false;
            }
            else
            {
                Buscar_Ordenes();
                Loading_Guardar = false;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Guardar = false;
        }
    }

    public async Task GetClientes(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Cliente_Filtrado"] = value;
            query["ID_Grupo"] = Redireccion.Grupo_Red.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CodDenDTO>>($"api/clientes?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetEstaciones(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Destino_Filtrado"] = value;
            query["ID_Cliente"] = Redireccion.Grupo_Red.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CodDenDTO>>($"api/estacion?{uri}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destinos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Exportar_Excel()
    {
        try
        {
            var response = await http.Post<List<OrdenEmbarque>, List<Excel_Ordenes_Pedimento>>($"api/excel/reporte/ordenes/pedimento", Ordenes);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("ordenes de pedimento");
                ws.Columns.Width = 50;

                var header = ws.Cells["A1:M1"];

                ws.Cells["F1:H1"].Style.Numberformat.Format = "#,####0.0000";
                ws.Cells["I1:J1"].Style.Numberformat.Format = "#,##0.00";

                // ws.Cells["A1:E1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                // ws.Cells["K1:M1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                // ws.Cells["F1:J1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                var tablebody = ws.Cells["A1:A1"].LoadFromCollection(response.Response, true);
                tablebody.Style.Font.Size = 12;
                // tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Costos_{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
