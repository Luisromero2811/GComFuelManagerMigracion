@page "/establecer/meta"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject NotificationService ms
@inject IJSRuntime js

<div class="card">
    <div class="card-header">
        <b>Establecimiento de metas</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-4">
                <DropDownFilter Listado="Vendedores" TListado="Vendedor" TValue="int" Default_Placeholder="Seleccione un vendedor" FiltrarValor="Obtener_Vendedores"
                @bind-Valor="@Vendedor.Id" Propiedad_Valor="Id">
                    <RenderValue>
                        @context.Nombre
                    </RenderValue>
                    <Render>
                        @context.Nombre
                    </Render>
                </DropDownFilter>
            </div>
            <div class="col-2">
                <select class="form-select form-select-sm" @bind="@Meta_Vendedor.Ano_reporte">
                    <option>-- Seleccione un año --</option>
                    @foreach (var ano in Años)
                    {
                        <option value="@ano">@ano</option>
                    }
                </select>
            </div>
            <div class="col-2">
                <button class="btn btn-sm gcom-bg-amarillo" @onclick="@Obtener_Metas">
                    <b>Buscar metas</b>
                    <i class="fa fa-solid fa-magnifying-glass"></i>
                </button>
            </div>

            <div class="col-2">
                <button class="btn btn-sm gcom-bg-amarillo" @onclick="@Exportar_Excel">
                    <b>Exportar excel</b>
                    <i class="fa fa-solid fa-file-excel"></i>
                </button>
            </div>
        </div>
    </div>
</div>
<div class="ancho-tabla" style="overflow-x:scroll;">
    <table class="table table-bordered table-sm text-nowrap">
        <thead>
            <tr>
                <th>Mes</th>
                <th>Referencia</th>
                <th>Meta del mes</th>
                <th>Meta Acumulada</th>
                <th>Real</th>
                <th>Resultado del mes</th>
                <th>Cumplimiento del mes</th>
                <th>Resultado acumulado</th>
                <th>Porcentaje de cumplimiento</th>
            </tr>
        </thead>
        <tbody>
            @if (Loading_Buscar)
            {
                <tr>
                    <td colspan="9">
                        <SpinnerLoading />
                    </td>
                </tr>
            }
            else
            {
                <Virtualize Items="Metas_Vendedor" TItem="Metas_Vendedor" Context="item">
                    <tr>
                        <td style="min-width:50px"><b>@item.Nombre_Mes</b></td>
                        <td>@item.Referencia?.ToString("N2",CultureInfo.InvariantCulture)</td>
                        <td style="min-width:250px;">
                            @if (item.Editar_Meta)
                            {
                                <div class="d-flex flex-wrap">
                                    <input @bind-value="@item.Meta" class="form-control form-control-sm" min="0" placeholder="Meta del mes" />
                                    <button class="btn btn-sm btn-success" @onclick="@(()=>Guardar_Meta(item))">
                                        <i class="fa fa-solid fa-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="@(()=>item.Editar_Meta = !item.Editar_Meta)">
                                        <i class="fa fa-solid fa-cancel"></i>
                                    </button>
                                    @if (Loading_Guardar)
                                    {
                                        <SpinnerLoading />
                                    }
                                </div>

                            }
                            else
                            {
                                <div class="">
                                    <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>item.Editar_Meta = !item.Editar_Meta)">
                                        <i class="fa fa-solid fa-edit"></i>
                                    </button>
                                    @item.Meta?.ToString("N2",CultureInfo.InvariantCulture)
                                </div>
                            }
                        </td>
                        <td>@item.Meta_Acumulada?.ToString("N2",CultureInfo.InvariantCulture)</td>
                        <td>@item.Venta_Real?.ToString("N2",CultureInfo.InvariantCulture)</td>
                        <td>@item.Resultado_Mes?.ToString("N2",CultureInfo.InvariantCulture)</td>
                        <td>@item.Cumplimiento_Mes?.ToString("p",CultureInfo.InvariantCulture)</td>
                        <td>@item.Resultado_Acumulado?.ToString("N2",CultureInfo.InvariantCulture)</td>
                        <td>@item.Porciento_Cumplimiento?.ToString("p",CultureInfo.InvariantCulture)</td>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>
@code {
    List<Vendedor> Vendedores { get; set; } = new();
    Vendedor Vendedor { get; set; } = new();

    List<Metas_Vendedor> Metas_Vendedor { get; set; } = new();
    Metas_Vendedor Meta_Vendedor { get; set; } = new();

    List<int> Años { get; set; } = new();

    bool Loading_Buscar = false;
    bool Loading_Guardar = false;

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Años();
        await Obtener_Vendedores(string.Empty);
    }

    private async Task Obtener_Años()
    {
        try
        {
            var response = await http.Get<List<int>>($"api/metas/anos/reporte");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task Obtener_Vendedores(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Nombre"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<Vendedor>>($"api/vendedor/filtrar?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Vendedores = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task Obtener_Metas()
    {

        try
        {
            Dictionary<string, string> query = new();
            query["VendedorId"] = Vendedor.Id.ToString();
            query["Ano_reporte"] = Meta_Vendedor.Ano_reporte.ToString();

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            Loading_Buscar = true;

            var response = await http.Get<List<Metas_Vendedor>>($"api/metas?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);

                Loading_Buscar = false;
            }
            else
            {
                Metas_Vendedor = response.Response;
                Loading_Buscar = false;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }


    }

    private async Task Guardar_Meta(Metas_Vendedor metas_)
    {

        try
        {
            Loading_Guardar = true;
            var response = await http.Post<Metas_Vendedor>($"api/metas", metas_);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                Loading_Guardar = false;
            }
            else
            {
                Loading_Guardar = false;

                await Obtener_Metas();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Guardar = false;
        }
    }

    private async Task Exportar_Excel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.Commercial;
            var excel = new ExcelPackage();
            var ws = excel.Workbook.Worksheets.Add("metas");
            ws.Columns.Width = 50;

            var header = ws.Cells["A1:I1"];
            var num = ws.Rows.Current;
            // ws.Cells["F1:H1"].Style.Numberformat.Format = "#,####0.0000";
            ws.Cells["B1:F13,H1:H13"].Style.Numberformat.Format = "#,##0.00";

            ws.Cells["G1:G13,I1:I13"].Style.Numberformat.Format = "#0.00%";

            var tablebody = ws.Cells["A1:A1"].LoadFromCollection(Metas_Vendedor, true);
            tablebody.Style.Font.Size = 12;
            tablebody.Style.Font.Bold = true;
            header.Style.Font.Size = 14;

            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            header.Style.Font.Bold = true;

            await js.GuardarComo($"Meta_{Vendedores.FirstOrDefault(x => x.Id == Vendedor.Id)?.Nombre ?? string.Empty}_{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss")}.xlsx", excel.GetAsByteArray());
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
