@page "/historial/asignacion"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador")]

<h4><b>Historial de envios</b></h4>

<div class="col-12 mt-1">
    <div class="d-flex justify-content-center">
        <div class="col-12 mt-1">
            <div class="col-12 card shadow-sm">
                <div class="col-12 card-body">
                    <label><b>Mostrar ordenes:</b></label>
                    <div class="col-12 row">
                        <div class="col-4 mb-1">
                            <label>Del:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateInicio" />
                        </div>
                        <div class="col-4 mb-1">
                            <label>A:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateFin" />
                        </div>
                        <div class="col-4 d-flex mt-2">
                            <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                                <i class="fa fa-solid fa-eye"></i> <b>Mostrar ordenes</b>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-12 d-flex justify-content-center">
    <RadzenDataGrid TItem="OrdenEmbarque" Data="@orden" AllowColumnResize="true" AllowVirtualization="true" SelectionMode="DataGridSelectionMode.Multiple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    GridLines="DataGridGridLines.Both" class="rz-my-2 ancho shadow-sm" Style="height:600px;" @bind-Value="ordenesSeleccionada" AllowRowSelectOnRowClick="false" AllowPickAllColumns="true"
                    IsLoading="loadingFiltro" Density="Density.Default" @ref="@grid" AllowSorting="true" AllowFiltering="true" AllowColumnPicking="true" Culture="CultureInfo.CurrentCulture"> 
        <Columns>
            <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                <RadzenDataGridColumn TItem="OrdenEmbarque" Width="60px" Sortable="false" Filterable="false" Frozen="true" OrderIndex="1">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool" Value="@(orden.Any(i => ordenesSeleccionada != null && ordenesSeleccionada.Contains(i)))"
                                        Change="@(args => ordenesSeleccionada = args ? orden.ToList() : new List<OrdenEmbarque>())" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox TriState="false" Value="@(ordenesSeleccionada.Contains(data))"
                                        TValue="bool" Change="@((bool args) => ToggleCheck(args, data))" />
                    </Template>
                </RadzenDataGridColumn>
            </AuthorizeView>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Orden de compra" Property="OrdenCompra.den" Width="200px" Frozen="true" MinWidth="200px" Filterable="false" OrderIndex="2" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Cliente" Property="Destino.Cliente.Den" Width="200px" Frozen="true" MinWidth="200px" FilterValue="ClienteSeleccionado" OrderIndex="3">
                <FilterTemplate Context="Cliente">
                    <RadzenDropDown Data="ClienteList" AllowFiltering="true" @bind-Value="ClienteSeleccionado" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <ValueTemplate Context="data">
                            <InputText class="form-control col-12" @bind-Value="ClienteSeleccionado" MaxLength="180" />
                        </ValueTemplate>
                    </RadzenDropDown>
                </FilterTemplate>
                <Template Context="data">
                    <div>
                        @data?.Destino?.Cliente?.Den
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Destino" Property="Destino.Den" Width="200px" MinWidth="200px" FilterValue="DestinosSeleccionado" OrderIndex="4">
                <FilterTemplate Context="Destinos">
                    <RadzenDropDown Data="DestinoList" AllowFiltering="true" @bind-Value="DestinosSeleccionado" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <ValueTemplate Context="data">
                            <InputText class="form-control col-12" @bind-Value="DestinosSeleccionado" MaxLength="190"/>
                        </ValueTemplate>
                    </RadzenDropDown>
                </FilterTemplate>
                <Template Context="data">
                    <div>
                        @data?.Destino?.Den
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Producto" Property="Producto.Den" Width="200px" MinWidth="200px" FilterValue="ProductosSeleccionado">
                <FilterTemplate Context="Productos">
                    <RadzenDropDown Data="ProductoList" @bind-Value="ProductosSeleccionado" AllowFiltering="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <ValueTemplate Context="data">
                            <InputText class="form-control col-12" @bind-Value="ProductosSeleccionado" MaxLength="190"/>
                        </ValueTemplate>
                    </RadzenDropDown>
                </FilterTemplate>
                <Template Context="data">
                    <div>
                        @data?.Producto?.Den
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Volumen" Width="200px" MinWidth="200px" FormatString="{0:N2}" Filterable="false">
                <Template Context="data">
                    <div class="col-12">
                        @string.Format("{0:N2}",
                        data?.Compartment == 1 ? data?.Tonel?.Capcom
                        : data?.Compartment == 2 ? data?.Tonel?.Capcom2
                        : data?.Compartment == 3 ? data?.Tonel?.Capcom3
                        : data?.Compartment == 4 ? data?.Tonel?.Capcom4
                        : data?.Vol
                        )
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Fecha de carga" Property="Fchcar" FormatString="{0:d}" Width="200px" MinWidth="200px" Filterable="false" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Transportista" Property="Tonel.Transportista.Den" Width="200px" MinWidth="200px" Filterable="false">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Unidad" Width="200px" MinWidth="200px" Filterable="false">
                <Template Context="data">
                    <div class="col-12">
                        @data?.Tonel?.Tracto @data?.Tonel?.Placa
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Compartimiento" Property="Compartment" Width="200px" MinWidth="200px" Filterable="false" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Operador" Width="200px" MinWidth="200px" Filterable="false">
                <Template Context="data">
                    <div class="col-12">
                        @data?.Chofer?.Den 
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Bin" Property="Bin" Width="200px" MinWidth="200px" Filterable="false" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Estatus" Property="Estado.den" Width="200px" MinWidth="200px" Filterable="false" />
        </Columns>
    </RadzenDataGrid>
</div>

<div class="col-12 my-3">
    <div class="d-flex justify-content-center">
        <div class="col card shadow-sm">
            <div class="col-12 card-body">
                <div class="col-12 my-1">
                    <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                        <div class="row d-flex justify-content-start">
                            <div class="col-4">
                                <RadzenCheckBox @bind-Value="Synthesis" Name="CheckBox1" />
                                <RadzenLabel Text="Envio a Synthesis" Component="CheckBox1" />
                            </div>
                        </div>
                    </AuthorizeView>
                    <div class="row d-flex justify-content-end">
                        @if (Synthesis)
                        {
                            <div class="col-4">
                                <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@SendToSynthesis"><i class="fa fa-solid fa-paper-plane"></i> <b>Enviar a Syntesis</b></button>
                                </AuthorizeView>
                            </div>
                        }
                        <div class="col-4">
                            <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador">
                                <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerarExcel"><i class="fa fa-solid fa-file-excel"></i> <b>Exportar</b></button>
                            </AuthorizeView>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {

    public bool Synthesis { get; set; } = false;

    //grid
    private RadzenDataGrid<OrdenEmbarque>? grid = new RadzenDataGrid<OrdenEmbarque>();
    private ElementReference dpT;

    private OrdenEmbarque ordenEmbarque { get; set; } = null!;
    //private IList<OrdenEmbarque> ordenes { get; set; } = new List<OrdenEmbarque>();
    private IList<OrdenEmbarque> orden { get; set; } = new List<OrdenEmbarque>();
    private IList<OrdenEmbarque> ordenesSeleccionada { get; set; } = new List<OrdenEmbarque>();

    FechasF fechas = new FechasF();

    List<TablaAsignacionUnidadesDTO> asignacionUnidadesDTO { get; set; } = new List<TablaAsignacionUnidadesDTO>();
    List<HistorialOrdenDTO> historialOrdens { get; set; } = new List<HistorialOrdenDTO>();
    //loadings
    bool loadingFiltro = false;
    bool loadingEdit = false;
    bool loadginAsignar = false;
    bool loadingAgregar = false;
    bool loadingSend = false;

    private string ClienteSeleccionado = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    private string DestinosSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ProductosSeleccionado = string.Empty;
    private IEnumerable<string?> ProductoList { get; set; } = new List<string>();

    private string TransportistasSeleccionado = string.Empty;
    private IEnumerable<string?> TransportistaList { get; set; } = new List<string>();

    int width = 0;
    string TotalWidth = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";
    }

    public async Task MostrarOrdenFecha()
    {
        try
        {
            loadingFiltro = true;
            StateHasChanged();

            var responseHttp = await repositorio.Post<FechasF, IList<OrdenEmbarque>>($"api/pedido/historial/envios", fechas);

            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loadingFiltro = false;
                orden = responseHttp.Response;
                ordenesSeleccionada = new List<OrdenEmbarque>();

                DestinoList = orden?.DistinctBy(x => x?.Destino?.Den).Select(x => x?.Destino?.Den)!;
                ProductoList = orden?.DistinctBy(x => x?.Producto?.Den).Select(x => x?.Producto?.Den)!;
                ClienteList = orden?.DistinctBy(x => x?.Destino?.Cliente?.Den).Select(x => x?.Destino?.Cliente?.Den)!;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerarExcel()
    {
        try
        {
            if (orden.Count != 0)
            {
                foreach (var item in orden!)
                {
                    Console.WriteLine(JsonConvert.SerializeObject(item));

                    if ((item.Destino!.Cliente!.Den == ClienteSeleccionado || string.IsNullOrEmpty(ClienteSeleccionado))
                       //   && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
                       //   && (item.Tonel!.Transportista!.Den == TransportistasSeleccionado || string.IsNullOrEmpty(TransportistasSeleccionado))
                       && (item.Producto!.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado))
                       )
                        historialOrdens.Add(new HistorialOrdenDTO
                        {
                            OrdenCompra = item.OrdenCompra?.den,
                            Cliente = item!.Destino?.Cliente?.Den,
                            Producto = item!.Producto?.Den,
                            Destino = item!.Destino?.Den,
                            Volumen = item!.Vol,
                            FechaCarga = item!.Fchcar!.Value.ToString("dd/MM/yyyy"),
                            Transportista = item!.Tonel?.Transportista?.Den,
                            Unidad = item!.Tonel?.Veh,
                            Compartimento = item!.Compartment,
                            Operador = item!.Chofer?.Den,
                            Bin = item!.Bin
                        });
                }
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("Historial de Envios");
                worksheet.Columns.Width = 60;
                worksheet.Columns.AutoFit();

                var header = worksheet.Cells["A1:K1"];
                //Formación del Excel

                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<HistorialOrdenDTO>(historialOrdens, true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                //Guardado en Excel
                await js.GuardarComo($"HistorialEnvios_{DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss")}.xlsx", excel.GetAsByteArray());
                asignacionUnidadesDTO.Clear();
            }
            else
            {
                await swal.FireAsync("Alerta", "Debe tener datos filtrados para poder exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task SendToSynthesis()
    {
        try
        {
            if (ordenesSeleccionada is not null)
            {
                if (ordenesSeleccionada.Count == 0)
                {
                    await swal.FireAsync("Alerta", "Selecciona alguna orden para enviar a synthesis", SweetAlertIcon.Warning);
                    return;
                }

                var confirm = await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar",
                    Text = "Tenga en cuenta que solo las ordenes con una unidad asignada seran enviadas.¿Desea continuar?"
                });

                if (!string.IsNullOrEmpty(confirm.Value))
                {
                    Message(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Actualizando Transportistas",
                        Detail = "Las ordenes se entan enviando a synthesis.\nPermanesca en esta pantalla hasta terminar el proceso.",
                        Duration = 15000
                    });

                    loadingSend = true;

                    var ordens = ordenesSeleccionada.Where(x => x!.Tonel != null).ToList();

                    var response = await repositorio.Post<List<OrdenEmbarque>, bool>($"api/services/resend", ordens);

                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingSend = false;
                        await swal.FireAsync("Exito", "Las ordenes fueron enviadas a synthesis.", SweetAlertIcon.Success);

                        orden = new List<OrdenEmbarque>();
                    }
                }
            }
            else
            {
                loadingSend = false;
                await swal.FireAsync("Alerta", "Debe de tener ordenes seleccionadas para poder enviar a synthesis", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void ToggleCheck(bool args, OrdenEmbarque orden)
    {
        try
        {
            if (args)
                ordenesSeleccionada.Add(orden);
            else
                ordenesSeleccionada.Remove(orden);

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
