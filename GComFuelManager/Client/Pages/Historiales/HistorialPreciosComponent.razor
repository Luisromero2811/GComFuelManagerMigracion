@page "/historial/precios"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@using GComFuelManager.Shared.DTOs
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Precios")]

<h4><b>Historial de Precios</b></h4>

<div class="col-12 mt-1">
    <div class="d-flex justify-content-center">
        <div class="col-12 mt-1">
            <div class="col-12 card shadow-sm">
                <div class="col-12 card-body">
                    <label><b>Mostrar Precios:</b></label>
                    <div class="col-12 row">
                        <div class="col-4 mb-1">
                            <label>Del:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateInicio" />
                        </div>
                        <div class="col-4 mb-1">
                            <label>A:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateFin" />
                        </div>
                        <div class="col-4 d-flex mt-2">
                            <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                                <i class="fa fa-solid fa-eye"></i><b>Mostrar Precios</b>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<AuthorizeView Roles="Admin, Administrador Sistema, Precios, Direccion, Gerencia" Context="Grid">
    <Authorized>
        <div class="col-12 d-flex justify-content-center">
            <RadzenDataGrid TItem="PrecioHistorico" Data="@preciosL" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                            GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            IsLoading="loading" @ref="grid" AllowSorting="true" AllowFiltering="true" ColumnWidth="200px" AllowColumnPicking="true" Culture="CultureInfo.CurrentCulture">
                <Columns>
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Fecha" Property="FchDia" FormatString="{0:d}" Filterable="false" OrderIndex="1" />
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Precio" Property="pre" Filterable="false" OrderIndex="2" />
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto.Den" OrderIndex="3">
                        <FilterTemplate Context="filter">
                            <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true"></RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div class="col-12 d-flex">
                                <div class="col-1">
                                    @if (data.codPrd == 25 || data.codPrd == 26 || data.codPrd == 27)
                                    {
                                        <div class="badge rounded-pill regular me-1">&nbsp;</div>
                                    }
                                    else if (data.codPrd == 11 || data.codPrd == 12 || data.codPrd == 116)
                                    {
                                        <div class="badge rounded-pill regular-vdm me-1">&nbsp;</div>
                                    }
                                    else if (data.codPrd == 19 || data.codPrd == 20 || data.codPrd == 21)
                                    {
                                        <div class="badge rounded-pill premium me-1">&nbsp;</div>
                                    }
                                    else
                                    {
                                        <div class="badge rounded-pill diesel me-1">&nbsp;</div>
                                    }
                                </div>
                                <div class="col-11">
                                    @data.Producto?.Den
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Destino" Property="NombreDestino" FilterValue="DestinoSeleccionado" OrderIndex="4">
                        <FilterTemplate>
                            <RadzenDropDown Data="DestinoList" @bind-Value="DestinoSeleccionado" AllowClear="true"></RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div>
                                @data.Destino?.Den
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Zona" Property="NombreZona" Filterable="false" OrderIndex="5" />
                    <RadzenDataGridColumn TItem="PrecioHistorico" Title="Cliente" Property="NombreCliente" FilterValue="ClienteSeleccionado" OrderIndex="6">
                        <FilterTemplate>
                            <RadzenDropDown Data="ClienteList" @bind-Value="ClienteSeleccionado" AllowClear="true"></RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div>
                                @data.Cliente?.Den
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </Authorized>
</AuthorizeView>

<div class="col-12 my-3">
    <div class="d-flex justify-content-center">
        <div class="col card shadow-sm">
            <div class="col-12 card-body">
                <div class="col-12 my-1">
                    <div class="row d-flex justify-content-start">
                        <label><b>Exportar Historico de Precios</b></label>
                    </div>
                    <div class="row d-flex justify-content-end">
                        <div class="col-4">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel"><i class="fa fa-solid fa-file-excel"></i><b>Exportar</b></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style type="text/css">
    .ancho{
        width: @TotalWidth;
    }
</style>

@code {
    //Variables
    string TotalWidth = string.Empty;
    int width = 0;

    FechasF fechas = new FechasF();
    PrecioHistorico Precio { get; set; } = new PrecioHistorico();

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    private string DestinoSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ClienteSeleccionado = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    //List
    List<PrecioHistorico> precios { get; set; } = new List<PrecioHistorico>();
    private IList<PrecioHistorico> preciosL { get; set; } = new List<PrecioHistorico>();

    //loadings
    bool loadingFiltro = false;
    bool loading = false;
    //grids
    RadzenDataGrid<PrecioHistorico> grid { get; set; } = new RadzenDataGrid<PrecioHistorico>();

    List<HistorialPrecioDTO> historialPrecio { get; set; } = new List<HistorialPrecioDTO>();

    protected override async Task OnInitializedAsync()
    {
        //width = await js.InvokeAsync<int>("eval", "window-innerWidth") - 360;
        //if (width < 0)
        //{
        //    width = 500;
        //    TotalWidth = $"{width}px";
        //}
    }

    public async Task MostrarOrdenFecha()
    {
        try
        {
            loadingFiltro = true;
            StateHasChanged();

            var responseHttp = await repositorio.Post<FechasF, IList<PrecioHistorico>>($"api/precio/historial", fechas);

            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loadingFiltro = false;
                preciosL = responseHttp.Response;
                ProductList = preciosL?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
                DestinoList = preciosL?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                ClienteList = preciosL?.DistinctBy(x => x.Cliente?.Den).Select(x => x.Cliente?.Den)!;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    //public async Task GenerateExcel()
    //{
    //    if (preciosL != null)
    //    {
    //        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
    //        var excel = new ExcelPackage();
    //        var worksheet = excel.Workbook.Worksheets.Add("Historial de Precios");
    //        worksheet.Columns.Width = 60;
    //        worksheet.Columns.AutoFit();

    //        //Formación del excel
    //        var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
    //            from o in preciosL
    //            select new HistorialPrecioDTO()
    //            {
    //                Fecha = o.FchDia.ToString("dd/MM/yyyy"),
    //                Pre = o.pre,
    //                Producto = o?.Producto?.Den,
    //                Destino = o.Destino?.Den,
    //                Zona = o.Zona?.Nombre,
    //                Cliente = o.Cliente?.Den
    //            }, true);
    //        tablebody.Style.Font.Bold = true;
    //        tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
    //        var header = worksheet.Cells["A1:F1"];
    //        header.Style.Fill.PatternType = ExcelFillStyle.Solid;
    //        header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
    //        //Guardado del Excel
    //        await js.GuardarComo($"HistorialPrecios_{DateTime.Today.ToString("dd/MM/yyyy")}.xlsx", excel.GetAsByteArray());
    //    }
    //    else
    //    {
    //        await swal.FireAsync("Alerta", "Debe tener datos filtrados para poder exportar", SweetAlertIcon.Warning);
    //    }
    //}
    public async Task GenerateExcel()
    {
        try
        {
            if (preciosL.Count != 0)
            {
                foreach (var item in preciosL)
                {
                    if ((item.Producto!.Den == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                    && (item.Destino!.Den == DestinoSeleccionado || string.IsNullOrEmpty(DestinoSeleccionado))
                        && (item.Destino!.Cliente!.Den == ClienteSeleccionado || string.IsNullOrEmpty(ClienteSeleccionado)))
                        historialPrecio.Add(new HistorialPrecioDTO
                        {
                            Fecha = item.FchDia.ToString("dd/MM/yyyy"),
                            Pre = item.pre,
                            Producto = item.Producto?.Den,
                            Destino = item.Destino?.Den,
                            Zona = item.Zona?.Nombre,
                            Cliente = item.Cliente?.Den
                        });
                }
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("Historial de Precios");
                worksheet.Columns.Width = 60;
                worksheet.Columns.AutoFit();

                //Formacion del excel
                var header = worksheet.Cells["A1:F1"];
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<HistorialPrecioDTO>(historialPrecio, true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                //Guardar en excel
                await js.GuardarComo($"HistorialPrecios_{DateTime.Today.ToString("dd/MM/yyyy")}.xlsx", excel.GetAsByteArray());
                historialPrecio.Clear();
            }
            else
            {
                await swal.FireAsync("Alerta", "Debe tener datos filtrados para poder exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


}

