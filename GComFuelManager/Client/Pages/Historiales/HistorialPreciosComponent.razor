@page "/historial/precios"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@using GComFuelManager.Shared.DTOs
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Precios, Analista Credito, Contador, Revision Precios")]

<h4><b>Historial de Precios</b></h4>

<div class="col-12 mt-1">
    <div class="d-flex justify-content-center">
        <div class="col-12 mt-1">
            <div class="col-12 card shadow-sm">
                <div class="col-12 card-body">
                    <label><b>Mostrar Precios:</b></label>
                    <div class="col-12 row">
                        <div class="col-4 mb-1">
                            <label>Del:</label>
                            <RadzenDatePicker class="col-12" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@busquedaPrecios.DateInicio" Min="@busquedaPrecios.DateInicio.AddDays(-3)" Max="@busquedaPrecios.DateInicio">
                            </RadzenDatePicker>
                        </div>
                        <div class="col-4 mb-1">
                            <label>A:</label>
                            <RadzenDatePicker class="col-12" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@busquedaPrecios.DateFin" Min="@busquedaPrecios.DateFin.AddDays(-3)" Max="@busquedaPrecios.DateFin">
                            </RadzenDatePicker>
                        </div>
                        <div class="col-4 d-flex mt-2">
                            <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@GetPreciosFiltro">
                                <i class="fa fa-solid fa-eye"></i><b>Mostrar Precios</b>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<AuthorizeView Roles="Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Revision Precios" Context="GridOptim">
    <Authorized>
        <div class="col-12 mt-4 overflow-scroll ancho-tabla" style="height:449px; resize:both;">
            <table class="table table-hover table-bordered table-sm" style="max-height: 100px; overflow: auto; width: 100%">
                <thead>
                    <tr>
                        <th scope="col">Fecha</th>
                        <th scope="col">Precio</th>
                        <th scope="col">Producto</th>
                        <th scope="col">Destino</th>
                        <th scope="col">Zona</th>
                        <th scope="col">Cliente</th>
                        <th scope="col">Moneda</th>
                        <th scope="col">Cambio</th>
                        <th scope="col">Usuario</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td></td>
                        <td></td>
                        <td>
                            <!--Filtro producto-->
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.producto" />
                        </td>
                        <td>
                            <!--Filtro destino-->
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.destino" />
                        </td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.zona" />
                        </td>
                        <td>
                            <!--Filtro cliente-->
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.cliente" />
                        </td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                    @foreach (var data in preciosL)
                    {
                        <tr>
                            <td>
                                <p>@data.FchDia.ToString("dd-MM-yyyy")</p>
                            </td>
                            <td>
                                <p>@data.pre.ToString()</p>
                            </td>
                            <td>
                                <p>@data.Producto?.Den</p>
                            </td>
                            <td>
                                <p>@data.Destino?.Den</p>
                            </td>
                            <td>
                                <p>@data.Zona?.Nombre</p>
                            </td>
                            <td>
                                <p>@data?.Cliente?.Den</p>
                            </td>
                            <td>
                                <p>@data?.Moneda?.Nombre</p>
                            </td>
                            <td>
                                <p>@data?.Equibalencia</p>
                            </td>
                            <td>
                                <p>@data?.Usuario?.Den</p>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="12">
                            <div class="col-12 row">
                                <div class="text-muted col-2">
                                    <p>Total de registros: @ConteoTotal Total de datos filtrados: @PreciosFiltrados.Count()</p>
                                </div>
                            </div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </Authorized>
</AuthorizeView>

<div class="col-12 my-3">
    <div class="d-flex justify-content-center">
        <div class="col card shadow-sm">
            <div class="col-12 card-body">
                <div class="col-12 my-1">
                    <div class="row d-flex justify-content-start">
                        <label><b>Exportar Historico de Precios</b></label>
                    </div>
                    <div class="row d-flex justify-content-end">
                        <div class="col-4">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel"><i class="fa fa-solid fa-file-excel"></i> <b>Exportar</b></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style type="text/css">
     .ancho {
        width: @TotalWidth;
    }
</style>

@code {

    FechasF fechas = new FechasF();
    PrecioHistorico Precio { get; set; } = new PrecioHistorico();

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    private string DestinoSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ClienteSeleccionado = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    //List
    List<PrecioHistorico> precios { get; set; } = new List<PrecioHistorico>();
    private IList<PrecioHistorico> preciosL { get; set; } = new List<PrecioHistorico>();
    private List<HistorialPrecioDTO> precioE { get; set; } = new List<HistorialPrecioDTO>();

    //Paginacion
    ParametrosBusquedaPrecios busquedaPrecios = new ParametrosBusquedaPrecios();
    int PaginasTotales;
    int PaginaActual = 1;
    int ConteoTotal;

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();

    //loadings
    bool loadingFiltro = false;
    bool loading = false;

    string TotalWidth = string.Empty;
    int width = 0;
    bool isClose = false;
    //grids
    RadzenDataGrid<PrecioHistorico> grid { get; set; } = new RadzenDataGrid<PrecioHistorico>();

    List<HistorialPrecioDTO> historialPrecio { get; set; } = new List<HistorialPrecioDTO>();

    private string Productoseleccionado = string.Empty;
    private string Destinoseleccionado = string.Empty;
    private string Clienteseleccionado = string.Empty;
    private string Zonaseleccionada = string.Empty;

    Dictionary<string, string> query = new Dictionary<string, string>();

    private IList<PrecioHistorico> PreciosFiltrados => preciosL.Where(x =>
(string.IsNullOrEmpty(Productoseleccionado) || x.Producto!.Den != null && x.Producto.Den != null && x.Producto.Den.Contains(Productoseleccionado, StringComparison.OrdinalIgnoreCase)) &&
(string.IsNullOrEmpty(Destinoseleccionado) || x.Destino!.Den != null && x.Destino.Den!.Contains(Destinoseleccionado, StringComparison.OrdinalIgnoreCase)) &&
 (string.IsNullOrEmpty(Clienteseleccionado) || x.Cliente!.Den != null && x.Cliente.Den!.Contains(Clienteseleccionado, StringComparison.OrdinalIgnoreCase)) &&
 (string.IsNullOrEmpty(Zonaseleccionada) || x.Zona!.Nombre != null && x.Zona.Nombre!.Contains(Zonaseleccionada, StringComparison.OrdinalIgnoreCase))
).ToList();

    private async Task PaginasSeleccionadas(int pagina)
    {
        PaginaActual = pagina;
        busquedaPrecios.pagina = PaginaActual;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["producto"] = busquedaPrecios.producto;
        queryStringObject["destino"] = busquedaPrecios.destino;
        queryStringObject["cliente"] = busquedaPrecios.cliente;
        queryStringObject["zona"] = busquedaPrecios.zona;
        queryStringObject["pagina"] = busquedaPrecios.pagina.ToString();
        queryStringObject["tamanopagina"] = busquedaPrecios.tamanopagina.ToString();

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlDecode(x.Value)}").ToArray());


        await GetPreciosFiltro();
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);

            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";
        }
    }

    public async Task GetPreciosFiltro()
    {
        try
        {
            loading = true;

            query = new Dictionary<string, string>();
            query["DateInicio"] = busquedaPrecios.DateInicio.ToString("MM/dd/yyyy") ?? string.Empty;
            query["DateFin"] = busquedaPrecios.DateFin.ToString("MM/dd/yyyy") ?? string.Empty;
            query["zona"] = busquedaPrecios.zona ?? string.Empty;
            query["producto"] = busquedaPrecios.producto ?? string.Empty;
            query["cliente"] = busquedaPrecios.cliente ?? string.Empty;
            query["destino"] = busquedaPrecios.destino ?? string.Empty;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var response = await repositorio.Get<List<PrecioHistorico>>($"api/precio/filtrohist?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                PaginasTotales = int.Parse(response.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                ConteoTotal = int.Parse(response.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActual = int.Parse(response.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                ProductList = preciosL?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
                DestinoList = preciosL?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                ClienteList = preciosL?.DistinctBy(x => x.Cliente?.Den).Select(x => x.Cliente?.Den)!;
                preciosL = response.Response;

            }
        }
        catch (Exception e)
        {
            loading = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    //public async Task MostrarOrdenFecha()
    //{
    //    try
    //    {
    //        loadingFiltro = true;
    //        StateHasChanged();

    //        var responseHttp = await repositorio.Post<FechasF, IList<PrecioHistorico>>($"api/precio/historial", fechas);

    //        if (responseHttp.Error)
    //        {
    //            loadingFiltro = false;
    //            var respuestaHttp = await responseHttp.ObtenerMensajeError();
    //            await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
    //        }
    //        else
    //        {
    //            loadingFiltro = false;
    //            preciosL = responseHttp.Response;
    //            ProductList = preciosL?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
    //            DestinoList = preciosL?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
    //            ClienteList = preciosL?.DistinctBy(x => x.Cliente?.Den).Select(x => x.Cliente?.Den)!;
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        loadingFiltro = false;
    //        await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }
    //}

    public async Task GenerateExcel()
    {
        try
        {
            var responseHttp = await repositorio.Post<ParametrosBusquedaPrecios, List<HistorialPrecioDTO>?>($"api/precio/historial", busquedaPrecios);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                precioE = responseHttp.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //Generacion de Excel
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("HistorialPrecios");
                worksheet.Columns.Width = 49;
                worksheet.Columns.AutoFit();
                //Formación de Excel
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    precioE
                  , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                var header = worksheet.Cells["A1:I1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await js.GuardarComo($"HistorialPrecios_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


}

