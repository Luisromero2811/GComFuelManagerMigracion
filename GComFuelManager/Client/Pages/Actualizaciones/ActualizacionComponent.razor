@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns

@page "/actualizacion"

<AuthorizeView Roles="Admin, Administrador Sistema, Programador, Gestion de Transporte">
    <Authorized>
        <h4><b>Actualizacion de registros</b></h4>

        <div class="col-12 d-flex justify-content-center mt-4">
            <div class="col-9 card shadow ">
                <div class="card-body">
                    <div class="row p-4">
                        <div class="col-12 mb-4">
                            <!--Transportista-->
                            <label>Transportista:</label>
                            <RadzenDropDown AllowClear="true" @bind-Value="TransportistaSeleccionado" Data="Transportistas" TextProperty="Den" TValue="Transportista"
                                            AllowVirtualization="true" AllowFiltering="true" FilterOperator="StringFilterOperator.Contains"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12" />
                        </div>
                        <div class="col-6 mb-3">
                            <div class="col-12">
                                <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@ServiceUnidad" Disabled="updateData">
                                    <div class="col-12 row">
                                        <div class="col-4">
                                            <img src="img/delivery-truck.png" class="img-fluid" />
                                        </div>
                                        <div class="col d-flex align-items-center text-black justify-content-start">
                                            <b>Actualizar unidades</b>
                                        </div>
                                    </div>
                                </RadzenButton>
                            </div>
                        </div>
                        <div class="col-6 mb-3">
                            <div class="col-12">
                                <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@ServiceChofer" Disabled="updateData">
                                    <div class="col-12 row">
                                        <div class="col-4">
                                            <img src="img/worker (1).png" class="img-fluid" />
                                        </div>
                                        <div class="col d-flex align-items-center text-black justify-content-start">
                                            <b>Actualizar operarios</b>
                                        </div>
                                    </div>
                                </RadzenButton>
                            </div>
                        </div>
                        <hr>
                        <div class="col-6 mb-3">
                            <div class="col-12">
                                <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@ServiceTransportistas" Disabled="updateData">
                                    <div class="col-12 row">
                                        <div class="col-4">
                                            <img src="img/delivery-truck (1).png" class="img-fluid" />
                                        </div>
                                        <div class="col d-flex align-items-center text-black justify-content-start">
                                            <b>Actualizar transportistas</b>
                                        </div>
                                    </div>
                                </RadzenButton>
                            </div>
                        </div>
                        <div class="col-6 mb-3">
                            <div class="col-12">
                                <RadzenButton class="col-12 h-100 btn shadow-sm" Variant="Variant.Text" Click="@ServiceClientDestination" Disabled="updateData">
                                    <div class="col-12 row">
                                        <div class="col-4">
                                            <img src="img/rating.png" class="img-fluid" />
                                        </div>
                                        <div class="col d-flex align-items-center text-black justify-content-start">
                                            <b>Actualizar clientes/destinos</b>
                                        </div>
                                    </div>
                                </RadzenButton>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema">
    <Authorized>
        <div class="col-12 d-flex justify-content-center mt-4">
            <div class="col-9 card shadow ">
                <div class="card-body">
                    <div class="col-12 row">
                        <div class="col-8 d-flex mt-auto">
                            <RadzenDropDown Data="@Clientes" @bind-Value="Cliente" TValue="Cliente" class="col-12" AllowFiltering="true" TextProperty="Den"
                                            AllowVirtualization="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains">
                                <Template Context="data">
                                    @((data as Cliente)!.Den) | @((data as Cliente)!.CodCte)
                                </Template>
                                <ValueTemplate Context="data">
                                    @((data as Cliente)!.Den) | @((data as Cliente)!.CodCte)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                        <div class="col-2">
                            <label class="form-label">Codigo de identificacion:</label>
                            <InputText @bind-Value="Cliente.CodCte" class="col-12 form-control" />
                        </div>
                        <div class="col-2 d-flex mt-auto">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@PutClientes">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>



@code {
    private IEnumerable<Cliente> Clientes { get; set; } = new List<Cliente>();
    private Cliente Cliente { get; set; } = new Cliente();

    bool updateData = false;



    //Listas
    private List<Transportista> Transportistas { get; set; } = new List<Transportista>();
    private Transportista TransportistaSeleccionado { get; set; } = new Transportista();

    protected override async Task OnInitializedAsync()
    {
        await GetTransportista();
        await GetClientes();
    }

    public async Task GetTransportista()
    {
        var response = await repositorio.Get<List<Transportista>>("api/transportista");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Transportistas = response.Response;
        }
    }

    private async Task GetClientes()
    {
        try
        {
            var response = await repositorio.Get<IEnumerable<Cliente>>("api/clientes/all");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task PutClientes()
    {
        try
        {
            var response = await repositorio.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Exito", "Clinte modificado.", SweetAlertIcon.Success);

            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ServiceTransportistas()
    {
        try
        {
            ns.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Actualizando Transportistas",
                Detail = "Los registros de los transportistas se estan actualizando. Esto podria tardar un tiempo.\n Permanezca en esta pantalla hasta finalizar el proceso.",
                Duration = 15000
            });
            updateData = true;
            var response = await repositorio.Get<bool>($"api/transportista/service/");
            if (response.Error)
            {
                updateData = false;
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Exito", "Los transportistas fueron actualizados", SweetAlertIcon.Success);
                updateData = false;
            }
        }
        catch (Exception e)
        {
            updateData = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ServiceClientDestination()
    {
        try
        {
            ns.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Actualizando Clientes/Destinos",
                Detail = "Los registros de los clientes y destinos se estan actualizando. Esto podria tardar un tiempo. \n Permanezca en esta pantalla hasta finalizar el proceso.",
                Duration = 16000
            });
            updateData = true;
            var respuestaHttp = await repositorio.Get<bool>("api/clientes/service");
            if (respuestaHttp.Error)
            {
                updateData = false;
                var responseHttp = await respuestaHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Exito", "Los Clientes y Destinos fueron actualizados", SweetAlertIcon.Success);
                updateData = false;
            }
        }
        catch (Exception e)
        {
            updateData = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ServiceUnidad()
    {
        try
        {
            ns.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Actualizando Unidades",
                Detail = "Los registros de las unidades se estan actualizando. Esto podría tardar un tiempo. \n Permanezca en esta pantalla hasta finalizar el proceso.",
                Duration = 16000
            });
            updateData = true;
            if (string.IsNullOrEmpty(TransportistaSeleccionado.Busentid))
            {
                updateData = false;
                ns.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El transportista seleccionado no pudo ser actualizado",
                    Duration = 10000
                });
            }
            long carrId;
            if (long.TryParse(TransportistaSeleccionado.CarrId, out carrId))
            {
                var respuestaHttp = await repositorio.Get<bool>($"api/vehiculo/service/{carrId}");
                if (respuestaHttp.Error)
                {
                    updateData = false;
                    var responseHttp = await respuestaHttp.ObtenerMensajeError();
                    await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    await swal.FireAsync("Exito", "Las Unidades han sido actualizadas", SweetAlertIcon.Success);
                    updateData = false;
                }
            }
        }
        catch (Exception e)
        {
            updateData = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ServiceChofer()
    {
        try
        {
            ns.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Actualizando Choferes",
                Detail = "Los registros de los choferes se estan actualizando. Esto podría tardar un tiempo. \n Permanezca en esta pantalla hasta finalizar el proceso.",
                Duration = 16000
            });
            updateData = true;
            if (string.IsNullOrEmpty(TransportistaSeleccionado.Busentid))
            {
                updateData = false;
                ns.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El transportista seleccionado no pudo ser actualizado.",
                    Duration = 10000
                });
            }

            long busentid;
            if (long.TryParse(TransportistaSeleccionado.Busentid, out busentid))
            {
                var respuestaHttp = await repositorio.Get<bool>($"api/chofer/service/{busentid}");
                if (respuestaHttp.Error)
                {
                    updateData = false;
                    var responseHttp = await respuestaHttp.ObtenerMensajeError();
                    await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    await swal.FireAsync("Exito", "Los operadores han sido actualizados con exito", SweetAlertIcon.Success);
                    updateData = false;
                }
            }
        }
        catch (Exception e)
        {
            updateData = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }



}

