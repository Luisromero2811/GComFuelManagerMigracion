@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionClienteValidation gestionCliente


@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador")]

<h4>Catalogo de clientes</h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="GestionClientes">
    <div class="col-12 d-flex justify-content-center" style="height:60vh;">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito" Context="Gestion">
                    <h5>Agregar Clientes</h5>
                    <!--Aquí se agregará las validaciones para gestionar a los clientes-->
                    <EditForm Model="@Cliente" class="form col-12" OnValidSubmit="@CreateClientes" Context="Validations">
                        <FluentValidationValidator Validator="gestionCliente" />
                        <ValidationSummary />
                        <div class="col-12 row">
                            <div class="col-3">
                                <label>Grupo:</label>
                                <RadzenDropDown @bind-Value="Cliente.grupo" TValue="Grupo" Data="Grupos" TextProperty="Den"
                                                AllowVirtualization="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                </RadzenDropDown>
                            </div>
                            <div class="col-3">
                                <label>Nombre del cliente:</label>
                                <InputText @bind-Value="Cliente.Den" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Modelo de Venta</label>
                                <InputSelect @bind-Value="Cliente.MdVenta" class="form-control">
                                    <option>--Selecciona una opción--</option>
                                    @if (MdVenta is null)
                                    {
                                        <option disabled>Cargando ...</option>
                                    }
                                    else if (MdVenta.Count == 0)
                                    {
                                        <option disabled> No hay Modelo de Venta</option>
                                    }
                                    else
                                    {
                                        foreach (var item in MdVenta)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-2">
                                <label>Tipo de Venta</label>
                                <InputSelect @bind-Value="Cliente.Tipven" class="form-select">
                                    <option>--Selecciona una opción</option>
                                    @if (TpVenta is null)
                                    {
                                        <option disabled> Cargando...</option>
                                    }
                                    else if (TpVenta.Count == 0)
                                    {
                                        <option disabled> No hay Tipo de Venta</option>
                                    }
                                    else
                                    {
                                        foreach (var item in TpVenta)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-2 d-flex mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i> Registrar cliente
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </AuthorizeView>
                <hr />
                <!--Aquí ligamos la terminal a los clientes-->
                @*<EditForm>
                    <FluentValidationValidator/>
                    <ValidationSummary/>*@
                <div class="col-12 row">
                    <div class="col-3">
                        <label>Terminales:</label>
                        <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una terminal">
                            <RenderValue>
                                <div>Terminales</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Tads_Seleccionados.Contains(context))" @onchange="args => { CheckTads(context, args?.Value); }" />
                                    <label class="form-check-label" for="@context.Cod">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Grupo</label>
                        <DropDownFilter Listado="GrupoActivo" TListado="Grupo" TValue="Int16?" Default_Placeholder="Seleccione un Grupo" FiltrarValor="Obtener_Grupos"
                                        Propiedad_Valor="Cod" On_Change_Method="@GetCliente" @bind-Valor="Cliente.codgru">
                            <RenderValue>
                                @context.Den
                            </RenderValue>
                            <Render>
                                @context.Den
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Clientes:</label>
                        <DropDownFilter Listado="Clientes" TListado="Cliente" TValue="int" Seleccion_Multiple="true"
                                        Default_Placeholder="Seleccione un cliente">
                            <RenderValue>
                                <div>Clientes</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Clientes_Seleccionados.Contains(context))" @onchange="args => { CheckClient(context, args?.Value); }" />
                                    <label class="form-check-label" for="@context.Cod">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3 d-flex">
                        <button class="col-12 btn gcom-bg-amarillo mt-auto" type="submit" @onclick="@PostRelacion">
                            <i class="fa fa-solid fa-plus"></i> Relacionar Terminal-Cliente
                        </button>
                    </div>
                </div>
                @*</EditForm>*@
                <!--Aquí empieza la tabla de muestreo de datos-->
                <hr />
            </div>
        </div>
    </div>
</AuthorizeView>


@code {
    //Variables
    private short? GrupoSeleccionado = 0;
    private short GrupoSeleccionadoFiltro = 0;

    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Cliente> Clientes_Seleccionados { get; set; } = new();

    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<Cliente> Clientes { get; set; } = new List<Cliente>();
    List<Cliente> ClienteActivo { get; set; } = new List<Cliente>();
    List<Grupo> Grupos { get; set; } = new List<Grupo>();
    List<Grupo> GrupoActivo { get; set; } = new();

    List<ClienteTadDTO> clientesTads { get; set; } = new List<ClienteTadDTO>();
    List<Cliente> ClientesGrupo { get; set; } = new List<Cliente>();

    //Instancias
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();
    public Cliente Cliente { get; set; } = new Cliente();
    public GrupoClienteDTO CliGru { get; set; } = new GrupoClienteDTO();
    Tad tads { get; set; } = new();

    private List<string> MdVenta { get; set; } = new List<string> { "Delivery", "Rack" };
    private List<string> TpVenta { get; set; } = new List<string> { "Interno", "Externo", "Rack" };


    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await Obtener_Grupos(string.Empty);
        await GetGrupos();
    }

    private async Task CreateClientes()
    {
        try
        {
            if (Cliente.grupo == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un grupo.", SweetAlertIcon.Warning);
            }
            else
            {
                var response = await repositorio.Post<Cliente>($"api/cliente/crear", Cliente);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Cliente {Cliente.Den} asignado al grupo seleccionado", SweetAlertIcon.Success);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<Grupo>>("api/grupo/allactives");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task GetCliente()
    {
        try
        {
            var response = await repositorio.Get<List<Cliente>>($"api/cliente/Grupo/{Cliente.codgru}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {

                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task PostRelacion()
    {
        try
        {
            //if (Tads_Seleccionados.Count != 0 && Clientes_Seleccionados.Count != 0)
            //{
            clienteTadDTO.Tads = Tads_Seleccionados;
            clienteTadDTO.Clientes = Clientes_Seleccionados;
            var response = await repositorio.Post<ClienteTadDTO>($"api/cliente/relacion", clienteTadDTO);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Cliente relacionado exitosamente", SweetAlertIcon.Success);
            }
            //}
            //else
            //{
            //    await Swal.FireAsync("Advertencia", "Necesita seleccionar una terminal o cliente", SweetAlertIcon.Warning);
            //}

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Grupos(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Den"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<Grupo>>($"api/grupo/filtraractivos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                GrupoActivo = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CheckClient(Cliente cliente, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Clientes_Seleccionados.Contains(cliente))
                    Clientes_Seleccionados.Add(cliente);
            }
            else
            {
                if (Clientes_Seleccionados.Contains(cliente))
                    Clientes_Seleccionados.Remove(cliente);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

}
          

