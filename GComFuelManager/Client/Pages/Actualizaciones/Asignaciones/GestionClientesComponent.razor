<!--
-->
@* <h4>catalogo de clientes</h4> *@
<!--<authorizeview roles="admin, administrador sistema, direccion, gerencia, analista credito, contador, ejecutivo de cuenta operativo, ejecutivo de cuenta comercial, programador" context="gestionclientes">
    <div class="card">
        <div class="card-header">
            <b>agregar cliente</b>
        </div>
        <div class="card-body">
            <editform model="@cliente" class="form col-12" onvalidsubmit="@createclientes" context="validations">
                <fluentvalidationvalidator validator="gestioncliente" />
                <validationsummary />
                <div class="col-12 row">
                    <div class="col">
                        <label>grupo:</label>
                        <dropdownfilter tvalue="int16?" listado="grupos" tlistado="grupo" propiedad_valor="cod" @bind-valor="cliente.codgru" default_placeholder="grupos"
                         filtrarvalor="obtener_grupos_cliente">
                            <render>
                                @context.den
                            </render>
                            <rendervalue>
                                @context.den
                            </rendervalue>
                        </dropdownfilter>-->
                        @* <radzendropdown @bind-value="cliente.codgru" tvalue="int16?" data="grupos" textproperty="den" valueproperty="cod"
                        allowvirtualization="true" allowfiltering="true"
                        filtercasesensitivity="filtercasesensitivity.caseinsensitive" class="col-12">
                        </radzendropdown> *@
                    <!--</div>
                    <div class="col">
                        <label>nombre del cliente:</label>
                        <inputtext @bind-value="cliente.den" class="form-control form-control-sm" />
                    </div>
                    <div class="col">
                        <label>modelo de venta</label>
                        <inputselect @bind-value="cliente.mdventa" class="form-select form-select-sm">
                            <option>--selecciona una opción--</option>
                            @if (mdventa is null)
                            {
                                <option disabled>cargando ...</option>
                            }
                            else if (mdventa.count == 0)
                            {
                                <option disabled> no hay modelo de venta</option>
                            }
                            else
                            {
                                foreach (var item in mdventa)
                                {
                                    <option value="@item">@item</option>
                                }
                            }
                        </inputselect>
                    </div>
                    <div class="col">
                        <label>tipo de venta</label>
                        <inputselect @bind-value="cliente.tipven" class="form-select form-select-sm">
                            <option>--selecciona una opción</option>
                            @if (tpventa is null)
                            {
                                <option disabled> cargando...</option>
                            }
                            else if (tpventa.count == 0)
                            {
                                <option disabled> no hay tipo de venta</option>
                            }
                            else
                            {
                                foreach (var item in tpventa)
                                {
                                    <option value="@item">@item</option>
                                }
                            }
                        </inputselect>
                    </div>
                    <div class="col">
                        <label>identificador externo</label>
                        <inputtext @bind-value="cliente.identificador_externo" class="form-control form-control-sm"/>
                    </div>
                    <div class="col-2 d-flex mt-auto">
                        @if (!isedit)
                        {
                            <button class="col-12 btn gcom-bg-amarillo btn-sm" type="submit">
                                <i class="fa fa-solid fa-plus"></i> guardar
                            </button>
                        }
                        else
                        {
                            <button class="col mx-2 btn gcom-bg-amarillo btn-sm" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                            <button class="col mx-2 btn gcom-bg-amarillo btn-sm" type="button" @onclick="@canceledit">
                                <i class="fa fa-solid fa-xmark"></i>
                            </button>
                        }
                    </div>
                </div>
            </editform>
        </div>
    </div>
    <div class="card mt-2" style="height: 500px; overflow: scroll;">
        <div class="card-header">
            <b>gestión de clientes</b>
        </div>
        <div class="card-body">
            <div class="col-12 row">
                <div class="col-3 mb-2">
                    <label>grupo</label>
                    <dropdownfilter listado="grupoactivo" tlistado="grupo" tvalue="int16?" default_placeholder="seleccione un grupo" filtrarvalor="obtener_grupos"
                                    propiedad_valor="cod" on_change_method="@getcliente" @bind-valor="cod_gru">
                        <rendervalue>
                            @context.den
                        </rendervalue>
                        <render>
                            @context.den
                        </render>
                    </dropdownfilter>
                </div>
            </div>
            <div class="col-12">
                <tabla datos="clientes">
                    <cabeceras>
                        <tr>
                            <th>cliente</th>
                            <th>modelo de venta</th>
                            <th>tipo de venta</th>
                            <th>identificador externo</th>
                            <th>estado</th>
                            <th>editar</th>
                        </tr>
                    </cabeceras>
                    <filtros>
                        <tr class="fila">
                            <td>
                                <input class="form-control form-control-sm" @oninput="loaddata" @bind="busquedacatalogo.nombrecliente" />
                            </td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    </filtros>
                    <columnas context="item">
                        <tr>
                            <td>@item.den</td>
                            <td>@item.mdventa</td>
                            <td>@item.tipven</td>
                            <td>@item.identificador_externo</td>
                            <td>
                                <div class="form-check form-switch mx-2">
                                    <input class="form-check-input" type="checkbox" role="switch" id="@item.cod" checked="@item.activo"
                                           @onchange="((changeeventargs e) => habilitardeshabilitar(item, e))">
                                </div>
                            </td>-->
                            <!--editar-->
                            <!--<td>
                                <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>setcliente(item))">
                                    <i class="fa fa-solid fa-edit"></i>
                                </button>
                            </td>
                        </tr>
                    </columnas>
                </tabla>
            </div>
        </div>
    </div>
</authorizeview>

@code {
    //variables
    private short? gruposeleccionado = 0;

    //listas
    list<tad> tads_seleccionados { get; set; } = new();
    list<cliente> clientes_seleccionados { get; set; } = new();

    list<tad> terminales { get; set; } = new list<tad>();
    list<cliente> clientes { get; set; } = new();
    list<grupo> grupos { get; set; } = new list<grupo>();
    list<grupo> grupoactivo { get; set; } = new();

    //instancias
    clientetaddto clientetaddto { get; set; } = new clientetaddto();
    public cliente cliente { get; set; } = new cliente();
    public cliente_tad cliente_tad { get; set; } = new cliente_tad();

    cliente clientes { get; set; } = new();
    tad tads { get; set; } = new();
    grupo grupo { get; set; } = new();

    dictionary<string, string> query = new dictionary<string, string>();
    parametrosbusquedacatalogo busquedacatalogo = new parametrosbusquedacatalogo();

    private list<string> mdventa { get; set; } = new list<string> { "delivery", "rack" };
    private list<string> tpventa { get; set; } = new list<string> { "interno", "externo", "rack" };
    bool isedit = false;
    short? cod_gru = 0;

    protected override async task oninitializedasync()
    {
        await obtener_terminales_validas();
        await obtener_grupos(string.empty);
        await getgrupos();
    }

    private async task createclientes()
    {
        try
        {
            if (cliente.codgru == null)
            {
                await swal.fireasync("alerta", "seleccione un grupo.", sweetalerticon.warning);
            }
            else
            {
                var response = await repositorio.post<cliente>($"api/cliente/crear", cliente);
                if (response.error)
                {
                    var message = await response.obtenermensajeerror();
                    await swal.fireasync("error", message, sweetalerticon.error);
                }
                else
                {
                    await swal.fireasync("exito", $"cliente {cliente.den} asignado al grupo seleccionado", sweetalerticon.success);
                    statehaschanged();
                    await getcliente();
                }
            }

        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    private async task obtener_terminales_validas()
    {
        try
        {
            var response = await repositorio.get<list<tad>>("api/terminal/activas");
            if (response.error)
            {
                string? message = await response.obtenermensajeerror();
                await swal.fireasync("error", message, sweetalerticon.error);
            }
            else
            {
                terminales = response.response;
            }
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);

        }
    }

    public async task getgrupos()
    {
        try
        {
            var response = await repositorio.get<list<grupo>>("api/grupo/allactives");
            if (response.error)
            {
                var message = await response.obtenermensajeerror();
                await swal.fireasync("error", message, sweetalerticon.error);
            }
            else
            {
                grupos = response.response;
            }
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    private async task loaddata(changeeventargs args)
    {
        busquedacatalogo.nombrecliente = args.value?.tostring() ?? string.empty;
        await getcliente();
    }

    private async task getcliente()
    {
        try
        {
            query = new dictionary<string, string>();
            query["nombrecliente"] = busquedacatalogo.nombrecliente;
            query["codgru"] = cod_gru.tostring() ?? string.empty;
            var uri = constructor_de_url_parametros.generar_url(query);
            var response = await repositorio.get<list<cliente>>($"api/cliente/listado?{uri}");
            if (response.error)
            {
                var message = await response.obtenermensajeerror();
                await swal.fireasync("error", message, sweetalerticon.error);
            }
            else
            {
                statehaschanged();
                clientes = response.response;
            }
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    private async task obtener_grupos(string value)
    {
        try
        {
            grupoactivo = await obtener_grupos_general(value);
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    private async task obtener_grupos_cliente(string value)
    {
        try
        {
            grupos = await obtener_grupos_general(value);
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    public async task<list<grupo>> obtener_grupos_general(string value)
    {
        try
        {
            dictionary<string, string> query = new();
            query["den"] = value;

            var uri = constructor_de_url_parametros.generar_url(query);

            var response = await repositorio.get<list<grupo>>($"api/grupo/filtraractivos?{uri}");
            if (response.error)
            {
                var message = await response.obtenermensajeerror();
                await swal.fireasync("error", message, sweetalerticon.error);
            }
            else
            {
                return response.response;
            }

            return new();
        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
            return new();
        }
    }

    private async task habilitardeshabilitar(cliente destino, changeeventargs tp)
    {
        try
        {
            var status = (bool)tp.value!;
            var responsehttp = await repositorio.put<bool>($"api/cliente/{destino.cod}", status);
            if (responsehttp.error)
            {
                var message = await responsehttp.obtenermensajeerror();
                await swal.fireasync("error", message, sweetalerticon.error);
            }
            else
            {
                if (status)
                {
                    await message($"{destino.den} ha sido habilitado", sweetalerticon.info);
                }
                else
                {
                    await message($"{destino.den} ha sido deshabilitado", sweetalerticon.info);
                }
            }

        }
        catch (exception e)
        {
            await swal.fireasync("error", e.message, sweetalerticon.error);
        }
    }

    private async task message(string message, sweetalerticon icon)
    {
        await swal.mixin(new sweetalertoptions
            {
                position = "top-end",
                showconfirmbutton = false,
                timer = 1800,
                toast = true,
            }).fireasync(new sweetalertoptions { icon = icon, text = message });
    }

    private void setcliente(cliente cliente)
    {
        try
        {
            isedit = true;
            cliente = cliente;
        }
        catch (exception e)
        {
            throw e;
        }
    }

    private async void canceledit()
    {
        isedit = false;
        cliente = new cliente();
    }

}-->


