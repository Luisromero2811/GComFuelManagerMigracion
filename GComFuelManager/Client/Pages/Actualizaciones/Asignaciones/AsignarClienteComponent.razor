@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms
@inject AsignarGrupoValidation validation
@inject AsignarGrupoClienteValidation validate

<h4><b>Grupo - Cliente</b></h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador">
    <div class="col-12 d-flex justify-content-center">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <AuthorizeView Roles="Admin, Administrador Sistema" Context="Admin">
                    <h5>Agregar grupo</h5>
                    <EditForm Model="@Grupo" class="form col-12" OnValidSubmit="@CreateGrupos" Context="validations">
                        <FluentValidationValidator Validator="validation" />
                        <ValidationSummary />
                        <div class="col-12 row mb-3">

                            <div class="col-md-6 col">
                                <label>Nombre:</label>
                                <InputText @bind-Value="@Grupo.Den" class="form-control" />
                            </div>
                            <div class="col-md-5 col">
                                <label class="">Tipo de Venta</label>
                                <InputSelect @bind-Value="Grupo.Tipven" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (TpVenta is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (TpVenta.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in TpVenta)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col d-flex mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i>
                                </button>
                            </div>

                        </div>
                    </EditForm>
                </AuthorizeView>
                <hr />
                <EditForm Model="@CliGru" class="form col-12" OnValidSubmit="@AsignarClientesGroup" Context="vallidations">
                    <FluentValidationValidator Validator="validate" />
                    <ValidationSummary />
                    <div class="col-12 mb-4 row">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="Gruposss">
                            <div class="col">
                                <label>Grupo:</label>
                                <RadzenDropDown @bind-Value="CliGru.grupo" TValue="Grupo" Data="Grupos" TextProperty="Den"
                                                AllowVirtualization="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                    @*<Template>
                                        @((context as Grupo)?.Den)
                                        </Template>
                                        <ValueTemplate>
                                        @((context as Grupo)?.Den)
                                        </ValueTemplate>*@
                                </RadzenDropDown>
                            </div>
                        </AuthorizeView>
                        <AuthorizeView Roles="Admin, Administrador Sistema" Context="Cli">
                            <div class="col">
                                <label>Cliente:</label>
                                <RadzenDropDown @bind-Value="CliGru.cliente" Data="ClientesGrupo" TValue="Cliente" TextProperty="Den"
                                                AllowVirtualization="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                    @*<Template>
                                        @((context as Cliente)?.Den)
                                        </Template>
                                        <ValueTemplate>
                                        @((context as Cliente)?.Den)
                                        </ValueTemplate>*@
                                </RadzenDropDown>
                            </div>
                        </AuthorizeView>
                    </div>
                    <div class="col-12 mb-3 d-flex justify-content-center">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="BuscarClientes">
                            <div class="col d-flex mt-auto">
                                <button class="col-6 mx-auto btn gcom-bg-amarillo" @onclick="@GetClientes" type="button">
                                    <i class="fa fa-solid fa-magnifying-glass"></i> Buscar Clientes
                                </button>
                            </div>
                        </AuthorizeView>
                        <AuthorizeView Roles="Admin, Administrador Sistema" Context="BotonCli">
                            <div class="col d-flex mt-auto">
                                <button class="col-6 mx-auto btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i> Agregar Cliente
                                </button>
                            </div>
                        </AuthorizeView>
                    </div>
                </EditForm>
            </div>


        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador">
    <div class="col-12 d-flex justify-content-center">
        <RadzenDataGrid TItem="Cliente" Data="@Clientes" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:500px;"
                        IsLoading="loading" @ref="@grid" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="Cliente" Title="Nombre de cliente" Property="Den" OrderIndex="1" />
                <RadzenDataGridColumn TItem="Cliente" Title="Tipo de venta" Property="Tipven" Width="200px" OrderIndex="2" />
                <RadzenDataGridColumn TItem="Cliente" Title="Habilitar / Deshabilitar" Width="200px" OrderIndex="3">
                    <Template Context="data">
                        <div class="col-12">
                            <div class="form-check form-switch m-2">
                                <input class="form-check-input" type="checkbox" role="switch" id="@data.Cod" checked="@data.Activo"
                                       @onchange="@((ChangeEventArgs e) => HabilitarDeshabilitar(data, e))">
                            </div>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
@code {
    private List<string> TpVenta { get; set; } = new List<string> { "Interno", "Externo", "Rack" };

    public IEnumerable<Cliente> ClientesGrupo { get; set; } = new List<Cliente>();
    public Grupo GrupoSeleccionado { get; set; } = null!;
    public IEnumerable<Cliente> Clientes { get; set; } = new List<Cliente>();

    public bool loading { get; set; } = false;
    public RadzenDataGrid<Cliente> grid { get; set; } = new RadzenDataGrid<Cliente>();
    public Cliente ClienteSeleccionado { get; set; } = new Cliente();
    public Grupo Grupo { get; set; } = new Grupo();
    IList<Grupo> Grupos { get; set; } = new List<Grupo>();

    GrupoClienteDTO CliGru { get; set; } = new GrupoClienteDTO() { grupo = new Grupo() , cliente = new Cliente() };

    protected async override Task OnInitializedAsync()
    {
        await GetClientesGroup();
        await GetGrupos();
    }

    private async Task AsignarClientesGroup()
    {
        try
        {
            if (CliGru.grupo == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un grupo.", SweetAlertIcon.Warning);
            }
            else
            {
                //Console.WriteLine(JsonConvert.SerializeObject(CliGru));
                CliGru.cliente!.codgru = CliGru.grupo!.Cod;
                var response = await http.Post<Cliente>($"api/grupo/cliente", CliGru.cliente);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Cliente Asignado a {CliGru.cliente.Den}", SweetAlertIcon.Success);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CreateGrupos()
    {
        try
        {
            var response = await http.Post<Grupo>("api/grupo", Grupo);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await GetGrupos();
                await Swal.FireAsync("Exito", $"Grupo {Grupo.Den} creado exitosamente", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IList<Grupo>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetClientes()
    {
        try
        {
            if (CliGru.grupo == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un grupo.", SweetAlertIcon.Warning);

            }
            else
            {
                //CliGru.cliente!.codgru = CliGru.grupo.Cod;
                var response = await http.Get<IEnumerable<Cliente>>($"api/clientes/grupo/{CliGru.grupo.Cod}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    Clientes = response.Response;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetClientesGroup()
    {
        try
        {
            var response = await http.Get<IEnumerable<Cliente>>($"api/clientes/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ClientesGrupo = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task HabilitarDeshabilitar(Cliente cliente, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var response = await http.Put<bool>($"api/clientes/{cliente.Cod}", status);

            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                grid?.Reload();
                if (status)
                {
                    await Message($"{cliente.Den} ha sido habilitado", SweetAlertIcon.Info);
                }
                else
                {
                    await Message($"{cliente.Den} ha sido deshabilitado", SweetAlertIcon.Info);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Message(string message, SweetAlertIcon icon)
    {
        await Swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1700,
            TimerProgressBar = true,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = message });
    }

}
