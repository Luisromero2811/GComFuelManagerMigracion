@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionGrupoTransportesValidation validarGrupoT

<h4>Catalogo de Grupo Transportistas</h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="GestionClientes">
    <div class="col-12 d-flex justify-content-center" style="height:40vh;">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <h5>Agregar Grupos</h5>
                <!--Aquí se agregará las validaciones para gestionar a los grupos de transportes-->
                <EditForm Model="@grupoTransportista" class="form col-12" OnValidSubmit="@SaveGrupo" Context="validacion">
                    <FluentValidationValidator Validator="validarGrupoT" />
                    <ValidationSummary />
                    <div class="col-12 row">
                        <div class="col-3">
                            <label>Nombre del grupo de transportes:</label>
                            <InputText @bind-Value="grupoTransportista.den" class="form-control" MaxLenght="80" />
                        </div>
                        <div class="col-2 d-flex mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Registrar cliente
                            </button>
                        </div>
                    </div>
                </EditForm>
                <hr />
                <div class="col-12 row">
                    <div class="col-4">
                        <label>Terminales:</label>
                        <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una terminal">
                            <RenderValue>
                                <div>Terminales</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Tads_Seleccionados.Contains(context))" @onchange="args => { CheckTads(context, args?.Value); }" />
                                    <label class="form-check-label" for="@context.Cod">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-4">
                        <label>Grupos:</label>
                        <DropDownFilter Listado="GrupoTransportistas" TListado="GrupoTransportista" TValue="int" Seleccion_Multiple="true" FiltrarValor="Obtener_Grupos"
                                        Default_Placeholder="Seleccione un grupo transportista">
                            <RenderValue>
                                <div>Grupos Transportistas</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context.cod" checked="@(GruposTransportes_Seleccionados.Contains(context))" @onchange="args => { CheckGrupo(context, args?.Value); }" />
                                    <label class="form-check-label" for="@context.cod">
                                        @if (context is not null)
                                        {
                                            @context.den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-4">
                        <label></label>
                        <button class="col-12 mt-auto btn gcom-bg-amarillo" type="submit" @onclick="@PostRelacion">
                            <i class="fa fa-solid fa-plus"></i> Relacionar Terminal-Cliente
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
@code {
    //Instancias
    GrupoTransportista grupoTransportista { get; set; } = new GrupoTransportista();
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();

    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<GrupoTransportista> GruposTransportes_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<GrupoTransportista> GrupoTransportistas { get; set; } = new List<GrupoTransportista>();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await ObtenerGruposTransportes();
        await Obtener_Grupos(string.Empty);
    }

    private async Task SaveGrupo()
    {
        try
        {
            var responseHttp = await repositorio.Post<GrupoTransportista>("api/transportista/save", grupoTransportista);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Grupo {grupoTransportista.den} creado con éxito", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task Obtener_Grupos(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["den"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<GrupoTransportista>>($"api/transportista/filtraractivos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                GrupoTransportistas = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerGruposTransportes()
    {
        try
        {
            var response = await repositorio.Get<List<GrupoTransportista>>("api/transportista/gruposactivos");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                GrupoTransportistas = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task PostRelacion()
    {
        try
        {
            if (Tads_Seleccionados.Count != 0 && GruposTransportes_Seleccionados.Count != 0)
            {
                clienteTadDTO.Tads = Tads_Seleccionados;
                clienteTadDTO.GrupoTransportistas = GruposTransportes_Seleccionados;
                var response = await repositorio.Post<ClienteTadDTO>($"api/transportista/relacion", clienteTadDTO);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Cliente relacionado exitosamente", SweetAlertIcon.Success);
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Debe de seleccionar una terminal y un Grupo Transportista", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckGrupo(GrupoTransportista grupoTransportista, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!GruposTransportes_Seleccionados.Contains(grupoTransportista))
                    GruposTransportes_Seleccionados.Add(grupoTransportista);
            }
            else
            {
                if (GruposTransportes_Seleccionados.Contains(grupoTransportista))
                    GruposTransportes_Seleccionados.Remove(grupoTransportista);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

}

