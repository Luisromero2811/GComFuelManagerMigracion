@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionChoferesValidation gestionChofer

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador")]

<h4>Catalogo de Choferes</h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="GestionClientes">
    <div class="col-12 d-flex justify-content-center">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito" Context="Gestion">
                    <h5>Agregar Choferes</h5>
                    <!--Aquí se agregará las validaciones para gestionar a los clientes-->
                    <EditForm Model="@chofer" class="form col-12" OnValidSubmit="@CreateChofer" Context="Validations">
                        <FluentValidationValidator Validator="gestionChofer" />
                        <ValidationSummary />
                        <div class="col-12 row mb-3">
                            <div class="col-3">
                                <label>Transportista(Empresa):</label>
                                <RadzenDropDown @bind-Value="chofer.Transportista" TValue="Transportista" Data="Grupos" TextProperty="Den"
                                                AllowVirtualization="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                </RadzenDropDown>
                            </div>
                            <div class="col-3">
                                <label>Nombre del Chofer:</label>
                                <InputText @bind-Value="chofer.Den" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-3">
                                <label>Apellido del Chofer:</label>
                                <InputText @bind-Value="chofer.Shortden" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-3 d-flex mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i> Registrar Chofer
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </AuthorizeView>
                <hr />
                <!--Aquí ligamos la terminal a los clientes-->
                <hr />
                <div class="col-12 mb-4 row">
                    <div class="col-3">
                        <label>Terminales:</label>
                        <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una terminal">
                            <RenderValue>
                                <div>Terminales</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context" checked="@(Tads_Seleccionados.Contains(context))" />
                                    <label class="form-check-label" for="@context">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Transportistas (Empresas)</label>
                        <DropDownFilter Listado="EmpresaTransporte" TListado="Transportista" TValue="int?" Default_Placeholder="Seleccione un Grupo" FiltrarValor="ObtenerEmpresa"
                                        Propiedad_Valor="Cod" On_Change_Method="@GetCliente" @bind-Valor="chofer.Codtransport">
                            <RenderValue>
                                @context.Den
                            </RenderValue>
                            <Render>
                                @context.Den
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Choferes:</label>
                        <DropDownFilter Listado="Choferes" TListado="Chofer" TValue="int" Seleccion_Multiple="true"
                                        Default_Placeholder="Seleccione un Transportista">
                            <RenderValue>
                                <div>Empresa de Transportes</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context" checked="@(Chofer_Seleccionados.Contains(context))" />
                                    <label class="form-check-label" for="@context">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        <button class="col-12 mx-auto btn gcom-bg-amarillo" type="submit" @onclick="@PostRelacion">
                            <i class="fa fa-solid fa-plus"></i> Relacionar Terminal-Cliente
                        </button>
                    </div>
                </div>
                <!--Aquí empieza la tabla de muestreo de datos-->
                <hr />
            </div>
        </div>
    </div>
</AuthorizeView>

@code {
    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Chofer> Chofer_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<Chofer> Choferes { get; set; } = new List<Chofer>();
    List<Transportista> Grupos { get; set; } = new List<Transportista>();
    List<Transportista> EmpresaTransporte { get; set; } = new();
    //Instancias
    public Chofer chofer { get; set; } = new Chofer();
    public Tad Tad { get; set; } = new Tad();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await GetGrupos();
        await ObtenerEmpresa(string.Empty);
    }

    private async Task CreateChofer()
    {
        try
        {
            chofer.Codtransport = chofer.Transportista!.Cod;
            //transportista.Codgru = transportista.GrupoTransportista!.cod!;
            var response = await repositorio.Post<Chofer>($"api/chofer/crearChofer", chofer);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Transportista {chofer.Den} asignado al grupo seleccionado", SweetAlertIcon.Success);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task ObtenerEmpresa(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Den"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<Transportista>>($"api/transportista/filtrarempresaactiva?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                EmpresaTransporte = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<Transportista>>("api/transportista/lista");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task GetCliente()
    {
        try
        {
            var response = await repositorio.Get<List<Chofer>>($"api/chofer/lista/{chofer.Codtransport}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Choferes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task PostRelacion()
    {
        try
        {

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}

