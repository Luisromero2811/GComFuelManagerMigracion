@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionDestinoValidation gestionDestino
@inject ClienteDestinoValidation validation

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador")]

<h4>Catalogo de Destinos</h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="GestionDestinos">
    <div class="col-12 d-flex justify-content-center">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito" Context="Gestion">
                    <h5>Agregar Destinos</h5>
                    <!--Aquí se agregará las validaciones para gestionar a los clientes-->
                    <EditForm Model="@Destino" class="form col-12" OnValidSubmit="@CreateDestinos" Context="Validations">
                        <FluentValidationValidator Validator="gestionDestino" />
                        <ValidationSummary />
                        <div class="col-12 row mb-3">
                            <div class="col-4">
                                <label>Nombre del destino:</label>
                                <InputText @bind-Value="Destino.Den" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-3 d-flex mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </AuthorizeView>
                <hr />
                <EditForm Model="@ClienteDestinoDTO" class="form col-12" OnValidSubmit="@AsignarDestinosClientes" Context="validacion">
                    <FluentValidationValidator Validator="validation" />
                    <ValidationSummary />
                    <div class="col-12 mb-4 row">
                        <div class="col-4">
                            <label>Cliente:</label>
                            <RadzenDropDown @bind-Value="ClienteDestinoDTO.cliente" Data="Clientes" TValue="Cliente" TextProperty="Den"
                                            AllowVirtualization="true" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                <Template>
                                    @((context as Cliente)?.Den)
                                </Template>
                                <ValueTemplate>
                                    @((context as Cliente)?.Den)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                        <div class="col-4">
                            <label>Destino:</label>
                            <RadzenDropDown @bind-Value="ClienteDestinoDTO.destino" Data="DestinoClientes" TValue="CodDenDTO" TextProperty="Den"
                                            AllowVirtualization="true" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                            </RadzenDropDown>
                        </div>
                        <div class="col-3 d-flex mt-auto">
                            <button class="col-12 mx-auto btn gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Agregar Destino
                            </button>
                        </div>
                    </div>
                </EditForm>
                <hr />
                <div class="col-12 mb-4 row">
                    <div class="col-3">
                        <label>Terminales:</label>
                        <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una terminal">
                            <RenderValue>
                                <div>Terminales</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context" checked="@(Tads_Seleccionados.Contains(context))" />
                                    <label class="form-check-label" for="@context">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Clientes:</label>
                        <DropDownFilter Listado="Clientes" TListado="Cliente" TValue="int?" Propiedad_Valor="Cod" On_Change_Method="@ChangeDestinos" @bind-Valor="Destino.Codcte"
                                        Default_Placeholder="Seleccione un cliente" FiltrarValor="Obtener_Clientes">
                            <RenderValue>
                                @context.Den
                            </RenderValue>
                            <Render>
                                @context.Den
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3">
                        <label>Destino</label>
                        <DropDownFilter Listado="Destinos" TListado="Destino" TValue="int" Seleccion_Multiple="true" Puede_Filtrar="true" Default_Placeholder="Seleccione una terminal">
                            <RenderValue>
                                <div>Destinos</div>
                            </RenderValue>
                            <Render>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="@context" checked="@(Destinos_Seleccionados.Contains(context))" />
                                    <label class="form-check-label" for="@context">
                                        @if (context is not null)
                                        {
                                            @context.Den
                                        }
                                        else
                                        {
                                            <p>Todos</p>
                                        }
                                    </label>
                                </div>
                            </Render>
                        </DropDownFilter>
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        <button class="col-12 mx-auto btn gcom-bg-amarillo" type="submit" @onclick="@PostRelacion">
                            <i class="fa fa-solid fa-plus"></i> Relacionar Terminal-Cliente
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>


@code {
    //Listados
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Destino> Destinos_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    private List<Cliente> Clientes { get; set; } = new List<Cliente>();
    private List<Destino> Destinos { get; set; } = new List<Destino>();
    List<ClienteTadDTO> clientesTads { get; set; } = new List<ClienteTadDTO>();

    public IEnumerable<CodDenDTO> DestinoClientes { get; set; } = new List<CodDenDTO>();

    //Instancias
    public Destino Destino { get; set; } = new Destino();
    ClienteDestinoDTO ClienteDestinoDTO { get; set; } = new ClienteDestinoDTO();

    //Variables

    protected override async Task OnInitializedAsync()
    {
        await GetClientes();
        await GetDestinos();
        await Obtener_Terminales_Validas();
        await Obtener_Clientes(string.Empty);
    }

    private async Task CreateDestinos()
    {
        try
        {
            var response = await repositorio.Post<Destino>($"api/estacion/crear", Destino);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Destino {Destino.Den} creado exitosamente", SweetAlertIcon.Success);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Clientes(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Den"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<Cliente>>($"api/clientes/filtraractivos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetClientes()
    {
        try
        {
            var response = await repositorio.Get<List<Cliente>>($"api/clientes/allactives");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetDestinos()
    {
        try
        {
            var response = await repositorio.Get<IList<CodDenDTO>>("api/estacion");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                DestinoClientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeDestinos()
    {
        try
        {
            var response = await repositorio.Get<List<Destino>>($"api/estacion/{Destino.Codcte}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destinos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task AsignarDestinosClientes()
    {
        try
        {
            var response = await repositorio.Post<CodDenDTO>($"api/clientes/asignar/{ClienteDestinoDTO.cliente.Cod}", ClienteDestinoDTO.destino);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Destino Asignado a {ClienteDestinoDTO.cliente.Den}", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task PostRelacion()
    {
        try
        {
            if (Terminales != null && Destinos != null)
            {
                var response = await repositorio.Post<List<ClienteTadDTO>>($"api/cliente/relacion", clientesTads);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Cliente relacionado exitosamente", SweetAlertIcon.Success);
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Seleccione una terminal-destino", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}
