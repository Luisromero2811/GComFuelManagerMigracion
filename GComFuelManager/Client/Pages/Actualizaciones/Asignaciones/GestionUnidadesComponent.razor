@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService Ns
@inject GestionUnidadValidation gestionUnidad

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador")]

<h4>Catalogo de Unidades</h4>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Contador" Context="GestionClientes">
    <div class="col-12 d-flex justify-content-center">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <AuthorizeView Roles="Admin, Administrador Sistema, Analista Credito" Context="Gestion">
                    <h5>Agregar Unidades</h5>
                    <!--Aquí se agregará las validaciones para gestionar a los clientes-->
                    <EditForm Model="@Unidad" class="form col-12" OnValidSubmit="@CreateUnidad" Context="Validations">
                        <FluentValidationValidator Validator="gestionUnidad" />
                        <ValidationSummary />
                        <div class="col-12 row mb-3">
                            <div class="col-2">
                                <label>Transportista(Empresa):</label>
                                <RadzenDropDown @bind-Value="Unidad.Transportista" TValue="Transportista" Data="Grupos" TextProperty="Den"
                                                AllowVirtualization="true" AllowFiltering="true"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                                </RadzenDropDown>
                            </div>
                            <div class="col-2">
                                <label>Placa:</label>
                                <InputText @bind-Value="Unidad.Placa" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Nº Compartimento:</label>
                                <InputNumber @bind-Value="Unidad.Nrocom" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Capacidad:</label>
                                <InputNumber @bind-Value="Unidad.Capcom" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Nº Compartimento 2:</label>
                                <InputNumber @bind-Value="Unidad.Nrocom2" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Capacidad 2:</label>
                                <InputNumber @bind-Value="Unidad.Capcom2" class="form-control" MaxLenght="80" />
                            </div>
                        </div>
                        <hr />
                        @*Segunda Parte*@
                        <div class="col-12 row mb-3">
                            <div class="col-2">
                                <label>Nº Compartimento 3:</label>
                                <InputNumber @bind-Value="Unidad.Nrocom3" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Capacidad 3</label>
                                <InputNumber @bind-Value="Unidad.Capcom3" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Nº Compartimento 4:</label>
                                <InputNumber @bind-Value="Unidad.Nrocom4" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Compartimento 4:</label>
                                <InputNumber @bind-Value="Unidad.Capcom4" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Tracto:</label>
                                <InputText @bind-Value="Unidad.Tracto" class="form-control" MaxLenght="80" />
                            </div>
                            <div class="col-2">
                                <label>Placa-Tracto:</label>
                                <InputText @bind-Value="Unidad.Placatracto" class="form-control" MaxLenght="80" />
                            </div>
                        </div>
                        <div class="col-12 row mb-3 justify-content-center">
                            <div class="col-4 d-flex mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="submit">
                                    <i class="fa fa-solid fa-plus"></i> Registrar Unidad
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </AuthorizeView>
            </div>
        </div>
    </div>
</AuthorizeView>

<div class="card mt-2" style="height:500px;">
    <div class="card-header">
        <b>Gestión de Vehículos - Unidades de negocio</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-3">
                <label>Empresa Transportista</label>
                <RadzenDropDown Data="Grupos" class="col-12 form-control-sm" TextProperty="Den" ValueProperty="Cod" @bind-Value="Unidad.CodTra"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowVirtualization="true" Change="@GetCliente" Style="height:20px">
                    <Template Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </Template>
                    <ValueTemplate Context="data">
                        <RadzenText TextStyle="TextStyle.Body2">
                            @((data as Transportista)?.Busentid) | @((data as Transportista)?.Den)
                        </RadzenText>
                    </ValueTemplate>
                </RadzenDropDown>
            </div>
            <div class="col-3">
                <label>Unidad de Negocio</label>
                <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una unidad de negocio">
                    <RenderValue>
                        <div>@context.Den</div>
                    </RenderValue>
                    <Render>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Tads_Seleccionados.Contains(context))" @onchange="args => { CheckTads(context, args?.Value); }" />
                            <label class="form-check-label" for="@context.Cod">
                                @if (context is not null)
                                {
                                    @context.Den
                                }
                                else
                                {
                                    <p>@context.Den</p>
                                }
                            </label>
                        </div>
                    </Render>
                </DropDownFilter>
            </div>
            <div class="col-3">
                <label></label>
                <button class="col-12 mx-auto btn gcom-bg-amarillo" type="submit" @onclick="@PostRelacion">
                    <i class="fa fa-solid fa-plus"></i> Relacionar Tonel-Unidad de Negocio
                </button>
            </div>
            <div class="col-12">
                <table class="table table-sm table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" checked="@(Toneles.Any(i => Unidad_Seleccionados != null && Unidad_Seleccionados.Contains(i)))"
                                       @onchange="args => CheckItemAll(args?.Value)" />
                            </th>
                            <th>Vehiculos</th>
                            <th>Unidades de Negocio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Toneles.Count > 0)
                        {
                            <Virtualize Items="Toneles" TItem="Tonel" Context="item">
                                <tr>
                                    <th>
                                        <input class="form-check-input" type="checkbox" value="" id="@item.Cod" checked="@(Unidad_Seleccionados.Contains(item))" @onchange="args => { CheckUnidad(item, args?.Value); }" />
                                    </th>
                                    <td>@item.Den</td>
                                    <td>
                                        @if (item.Terminales is not null)
                                        {
                                            @foreach (var items in item.Terminales)
                                            {
                                                <span class="badge rounded-pill gcom-bg-rojo me-2">
                                                    @items.Den

                                                    <button class="button-circle gcom-bg-amarillo" @onclick="@(()=>Borrar_Relacion(item, items))">
                                                        <i class="fa fa-solid fa-xmark"></i>
                                                    </button>

                                                </span>
                                            }
                                        }
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .button-circle { /* Green */
        border: none;
        color: white;
        padding: .40rem .60rem;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: .75rem;
        cursor: pointer;
        border-radius: 2rem;
    }
</style>

@code {
    //Listas
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Tonel> Unidad_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    List<Tonel> Toneles { get; set; } = new List<Tonel>();
    List<Transportista> Grupos { get; set; } = new List<Transportista>();

    //Instancias
    public Tonel Unidad { get; set; } = new Tonel();
    public Tad Tad { get; set; } = new Tad();
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();
    Unidad_Tad tonel_tad { get; set; } = new Unidad_Tad();
    AsignacionDTO asignacion { get; set; } = new AsignacionDTO();

    Dictionary<string, string> query = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await GetGrupos();
        //await ObtenerChoferes(string.Empty);
    }

    private async Task CreateUnidad()
    {
        try
        {
            Unidad.Carid = Unidad.Transportista!.CarrId;
            //Unidad.Carid = Unidad.Transportista!.CarrId;
            var response = await repositorio.Post<Tonel>($"api/vehiculo/crearUnidad", Unidad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Unidad {Unidad.Placa} asignado a transportista seleccionado", SweetAlertIcon.Success);
                //await ObtenerChoferes(string.Empty);
                await GetGrupos();
                await GetCliente();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activas");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<Transportista>>("api/transportista/lista");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    //private async Task ObtenerChoferes(string value)
    //{
    //    try
    //    {
    //        Dictionary<string, string> query = new();
    //        query["Placa"] = value;

    //        var uri = Constructor_De_URL_Parametros.Generar_URL(query);

    //        var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/filtraractivos?{uri}");
    //        if (response.Error)
    //        {
    //            var message = await response.ObtenerMensajeError();
    //            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
    //        }
    //        else
    //        {
    //            Toneles = response.Response;
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }
    //}

    private async Task GetCliente()
    {
        try
        {
            string? carrid = Grupos.FirstOrDefault(x => x.Cod == Unidad.CodTra)?.CarrId;
            var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/gestion/{carrid}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Toneles = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }


    private async Task PostRelacion()
    {
        try
        {
            if (Tads_Seleccionados.Count != 0 && Unidad_Seleccionados.Count != 0)
            {
                clienteTadDTO.Tads = Tads_Seleccionados;
                clienteTadDTO.Toneles = Unidad_Seleccionados;
                var response = await repositorio.Post<ClienteTadDTO>($"api/vehiculo/relacion", clienteTadDTO);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Unidad relacionada exitosamente", SweetAlertIcon.Success);
                    Toneles = new();
                    Unidad_Seleccionados = new();
                    await GetCliente();
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Debe tener seleccionado una terminal y una Unidad", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Borrar_Relacion(Tonel tonel, Tad tads)
    {
        try
        {
            tonel_tad.Id_Terminal = tads.Cod;
            tonel_tad.Id_Unidad = tonel.Cod;
            var response = await repositorio.Post<Unidad_Tad>($"api/vehiculo/borrar/relacion", tonel_tad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", "Relacion borrada con éxito", SweetAlertIcon.Success);
                await GetCliente();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckUnidad(Tonel tonel, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Unidad_Seleccionados.Contains(tonel))
                    Unidad_Seleccionados.Add(tonel);
            }
            else
            {
                if (Unidad_Seleccionados.Contains(tonel))
                    Unidad_Seleccionados.Remove(tonel);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CheckItemAll(object check)
    {
        try
        {
            if ((bool)check)
                Unidad_Seleccionados = Toneles;
            else
                Unidad_Seleccionados = new();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

}

