@page "/asignar-cliente-destino"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Asignar Cliente - Grupo">
            <AsignarClienteComponent Grupo="Grupo" AsignarClientesGroup="AsignarClientesGroup" ClienteSeleccionado="ClienteDSeleccionado" TpVenta="TpVenta"
                                     ClientesGrupo="ClientesGrupo" CreateGrupos="CreateGrupos" GetClientes="GetClientes" Grupos="Grupos" GrupoSeleccionado="GrupoSeleccionado"
                                     Clientes="Clientes" grid="grid" loading="loading"></AsignarClienteComponent>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Asignar Cliente - Grupo">
            <AsignacionDestinoComponent AsignarDestinosClientes="AsignarDestinosClientes" ClienteDSeleccionado="ClienteDSeleccionado" ClientesGrupo="ClientesGrupo"
                                        DestinoClientes="DestinoClientes" Destinos="Destinos" DestinoSeleccionado="DestinoSeleccionado" GetDestinosCliente="GetDestinosCliente"
                                        gridDestino="gridDestino" loading="loading"></AsignacionDestinoComponent>
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

<style type="text/css" media="screen and (min-width:1200px)">
    .ancho {
        width: 1100px;
    }
</style>

<style type="text/css" media="screen and (min-width:1400px)">
    .ancho {
        width: 1300px;
    }
</style>
<style type="text/css" media="screen and (min-width:1100px)">
    .ancho {
        width: 1000px;
    }
</style>

@code {
    Grupo GrupoSeleccionado { get; set; } = null!;
    IList<Grupo> Grupos { get; set; } = new List<Grupo>();
    Grupo Grupo { get; set; } = new Grupo();

    bool loading = false;

    RadzenDataGrid<Cliente>? grid { get; set; } = new RadzenDataGrid<Cliente>();
    RadzenDataGrid<CodDenDTO>? gridDestino { get; set; } = new RadzenDataGrid<CodDenDTO>();

    private List<string> TpVenta { get; set; } = new List<string> { "Interno", "Externo", "Rack" };

    Cliente ClienteSeleccionado { get; set; } = new Cliente();
    Cliente ClienteDSeleccionado { get; set; } = new Cliente();
    IEnumerable<Cliente> ClientesGrupo = new List<Cliente>();
    IEnumerable<Cliente> Clientes = new List<Cliente>();

    CodDenDTO DestinoSeleccionado { get; set; } = new CodDenDTO();
    IEnumerable<CodDenDTO> DestinoClientes = new List<CodDenDTO>();
    IEnumerable<CodDenDTO> Destinos = new List<CodDenDTO>();

    protected async override Task OnInitializedAsync()
    {
        await GetGrupos();
        await GetClientesGroup();
        await GetDestinos();
    }

    private async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IList<Grupo>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetDestinos()
    {
        try
        {
            var response = await http.Get<IList<CodDenDTO>>("api/estacion");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                DestinoClientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetDestinosCliente()
    {
        try
        {
            var response = await http.Get<IList<CodDenDTO>>($"api/estacion/{ClienteDSeleccionado.Cod}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Destinos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CreateGrupos()
    {
        try
        {
            var response = await http.Post<Grupo>("api/grupo", Grupo);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await GetGrupos();
                await Swal.FireAsync("Error", $"Grpo {Grupo.Den} creado exitosamente", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetClientes()
    {
        try
        {
            if (GrupoSeleccionado == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un grupo.", SweetAlertIcon.Warning);

            }
            else
            {
                var response = await http.Get<IEnumerable<Cliente>>($"api/clientes/grupo/{GrupoSeleccionado.Cod}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    Clientes = response.Response;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetClientesGroup()
    {
        try
        {
            var response = await http.Get<IEnumerable<Cliente>>($"api/clientes/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ClientesGrupo = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task AsignarClientesGroup()
    {
        try
        {
            if (GrupoSeleccionado == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un grupo.", SweetAlertIcon.Warning);

            }
            else
            {
                ClienteSeleccionado.codgru = GrupoSeleccionado.Cod;
                var response = await http.Post<Cliente>($"api/grupo/cliente", ClienteSeleccionado);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Cliente Asignado a {GrupoSeleccionado.Den}", SweetAlertIcon.Success);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task AsignarDestinosClientes()
    {
        try
        {
            if (ClienteDSeleccionado == null)
            {
                await Swal.FireAsync("Alerta", "Seleccione un cliente.", SweetAlertIcon.Warning);

            }
            else
            {
                var response = await http.Post<CodDenDTO>($"api/clientes/asignar/{ClienteDSeleccionado.Cod}", DestinoSeleccionado);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await Swal.FireAsync("Exito", $"Destino Asignado a {ClienteDSeleccionado.Den}", SweetAlertIcon.Success);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
