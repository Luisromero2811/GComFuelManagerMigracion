@page "/configuracion/originador"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject NotificationService ms

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial")]

<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial" Context="Form">
    <div class="card">
        <div class="card-header">
            <b>Configurar originador</b>
        </div>
        <div class="card-body">
            <div class="col-12">
                <EditForm Model="Originador" OnValidSubmit="Crear_Originador" class="form row">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="col-4">
                        <InputText @bind-Value="@Originador.Nombre" class="form-control form-control-sm" />
                        <ValidationMessage For="@(()=> Originador.Nombre)" />
                    </div>
                    <div class="col-4">
                        <button class="btn btn-sm col-12 gcom-bg-amarillo" type="submit">
                            <b>Guardar originador</b>
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</AuthorizeView>
<div class="col-12">
    <table class="table table-sm table-striped table-bordered">
        <thead>
            <tr>
                <th>Nombre</th>
                <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial">
                    <th>Activo</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @if (Loading_Buscar)
            {
                <SpinnerLoading />
            }
            else
            {
                <Virtualize Items="@Originadores" TItem="Originador" Context="item">
                    <tr>
                        <td>@item.Nombre</td>
                        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial" Context="Active">
                            <td>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" checked="@item.Activo" value="@item.Activo" @onchange="@(()=>Desactivar_Activar_Originador(item))" />
                                </div>
                            </td>
                        </AuthorizeView>
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>
@code {
    Originador Originador { get; set; } = new();
    List<Originador> Originadores { get; set; } = new();

    bool Loading_Guardar = false;
    bool Loading_Buscar = false;

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Originadores();
    }

    private async Task Obtener_Originadores()
    {
        Loading_Buscar = true;
        var response = await http.Get<List<Originador>>($"api/originador");
        if (response.Error)
        {
            var message = await response.ObtenerMensajeError();
            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            Loading_Buscar = false;
        }
        else
        {
            Originadores = response.Response;
            Loading_Buscar = false;
        }
    }

    private async Task Crear_Originador()
    {
        try
        {
            Loading_Guardar = true;

            var response = await http.Post<Originador>($"api/originador", Originador);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                Loading_Guardar = false;
            }
            else
            {
                await Obtener_Originadores();
                Loading_Guardar = false;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Guardar = false;
        }
    }

    private async Task Desactivar_Activar_Originador(Originador originador)
    {
        originador.Activo = !originador.Activo;

        var response = await http.Post<Originador>($"api/originador", originador);
        if (response.Error)
        {
            var message = await response.ObtenerMensajeError();
            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            await Obtener_Originadores();
        }
    }
}
