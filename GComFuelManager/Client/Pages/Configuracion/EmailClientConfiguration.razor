@page "/configuracion-emailcliente"

@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ns
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Administrador de Usuarios")]

<h4><b>Configuración de Correo Clientes</b></h4>
<div class="col-12 d-flex justify-content-center">
    <AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia" Context="General">
        <div class="col-10 card shadow-sm">
            <div class="col-12 row card-body">
                <div class="col-12 mb-4 row">
                    <div class="col-10">
                        <label>Cliente:</label>
                        <RadzenDropDown @bind-Value="ClienteSeleccionado" Data="Clientes" TValue="Cliente" TextProperty="Den"
                                        AllowVirtualization="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">

                        </RadzenDropDown>
                    </div>
                    <div class="col-2 d-flex mt-auto">
                        <button class="col-12 mx-auto btn gcom-bg-amarillo" @onclick="@GetContactos">
                            <i class="fa fa-solid fa-magnifying-glass"></i> Buscar
                        </button>
                    </div>
                </div>
                <AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="AddCC">
                    <div class="col-12 mb-3 row">
                        <div class="col-5">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" @bind-Value="Contacto.Nombre"></InputText>
                        </div>
                        <div class="col-5">
                            <label class="form-label">Correo</label>
                            <InputText class="form-control" @bind-Value="Contacto.Correo"></InputText>
                        </div>
                        <div class="col-2 d-flex mt-auto">
                            @if (!isEdit)
                            {
                                    @*<button class="col-12 btn gcom-bg-amarillo" @onclick="@PostCorreoCliente">
                                        <i class="fa fa-solid fa-plus"></i>
                                    </button>*@
                            }
                            else
                            {
                                @*<button class="col-12 btn gcom-bg-amarillo" @onclick="@PutCorreoCliente">
                                    <i class="fa fa-solid fa-check"></i>
                                </button>
                                <button class="col-12 btn gcom-bg-amarillo" @onclick="@CancelEdit">
                                    <i class="fa fa-solid fa-xmark"></i>
                                </button>*@
                            }
                        </div>
                    </div>
                </AuthorizeView>
            </div>
        </div>
    </AuthorizeView>
</div>
<AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="grids">
    <div class="col-12 d-flex justify-content-center">
         <RadzenDataGrid TItem="Contacto" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                         GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:500px;" ColumnResized="@(() =>grid!.Reset())" Culture="CultureInfo.CurrentCulture"
                         IsLoading="loading" @ref="grid" AllowSorting="true" AllowColumnPicking="true" AllowFiltering="true" FilterMode="FilterMode.Simple">
             <Columns>
                 <RadzenDataGridColumn TItem="Contacto" Title="Nombre de Contacto de Cliente" Property="Nombre" OrderIndex="1" Filterable="true"/>
                 <RadzenDataGridColumn TItem="Contacto" Title="Correo" Property="Correo" OrderIndex="2" Filterable="true"/>
                 <AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios">
                     <RadzenDataGridColumn TItem="Contacto" Title="Acciones" Width="200px" OrderIndex="3" Filterable="false">
                         <Template Context="data">
                             <div>
                                 @*<button class="btn btn-primary col-12" @onclick=""><i class="fa fa-solid fa-pen-to-square"></i></button>*@
                             </div>
                         </Template>
                     </RadzenDataGridColumn>
                     <RadzenDataGridColumn TItem="Contacto" Title="Habilitar / Deshabilitar" Width="200px" OrderIndex="4" Filterable="false">
                         <Template Context="data">
                             <div class="col-12">
                                @*<div class="form-check form-switch m-2">
                                    <input class="form-check-input" type="checkbox" role="switch" id="@data.Cod" checked="@data.Estado"
                                           @onchange="@((ChangeEventArgs e) => HabilitarDeshabilitar(data, e))">
                                </div>*@
                             </div>
                         </Template>
                     </RadzenDataGridColumn>
                 </AuthorizeView>
             </Columns>
         </RadzenDataGrid>
    </div>
</AuthorizeView>

@code {
    RadzenDataGrid<Contacto>? grid { get; set; } = new RadzenDataGrid<Contacto>();

    Cliente ClienteSeleccionado { get; set; } = new Cliente();
    IEnumerable<Cliente> Clientes = new List<Cliente>();

    Contacto Contacto { get; set; } = new Contacto();
    IEnumerable<Contacto> Contactos = new List<Contacto>();

    bool loading = false;
    bool isEdit = false;

    protected async override Task OnInitializedAsync()
    {
        await GetClientes();
    }

    private async Task GetClientes()
    {
        try
        {
            var response = await repositorio.Get<IEnumerable<Cliente>>("api/clientes");

            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetContactos()
    {

    }

}

