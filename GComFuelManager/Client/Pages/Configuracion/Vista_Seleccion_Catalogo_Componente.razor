@inject IRepositorio http
@inject SweetAlertService Swal
@inject NotificationService ns
@attribute [Authorize]

<div class="card">
    <div class="card-header">
        <b>Catalogo</b>
    </div>
    <div class="card-body">
        <Tabla Datos="Acciones">
            <Cabeceras>
                <tr>
                    <th></th>
                    <th>Catalogo</th>
                </tr>
            </Cabeceras>
            <Columnas Context="catalogo">
                <tr>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@catalogo.Catalogo"
                                   checked="@(Acciones_Seleccionadas.Any(x=>x.Catalogo.Equals(catalogo.Catalogo)))" @onchange="@((args)=>Seleccionar_Catalogo(args, catalogo))">
                        </div>
                    </td>
                    <td>@catalogo.Catalogo</td>
                </tr>
            </Columnas>
        </Tabla>
        <div class="col-12">
            <div class="col-4">
                @if (copiando_catalogos)
                {
                    <button class="btn btn-sm gcom-bg-amarillo col-12" disabled>
                        <i class="fa fa-solid fa-check"></i> Copiar catalogo
                        <SpinnerLoading />
                    </button>
                }
                else
                {
                    <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@Copiar_Catalogo">
                        <i class="fa fa-solid fa-check"></i> Copiar catalogo
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    List<AccionesCatalogo> Acciones = new();
    List<AccionesCatalogo> Acciones_Seleccionadas = new();

    bool copiando_catalogos = false;

    protected override void OnInitialized()
    {
        Acciones = new()
        {
            new(){Catalogo = "Clientes",URL = "service/copiar/cliente"},
            new(){Catalogo = "Destinos",URL = "service/copiar/destino"},
            new(){Catalogo = "Transportistas",URL = "service/copiar/transportista"},
            new(){Catalogo = "Choferes",URL = "service/copiar/chofer"},
            new(){Catalogo = "Toneles",URL = "service/copiar/tonel"},
        };
    }

    private void Seleccionar_Catalogo(ChangeEventArgs e, AccionesCatalogo catalogo)
    {
        if (e.Value is null) { return; }

        if ((bool)e.Value)
            Acciones_Seleccionadas.Add(catalogo);
        else
            Acciones_Seleccionadas.Remove(catalogo);
    }

    private async Task Copiar_Catalogo()
    {
        try
        {
            if (Acciones_Seleccionadas.Count == 0) { return; }

            copiando_catalogos = true;

            var acciones_totales = Acciones_Seleccionadas.Count;
            var acciones_procesadas = 0;
            
            ns.Notify(new()
                {
                    Severity = NotificationSeverity.Info,
                    Detail = "Comenzo el proceso de copia de catalogo, mantenga esta ventana hasta terminar el proceso.",
                    Summary = "Copiando catalogo",
                    Duration = 10000
                });

            foreach (var accion in Acciones_Seleccionadas)
            {
                var responseOC = await http.Get<bool>(accion.URL);
                if (responseOC.Error)
                {
                    var responseHttp = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    ns.Notify(new()
                        {
                            Severity = NotificationSeverity.Error,
                            Detail = $"Ha ocurrido un error al copiar el catalogo {accion.Catalogo}, se continuara con el copiado de los demas catalogos seleccionados.",
                            Summary = "Erro de catalogo",
                            Duration = 15000
                        });
                }
                else
                {
                    if (responseOC.Response)
                        acciones_procesadas++;
                }
            }

            copiando_catalogos = false;
            await Swal.FireAsync("Catalogos copiados", $"Se han copiado {acciones_procesadas} de {acciones_totales} catalogo/s seleccionado/s", SweetAlertIcon.Success);
        }
        catch (Exception e)
        {
            copiando_catalogos = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private class AccionesCatalogo
    {
        public bool Es_Seleccionado { get; set; } = false;
        public string Catalogo { get; set; } = string.Empty;
        public string URL { get; set; } = string.Empty;
    }
}
