@inject IRepositorio http
@inject SweetAlertService swal

<div class="col-12 row m-3 g-1">
    @* <div class="col">
        <label>Consecutivo de orden</label>
        <input class="form-control form-control-sm" @bind="configuracion.Consecutivo" />
    </div> *@
    <div class="col">
        <label>Consecutivo de vale</label>
        <input class="form-control form-control-sm" @bind="configuracion.Consecutivo_Vale" />
    </div>
    <div class="col">
        <label>Tipo de vale</label>
        <select class="form-select form-select-sm" @bind="configuracion.Tipo_De_Vale">
            @foreach (var item in Catalogo_Tipo_Vale)
            {
                <option value="@item.Id">@item.Valor</option>
            }
        </select>
    </div>
    <div class="col-12 row mt-2">
        <div class="col-4">
            <button class="btn btn-sm gcom-bg-amarillo" @onclick="Guardar_Configuracion"><i class="fa fa-solid fa-floppy-disk"></i> Guardar</button>
        </div>
        <div class="col-4">
            <button class="btn btn-sm gcom-bg-rojo" @onclick="Close"><i class="fa fa-solid fa-xmark"></i> Cancelar</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public short Id_Terminal { get; set; } = 0;
    [Parameter] public EventCallback CloseModal { get; set; }

    Configuracion_Terminal_DTO configuracion = new();
    List<Catalogo_Fijo> Catalogo_Tipo_Vale = new();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Tipo_Vale();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await Obtener_Configuracion();
    // }

    protected override async Task OnParametersSetAsync()
    {
        await Obtener_Configuracion();
    }

    private async Task Obtener_Configuracion()
    {
        try
        {
            if (Id_Terminal != 0)
            {
                var response = await http.Get<Configuracion_Terminal_DTO>($"api/terminal/configuracion/{Id_Terminal}");
                if (response.Error)
                {
                    await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                }
                else
                {
                    configuracion = response.Response;
                }
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Tipo_Vale()
    {
        try
        {
            if (Id_Terminal != 0)
            {
                var response = await http.Get<List<Catalogo_Fijo>>($"api/terminal/catalogo/tipovale");
                if (response.Error)
                {
                    await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                }
                else
                {
                    Catalogo_Tipo_Vale = response.Response;
                }
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Guardar_Configuracion()
    {
        try
        {
            if (Id_Terminal != 0)
            {
                var response = await http.Post<Configuracion_Terminal_DTO>($"api/terminal/configuracion", configuracion);
                if (response.Error)
                {
                    await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                }
                else
                {
                    await swal.FireAsync("Exito", "Configuración guardada", SweetAlertIcon.Success);
                    await Close();
                }
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Close()
    {
        await CloseModal.InvokeAsync();
    }
}
