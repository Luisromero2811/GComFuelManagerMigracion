@page "/crm/usuarios"
@inject SweetAlertService Swal
@inject IRepositorio repositorio
@inject NotificationService ns
<!--Tabla de muestreo de datos de los usuarios CRM-->
<div class="card">
    <div class="card-header d-flex justify-content-between">
        <b>Usuarios</b>
        <NavLink class="g-1 btn gcom-bg-amarillo" href="../" Match="NavLinkMatch.All">
            <i class="fa fa-solid fa-arrow-left"></i>
            Volver
        </NavLink>
    </div>
</div>
<div class="col-12 my-2">
    <div class="col-md-2 col">
        <NavLink class="btn btn-sm g-1 col-12 gcom-bg-amarillo" href="crm/gestion/usuarios">
            <i class="fa fa-solid fa-plus"></i> Crear Nuevo Usuario
        </NavLink>
    </div>
</div>
<div class="container-fluid overflow-scroll">
    <Tabla Datos="CRMUsuariosList">
        <Cabeceras>
            <tr>
                <th>Nombre de Usuario</th>
                <th>Usuario</th>
                <th>Tipo:</th>
                <th>Habilitar / Deshabilitar</th>
                <th>Editar</th>
            </tr>
        </Cabeceras>
        <Filtros>
            <tr>
                <td>
                    <input type="text" class="form-control form-control-sm" @oninput="@((args)=>Filtrar_Nombre(args))" />
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </Filtros>
        <Columnas Context="item">
            <tr>
                <td>@item.NombreUsuario</td>
                <td>@item.UserName</td>
                <td>@item.TipoUsuario</td>
                <td>
                    <div class="form-check form-switch m-2">
                        <input class="form-check-input" type="checkbox" role="switch" id="@item?.Id_Asp" checked="@item?.Activo"
                               @onchange="@((ChangeEventArgs e) => ChangeStatus(item, e))" />
                    </div>
                </td>
                <td>
                    <div class="col-12">
                        <NavLink class="btn gcom-bg-amarillo" href=@($"crm/gestion/usuarios/{item?.Id_Asp}")>
                            <i class="fa fa-solid fa-edit" />
                        </NavLink>
                    </div>
                </td>
            </tr>
        </Columnas>
    </Tabla>
</div>
<div class="col-12">
    <PaginacionComponent PaginaActual="PaginaActual" PaginasTotales="PaginasTotales" PaginaSeleccionada="PaginasSeleccionadas" Radio="5" />
    <div class="col-12">
        <p>Total de registros: @filtro_usuario.Total_registros</p>
    </div>
</div>

@code {
    CRMUsuarioDTO filtro_usuario = new();
    List<CRMUsuarioDTO> CRMUsuariosList = new();
    int PaginasTotales;
    int PaginaActual = 1;
    int ConteoTotal;

    Dictionary<string, string> query = new();

    protected override async Task OnInitializedAsync()
    {
        filtro_usuario.Registros_por_pagina = 15;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (query is null) { query = new Dictionary<string, string>(); }
        query["NombreUsuario"] = filtro_usuario.NombreUsuario.ToString();
        query["pagina"] = filtro_usuario.pagina.ToString();
        query["tamanopagina"] = filtro_usuario.tamanopagina.ToString();

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", query.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await Obtener_Usuarios(uri);
    }

    private async Task Obtener_Usuarios(string uri)
    {
        try
        {
            var responseHttp = await repositorio.Get<List<CRMUsuarioDTO>>($"api/crmvendedor/getAllUser?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                PaginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                filtro_usuario.Total_registros = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActual = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                CRMUsuariosList = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task PaginasSeleccionadas(int pagina)
    {
        PaginaActual = pagina;
        filtro_usuario.pagina = PaginaActual;
        await LoadData();
    }

    private async Task Filtrar_Nombre(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            filtro_usuario.NombreUsuario = e.Value.ToString();
            await LoadData();
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task ChangeStatus(CRMUsuarioDTO usuarios, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/crmvendedor/changeStatus/{usuarios.Id_Asp}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Usuario habilitado", Detail = "El usuario ha sido habilitado." });
                }
                else
                {
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Usuario deshabilitado", Detail = "El usuario ha sido deshabilitado." });
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}

