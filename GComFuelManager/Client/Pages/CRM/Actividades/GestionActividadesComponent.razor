@page "/crm/gestion/actividades"
@page "/crm/gestion/actividades/{Id:int}"

@inject SweetAlertService Swal
@inject IRepositorio repositorio
<!--Formulario de registro-->
<div class="card mt-2" style="height: 580px; overflow: scroll; ">
    <div class="card-header">
        <div class="d-flex justify-content-between">
            <div>
                <b>Creación de Actividades</b>
            </div>
            <div>
                <NavLink class="g-1 btn gcom-bg-amarillo" href="crm/listado/actividades" Match="NavLinkMatch.All">
                    <i class="fa fa-solid fa-arrow-left" /> Volver
                </NavLink>
            </div>
        </div>

    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="@CRMActividad" class="form col-12" OnValidSubmit="CreateActividad">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="col-12 row g-1">
                    <!--Asunto-->
                    <div class="col-4 my-1">
                        <label>Asunto:</label>
                        <InputSelect @bind-Value="@CRMActividad.Asunto" class="form-select form-select-sm">
                            <option>-- Seleccione un Asunto --</option>
                            @foreach (var asunto in Cat_Asunto)
                            {
                                <option value="@asunto.Id">@asunto.Valor</option>
                            }
                        </InputSelect>
                    </div>
                    <!--Fecha de Inicio-->
                    <div class="col-4 my-1">
                        <label>Fecha de Inicio:</label>
                        <InputDate @bind-Value="@CRMActividad.Fch_Inicio" class="form-control form-control-sm col-12" Type="InputDateType.DateTimeLocal" />
                    </div>
                    <!--Fecha de Vencimiento-->
                    <div class="col-4 my-1">
                        <label>Fecha de Vencimiento:</label>
                        <InputDate @bind-Value="@CRMActividad.Fecha_Ven" class="form-control form-control-sm col-12" Type="InputDateType.DateTimeLocal" />
                    </div>
                    <!--Prioridad-->
                    <div class="col-4 my-1">
                        <label>Prioridad:</label>
                        <InputSelect @bind-Value="@CRMActividad.Prioridad" class="form-select form-select-sm">
                            <option>-- Seleccione un Asunto --</option>
                            @foreach (var asunto in Cat_Prioridad)
                            {
                                <option value="@asunto.Id">@asunto.Valor</option>
                            }
                        </InputSelect>
                    </div>
                    <!--Asignado A-->
                    <div class="col-4 my-1">
                        <label>Asignado a:</label>
                        <InputSelect @bind-Value="@CRMActividad.Asignado" class="form-select form-select-sm">
                            <option>-- Seleccione un Vendedor --</option>
                            @if (Vendedores == null)
                            {
                                <option>Cargando...</option>
                            }
                            else if (Vendedores.Count == 0)
                            {
                                <option>No hay vendedores.</option>
                            }
                            else
                            {
                                @foreach (var item in Vendedores)
                                {
                                    <option value="@item.Id">@item.Nombre @item.Apellidos</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <!--Descripción-->
                    <div class="col-4 my-1">
                        <label>Descripción:</label>
                        <InputTextArea @bind-Value="@CRMActividad.Desccripcion" class="form-control" style=" height: 220px;" placeholder="Descripción de la Actividad" />
                        <ValidationMessage For="@(()=>CRMActividad.Desccripcion)" />
                    </div>
                    <!--Estatus-->
                    <div class="col-4 my-1">
                        <label>Estatus:</label>
                        <InputSelect @bind-Value="@CRMActividad.Estatus" class="form-select form-select-sm">
                            <option>-- Seleccione un Estatus --</option>
                            @foreach (var asunto in Cat_Estatus)
                            {
                                <option value="@asunto.Id">@asunto.Valor</option>
                            }
                        </InputSelect>
                    </div>
                    <!--Relacionada con:-->
                    <div class="col-4 my-1">
                        <label>Relacionada Con:</label>
                        <InputSelect @bind-Value="@CRMActividad.Contacto_Rel" class="form-select form-select-sm">
                            <option>-- Seleccione un Contacto --</option>
                            @if (Contactos == null)
                            {
                                <option>Cargando...</option>
                            }
                            else if (Contactos.Count == 0)
                            {
                                <option>No hay Contactos.</option>
                            }
                            else
                            {
                                @foreach (var item in Contactos)
                                {
                                    <option value="@item.Id">@item.Nombre @item.Apellidos</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-4 my-1">
                        <label>Equipo</label>
                        <InputSelect @bind-Value="@CRMActividad.EquipoId" class="form-select form-select-sm">
                            <option>-- Seleccione un Equipo --</option>
                            @if (Equipos == null)
                            {
                                <option>Cargando...</option>
                            }
                            else if (Equipos.Count == 0)
                            {
                                <option>No hay Equipos.</option>
                            }
                            else
                            {
                                @foreach (var item in Equipos)
                                {
                                    <div class="my-auto" style="background-color:@item.Color;width:1rem;height:1rem;border-radius:1rem;margin-right:.2rem;"></div>
                                    <option value="@item.Id">@item.Nombre @item.Lider</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-6 my-1">
                        <label>Documento:</label>
                        <InputFile/>
                    </div>
                </div>
                <!--Boton de creación y edición-->
                <div class="col-12 d-flex mt-3 justify-content-center">
                    @if (!isEdit)
                    {
                        <div class="col-4 px-2">
                            <button class="btn btn-sm gcom-bg-amarillo col-12" type="submit">
                                <i class="fa fa-solid fa-floppy-disk"></i> Crear Actividad
                                @if (loading_guardar)
                                {
                                    <SpinnerLoading />
                                }
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="col-12 btn-group">
                            <button class="btn btn-sm gcom-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-floppy-disk"></i> Editar
                                @if (loading_guardar)
                                {
                                    <SpinnerLoading />
                                }
                            </button>
                            <button class="btn btn-sm gcom-bg-rojo" type="button" @onclick="Cancel_Activity">
                                <i class="fa fa-solid fa-cancel"></i> Cancelar
                            </button>
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    bool loading_guardar = false;
    bool isEdit = false;
    CRMActividades Actividad = new();
    CRMActividadPostDTO CRMActividad = new();

    List<Catalogo_Fijo> Cat_Asunto = new();
    List<Catalogo_Fijo> Cat_Prioridad = new();
    List<Catalogo_Fijo> Cat_Estatus = new();
    List<CRMVendedor> Vendedores { get; set; } = new List<CRMVendedor>();
    List<CRMContacto> Contactos { get; set; } = new List<CRMContacto>();
    List<CRMEquipoDTO> Equipos = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
                Obtener_Catalogo_Asunto(),
                Obtener_Catalogo_Prioridad(),
                Obtener_Catalogo_Estatus(),
                Obtener_Vendedores(),
                ObtenerEquipos(),
                Obtener_ContactosCRM());
        if (Id != 0)
        {
            await ObtenerActividad();
        }
        if (Vendedores != null && Vendedores.Count == 1)
        {
            // Si solo hay un vendedor, lo seleccionamos automáticamente
            CRMActividad.Asignado = Vendedores.FirstOrDefault().Id;
        }
        if (Equipos != null && Equipos.Count == 1)
        {
            CRMActividad.EquipoId = Equipos.FirstOrDefault().Id;
        }
        if (Equipos != null && Equipos.Count == 1)
        {
            CRMActividad.CuentaId = Equipos.FirstOrDefault().Id;
        }
    }

    public async Task CreateActividad()
    {
        try
        {
            var responseHttp = await repositorio.Post<CRMActividadPostDTO>($"api/actividades/create", CRMActividad);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Éxito", "La actividad fue registrada exitosamente", SweetAlertIcon.Success);
                CRMActividad = new();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Catalogo_Asunto()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<Catalogo_Fijo>>($"api/actividades/catalogo/asunto");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cat_Asunto = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Catalogo_Prioridad()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<Catalogo_Fijo>>($"api/actividades/catalogo/prioridad");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cat_Prioridad = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Catalogo_Estatus()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<Catalogo_Fijo>>($"api/actividades/catalogo/estatus");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cat_Estatus = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Vendedores()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<CRMVendedor>>($"api/vendedor/crmlist");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Vendedores = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_ContactosCRM()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<CRMContacto>>($"api/actividades/contactlist");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Contactos = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Cancel_Activity()
    {
        Actividad = new();
        isEdit = false;
    }

    private async Task ObtenerActividad()
    {
        try
        {
            var response = await repositorio.Get<CRMActividadPostDTO>($"api/actividades/{Id}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                CRMActividad = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerEquipos(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Nombre"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<CRMEquipoDTO>>($"api/crmequipo?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Equipos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

