@page "/crm/originadores"
@inject IRepositorio http
@inject SweetAlertService swal
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <b>Originadores</b>
                <NavLink class="g-1 btn gcom-bg-amarillo" Match="NavLinkMatch.All" href="../">
                    <i class="fa fa-solid fa-arrow-left" />
                    Volver
                </NavLink>
            </div>
        </div>
        <div class="col-12 my-2">
            <div class="col-md-2 col">
                <NavLink Match="NavLinkMatch.All" href="crm/originadores/formulario" class="btn btn-sm gcom-bg-amarillo col-12 g-1">
                    <i class="fa fa-solid fa-plus" /> Agregar
                </NavLink>
            </div>
        </div>
        <div class="ancho-tabla">
            <Tabla Datos="Originadores">
                <Cabeceras>
                    <tr>
                        <th></th>
                        <th>Nombre de vendedor</th>
                        <th>Teléfono móvil</th>
                        <th>Correo electrónico</th>
                        <th>Division</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td><input class="form-control" @bind-value="@filtro.Nombre" @oninput="FiltrarNombre" /></td>
                        <td><input class="form-control" @bind-value="@filtro.Tel_Movil" @oninput="FiltrarTelefono" /></td>
                        <td><input class="form-control" @bind-value="@filtro.Correo" @oninput="FiltrarCorreo" /></td>
                        <td></td>
                    </tr>
                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>
                            <div class="btn-group">
                                <a class="btn gcom-bg-amarillo" href="/crm/originadores/formulario/@item.Id">
                                    <i class="fa fa-solid fa-edit" />
                                </a>
                                <a class="btn gcom-bg-amarillo" href="/crm/originador/@item.Id">
                                    <i class="fa fa-solid fa-eye" />
                                </a>
                                <button class="btn btn-danger" @onclick="@(()=>EliminarVendedor(item.Id))">
                                    <i class="fa fa-solid fa-trash" />
                                </button>
                            </div>
                        </td>
                        <td>@item.Nombre @item.Apellidos</td>
                        <td>@item.Tel_Movil </td>
                        <td>@item.Correo</td>
                        <td>@item.NombreDivision</td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
        <div class="col-12">
            <PaginacionComponent PaginaActual="filtro.Pagina_ACtual" PaginasTotales="filtro.Total_paginas" PaginaSeleccionada="Pagina_Seleccionada" Radio="5" />
            <div class="col-12">
                <p>Total de registros: @filtro.Total_registros</p>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>No tiene permitido ver este contenido. Contacte con un administrador para solicitar acceso.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<CRMOriginadorDTO> Originadores = new();
    CRMVendedorDTO filtro = new();
    Dictionary<string, string> query = new();

    bool loading_info = false;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerVendedor();
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[$"{nameof(filtro.Nombre)}"] = filtro.Nombre;
        query[$"{nameof(filtro.Tel_Movil)}"] = filtro.Tel_Movil;
        query[$"{nameof(filtro.Correo)}"] = filtro.Correo;
        query[$"{nameof(filtro.Pagina)}"] = filtro.Pagina.ToString();
        query[$"{nameof(filtro.Registros_por_pagina)}"] = filtro.Registros_por_pagina.ToString();
        return query;
    }

    private async Task ObtenerVendedor()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var response = await http.Get<List<CRMOriginadorDTO>>($"api/crmoriginador?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Originadores = response.Response;

                filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task FiltrarNombre(ChangeEventArgs args)
    {
        filtro.Nombre = args.Value?.ToString() ?? string.Empty;
        await ObtenerVendedor();
    }
    private async Task FiltrarCorreo(ChangeEventArgs args)
    {
        filtro.Correo = args.Value?.ToString() ?? string.Empty;
        await ObtenerVendedor();
    }
    private async Task FiltrarTelefono(ChangeEventArgs args)
    {
        filtro.Tel_Movil = args.Value?.ToString() ?? string.Empty;
        await ObtenerVendedor();
    }

    private async Task Pagina_Seleccionada(int pagina)
    {
        filtro.Pagina_ACtual = pagina;
        filtro.Pagina = pagina;

        await ObtenerVendedor();
    }

    private async Task EliminarVendedor(int id)
    {
        try
        {
            var response = await http.Delete($"api/crmoriginador/{id}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await ObtenerVendedor();
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }
}
