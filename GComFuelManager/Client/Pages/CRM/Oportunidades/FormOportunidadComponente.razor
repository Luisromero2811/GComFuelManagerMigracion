@page "/crm/oportunidades/formulario"
@page "/crm/oportunidades/formulario/{Id:int}"

@inject IRepositorio http
@inject SweetAlertService swal
@inject CRMOportunidadPostValidator validator
@inject NavigationManager navigation
@attribute [Authorize(Roles = "Admin, CREAR_OPORTUNIDAD, EDITAR_OPORTUNIDAD")]

<AuthorizeView Roles="Admin, CREAR_OPORTUNIDAD, EDITAR_OPORTUNIDAD">
    <Authorized>
        <Card LoadingContent="loading_info" HeaderClass="d-flex justify-content-between">
            <Header>
                <b>Formulario oportunidades</b>
                <NavLink class="g-1 btn gcom-bg-amarillo" href="crm/oportunidades" Match="NavLinkMatch.All">
                    <i class="fa fa-solid fa-arrow-left" /> Volver
                </NavLink>
            </Header>
            <Body>
                <EditForm Model="Oportunidad" class="col-12 g-2" OnValidSubmit="GuardarOportunidad" Context="OPORTUNIDADFORM">
                    <FluentValidationValidator Validator="validator" />
                    <ValidationSummary />
                    <Card HeaderText="Datos pricipales" BodyClass="col-12 row">
                        <Body>
                            <div class="col-md-4 col-12">
                                <label>Nombre de oportunidad</label>
                                <InputText @bind-Value="Oportunidad.Nombre_Opor" class="form-control" />
                                <ValidationMessage For="@(()=>Oportunidad.Nombre_Opor)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Origen de producto</label>
                                <InputSelect @bind-Value="Oportunidad.OrigenPrductoId" class="form-select">
                                    <option>-- seleccione un origen de producto --</option>
                                    @foreach (var item in OrigenProductos)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.OrigenPrductoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Tipo de producto</label>
                                <InputSelect @bind-Value="Oportunidad.TipoProductoId" class="form-select">
                                    <option>-- seleccione un tipo de producto --</option>
                                    @foreach (var item in TipoProductos)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.TipoProductoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Cuenta</label>
                                <DropDownFilter Listado="Clientes" TListado="CRMCliente" TValue="int" Default_Placeholder="Seleccione una cuenta" FiltrarValor="ObtenerClientes"
                                                @bind-Valor="@Oportunidad.CuentaId" Propiedad_Valor="Id" On_Change_Method="ObtenerContacto">
                                    <RenderValue Context="item">
                                        @item.Nombre
                                    </RenderValue>
                                    <Render Context="item">
                                        @item.Nombre
                                    </Render>
                                </DropDownFilter>
                                <InputSelect @bind-Value="Oportunidad.CuentaId" class="d-none" />
                                <ValidationMessage For="@(()=>Oportunidad.CuentaId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Contacto</label>
                                <InputSelect @bind-Value="Oportunidad.ContactoId" class="form-select">
                                    <option>-- seleccione un contacto --</option>
                                    @foreach (var item in Contactos)
                                    {
                                        <option value="@item.Id">
                                            @item.Nombre @item.Apellidos
                                            @(!string.IsNullOrEmpty(item.Correo) ? $"/{item.Correo}" : string.Empty)
                                            @(!string.IsNullOrEmpty(item.Tel_Movil) ? $"/{item.Tel_Movil}" : string.Empty)
                                        </option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.ContactoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Equipo</label>
                                <DropDownFilter Listado="Equipos" TListado="CRMEquipoDTO" TValue="int" Default_Placeholder="Seleccione un equipo" FiltrarValor="ObtenerEquipos"
                                                @bind-Valor="@Oportunidad.EquipoId" Propiedad_Valor="Id" On_Change_Method="@(()=>ObtenerVendedores())">
                                    <RenderValue Context="item">
                                        @item.Nombre
                                    </RenderValue>
                                    <Render Context="item">
                                        <div class="d-flex">
                                            <div class="my-auto" style="background-color:@item.Color;width:1rem;height:1rem;border-radius:1rem;margin-right:.2rem;"></div>
                                            <p class="my-auto">@($"{item.Nombre} - {item.Lider}")</p>
                                        </div>
                                    </Render>
                                </DropDownFilter>
                                <InputSelect @bind-Value="Oportunidad.CuentaId" class="d-none" />
                                <ValidationMessage For="@(()=>Oportunidad.CuentaId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Asignado a</label>
                                <DropDownFilter Listado="Vendedores" TListado="CRMVendedorDTO" TValue="int" Default_Placeholder="Seleccione un vendedor" FiltrarValor="ObtenerVendedores"
                                                @bind-Valor="@Oportunidad.VendedorId" Propiedad_Valor="Id">
                                    <RenderValue Context="item">
                                        @item.Fullname
                                    </RenderValue>
                                    <Render Context="item">
                                        @item.Fullname
                                    </Render>
                                </DropDownFilter>
                                <InputSelect @bind-Value="Oportunidad.VendedorId" class="d-none" @bind-Value:event="onchange" />
                                <ValidationMessage For="@(()=>Oportunidad.VendedorId)" />
                            </div>
                        </Body>
                    </Card>
                    <Card HeaderText="Importe" BodyClass="col-12 row">
                        <Body>
                            <div class="col-md-4 col-12">
                                <label>Periodo</label>
                                <InputSelect @bind-Value="Oportunidad.PeriodoId" class="form-select">
                                    <option>-- seleccione un periodo --</option>
                                    @foreach (var item in Periodos)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.PeriodoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Unidad de medida</label>
                                <InputSelect @bind-Value="Oportunidad.UnidadMedidaId" class="form-select" onchange="@CalcularImporte()">
                                    <option>-- seleccione una medida --</option>
                                    @foreach (var item in Medida)
                                    {
                                        <option value="@item.Id">@item.Abreviacion</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.UnidadMedidaId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Cantidad de la oportunidad</label>
                                <InputNumber @bind-Value="Oportunidad.CantidadLts" class="form-control" oninput="@CalcularImporte()" />
                                <ValidationMessage For="@(()=>Oportunidad.CantidadLts)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Precio del producto</label>
                                <InputNumber @bind-Value="Oportunidad.PrecioLts" class="form-control" oninput="@CalcularImporte()" />
                                <ValidationMessage For="@(()=>Oportunidad.PrecioLts)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Total litros de la oportunidad</label>
                                <InputNumber @bind-Value="Oportunidad.TotalLts" class="form-control" disabled />
                                <ValidationMessage For="@(()=>Oportunidad.TotalLts)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Importe mensual</label>
                                <InputNumber @bind-Value="Oportunidad.ValorOportunidad" class="form-control" disabled />
                                <ValidationMessage For="@(()=>Oportunidad.ValorOportunidad)" />
                            </div>
                        </Body>
                    </Card>
                    <Card HeaderText="Informacion adicional" BodyClass="col-12 row">
                        <Body>
                            <div class="col-md-4 col-12">
                                <label>Cantidad de estaciones</label>
                                <InputNumber @bind-Value="Oportunidad.CantidadEstaciones" class="form-control" />
                                <ValidationMessage For="@(()=>Oportunidad.CantidadEstaciones)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Modelo de venta</label>
                                <InputSelect @bind-Value="Oportunidad.ModeloVentaId" class="form-select">
                                    <option>-- seleccione un modelo de venta --</option>
                                    @foreach (var item in ModeloVenta)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.ModeloVentaId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Equipo de transporte</label>
                                <InputSelect @bind-Value="Oportunidad.VolumenId" class="form-select">
                                    <option>-- seleccione un tipo de transporte --</option>
                                    @foreach (var item in Volumen)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.VolumenId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Forma de pago</label>
                                <InputSelect @bind-Value="Oportunidad.FormaPagoId" class="form-select">
                                    <option>-- seleccione una forma de pago --</option>
                                    @foreach (var item in FormaPago)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.FormaPagoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Condiciones de días</label>
                                <InputSelect @bind-Value="Oportunidad.DiasPagoId" class="form-select">
                                    <option>-- seleccione un dia de pago --</option>
                                    @foreach (var item in DiasCredito)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.DiasPagoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Proximo paso</label>
                                <InputTextArea class="form-control" @bind-Value="Oportunidad.Prox_Paso" />
                                <ValidationMessage For="@(()=>Oportunidad.Prox_Paso)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Tipo</label>
                                <InputSelect @bind-Value="Oportunidad.TipoId" class="form-select">
                                    <option>-- seleccione un tipo --</option>
                                    @foreach (var item in Tipos)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.TipoId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Fecha de cierre</label>
                                <InputDate Type="InputDateType.Date" @bind-Value="Oportunidad.FechaCierre" class="form-control" />
                                <ValidationMessage For="@(()=>Oportunidad.FechaCierre)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Etapa de venta</label>
                                <InputSelect @bind-Value="Oportunidad.EtapaVentaId" class="form-select">
                                    <option>-- seleccione una etapa de venta--</option>
                                    @foreach (var item in Etapas)
                                    {
                                        <option value="@item.Id">@item.Valor</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(()=>Oportunidad.EtapaVentaId)" />
                            </div>
                            <div class="col-md-4 col-12">
                                <label>Probabilidad</label>
                                <InputNumber @bind-Value="Oportunidad.Probabilidad" class="form-control" />
                                <ValidationMessage For="@(()=>Oportunidad.Probabilidad)" />
                            </div>
                        </Body>
                    </Card>
                    <div class="col-12">
                        <div class="col-3">
                            <button type="submit" class="btn gcom-bg-amarillo col-12">
                                <i class="fa fa-solid fa-floppy-disk" />
                                Guardar
                                @if (loading_save)
                                {
                                    <SpinnerLoading />
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>
            </Body>
        </Card>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public int Id { get; set; }

    CRMOportunidadPostDTO Oportunidad = new();
    List<Catalogo_Fijo> OrigenProductos = new();
    List<Catalogo_Fijo> TipoProductos = new();
    List<Catalogo_Fijo> Medida = new();
    List<Catalogo_Fijo> Periodos = new();
    List<Catalogo_Fijo> ModeloVenta = new();
    List<Catalogo_Fijo> Volumen = new();
    List<Catalogo_Fijo> FormaPago = new();
    List<Catalogo_Fijo> DiasCredito = new();
    List<Catalogo_Fijo> Tipos = new();
    List<Catalogo_Fijo> Etapas = new();

    List<CRMVendedorDTO> Vendedores = new();
    List<CRMCliente> Clientes = new();
    List<CRMContactoDTO> Contactos = new();
    List<CRMEquipoDTO> Equipos = new();

    bool loading_info = false;
    bool loading_save = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
            await ObtenerOportunidad();

        await Task.WhenAll(
        ObtenerCatalogoEtapa(),
        ObtenerCatalogoMedida(),
        ObtenerCatalogoTipo(),
        ObtenerVendedores(),
        ObtenerClientes(),
        ObtenerCatalogoPeriodo(),
        ObtenerCatalogoProductoOrigen(),
        ObtenerCatalogoProductoTipo(),
        ObtenerCatalogoModeloVenta(),
        ObtenerCatalogoVolumen(),
        ObtenerCatalogoFormaPago(),
        ObtenerCatalogoDiasCredito(),
        ObtenerContacto(),
        ObtenerEquipos());

    }

    private async Task ObtenerVendedores(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(CRMVendedorDTO.Nombre)] = value;
            query[nameof(CRMVendedorDTO.EquipoId)] = Oportunidad.EquipoId.ToString();
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CRMVendedorDTO>>($"api/crmvendedor?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Vendedores = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoTipo()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/tipo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Tipos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoMedida()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/medida");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Medida = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoEtapa()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/etapa");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Etapas = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoPeriodo()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/periodo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Periodos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoProductoOrigen()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/origen/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                OrigenProductos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoProductoTipo()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/tipo/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                TipoProductos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoModeloVenta()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/modelo/venta");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ModeloVenta = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoVolumen()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/volumen");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Volumen = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoFormaPago()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/forma/pago");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                FormaPago = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerCatalogoDiasCredito()
    {
        try
        {
            var response = await http.Get<List<Catalogo_Fijo>>($"api/crmoportunidad/catalogo/dias/credito");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                DiasCredito = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerClientes(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Nombre"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CRMCliente>>($"api/crmcliente/contactos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerEquipos(string value = "")
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Nombre"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CRMEquipoDTO>>($"api/crmequipo?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Equipos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GuardarOportunidad()
    {
        try
        {
            loading_save = true;
            var response = await http.Post<CRMOportunidadPostDTO>($"api/crmoportunidad", Oportunidad);
            if (response.Error)
            {
                loading_save = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_save = false;
                if (Id != 0)
                    navigation.NavigateTo("crm/oportunidades", false);
                else
                    Oportunidad = new();
            }
        }
        catch (Exception e)
        {
            loading_save = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerOportunidad()
    {
        try
        {
            loading_info = true;
            var response = await http.Get<CRMOportunidadPostDTO>($"api/crmoportunidad/{Id}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Oportunidad = response.Response;
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task ObtenerContacto()
    {
        try
        {
            Dictionary<string, string> query = new();
            query[nameof(CRMContactoDTO.CuentaId)] = Oportunidad.CuentaId.ToString();
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<List<CRMContactoDTO>>($"api/crmcontactos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Contactos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CalcularImporte()
    {
        var medida = Medida.FirstOrDefault(x => x.Id == Oportunidad.UnidadMedidaId);
        if (medida is null) return;

        var periodo = Periodos.FirstOrDefault(x => x.Id == Oportunidad.PeriodoId);
        if (periodo is null) return;

        if (periodo.Valor.ToLower().Equals("semanal"))
        {
            if (!string.IsNullOrEmpty(medida.Abreviacion))
            {
                if (medida.Abreviacion.ToLower().Equals("lts"))
                {
                    Oportunidad.ValorOportunidad = (Oportunidad.CantidadLts * Oportunidad.PrecioLts) * 4;
                    Oportunidad.TotalLts = Oportunidad.CantidadLts;
                }

                if (medida.Abreviacion.ToLower().Equals("mxn"))
                {
                    Oportunidad.ValorOportunidad = Oportunidad.CantidadLts * 4;
                    if (!Oportunidad.CantidadLts.IsZero() && !Oportunidad.PrecioLts.IsZero())
                        Oportunidad.TotalLts = (Oportunidad.CantidadLts / Oportunidad.PrecioLts);
                }

                if (medida.Abreviacion.ToLower().Equals("m3"))
                {
                    Oportunidad.ValorOportunidad = ((Oportunidad.CantidadLts * 1000) * Oportunidad.PrecioLts) * 4;
                    Oportunidad.TotalLts = (Oportunidad.CantidadLts * 1000);
                }
            }
        }

        if (periodo.Valor.ToLower().Equals("mensual"))
        {
            if (!string.IsNullOrEmpty(medida.Abreviacion))
            {
                if (medida.Abreviacion.ToLower().Equals("lts"))
                {
                    Oportunidad.ValorOportunidad = (Oportunidad.CantidadLts * Oportunidad.PrecioLts);
                    Oportunidad.TotalLts = Oportunidad.CantidadLts;
                }

                if (medida.Abreviacion.ToLower().Equals("mxn"))
                {
                    Oportunidad.ValorOportunidad = Oportunidad.CantidadLts;
                    if (!Oportunidad.CantidadLts.IsZero() && !Oportunidad.PrecioLts.IsZero())
                        Oportunidad.TotalLts = (Oportunidad.CantidadLts / Oportunidad.PrecioLts);
                }

                if (medida.Abreviacion.ToLower().Equals("m3"))
                {
                    Oportunidad.ValorOportunidad = ((Oportunidad.CantidadLts * 1000) * Oportunidad.PrecioLts);
                    Oportunidad.TotalLts = (Oportunidad.CantidadLts * 1000);
                }
            }
        }
    }
}
