@page "/crm/equipos"
@inject IRepositorio http
@inject SweetAlertService swal
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <Card>
            <Header>
                <div class="d-flex justify-content-between">
                    <b>Equipos</b>
                    <NavLink class="g-1 btn gcom-bg-amarillo" Match="NavLinkMatch.All" href="../">
                        <i class="fa fa-solid fa-arrow-left" />
                        Volver
                    </NavLink>
                </div>
            </Header>
        </Card>
        <div class="col-12 my-2">
            <div class="col-md-2 col">
                <NavLink class="btn btn-sm gcom-bg-amarillo g-1 col-12" href="crm/equipos/formulario" Match="NavLinkMatch.All">
                    <i class="fa fa-solid fa-plus" />Agregar
                </NavLink>
            </div>
        </div>
        <div class="ancho-tabla">
            <Tabla Datos="Equipos" Cargando="loading_info">
                <Cabeceras>
                    <tr>
                        <th style="max-width:150px;"></th>
                        <th>Nombre</th>
                        <th>Lider de equipo</th>
                        <th>Division</th>
                    </tr>
                </Cabeceras>
                <Filtros>
                    <tr>
                        <td></td>
                        <td><input class="form-control" @bind-value="@filtro.Nombre" @oninput="FiltrarNombre" /></td>
                        <td><input class="form-control" @bind-value="@filtro.Lider" @oninput="FiltrarLider" /></td>
                        <td><input class="form-control" @bind-value="@filtro.Division" @oninput="FiltrarDivision" /></td>
                    </tr>
                </Filtros>
                <Columnas Context="item">
                    <tr>
                        <td>
                            <div class="btn-group">
                                <a class="btn gcom-bg-amarillo" href="/crm/equipos/formulario/@item.Id">
                                    <i class="fa fa-solid fa-edit" />
                                </a>
                                <a class="btn gcom-bg-amarillo" href="/crm/equipo/@item.Id">
                                    <i class="fa fa-solid fa-eye" />
                                </a>
                                <button class="btn btn-danger" @onclick="@(()=>Eliminar(item.Id))">
                                    <i class="fa fa-solid fa-trash" />
                                </button>
                            </div>
                        </td>
                        <td>@item.Nombre</td>
                        <td>@item.Lider</td>
                        <td>@item.Division</td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
        <div class="col-12">
            <PaginacionComponent PaginaActual="filtro.Pagina_ACtual" PaginasTotales="filtro.Total_paginas" PaginaSeleccionada="Pagina_Seleccionada" Radio="5" />
            <div class="col-12">
                <p>Total de registros: @filtro.Total_registros</p>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NoAutorizado />
    </NotAuthorized>
</AuthorizeView>

@code {
    List<CRMEquipoDTO> Equipos = new();
    CRMEquipoDTO filtro = new();
    bool loading_info = false;
    Dictionary<string, string> query = new();

    protected override async Task OnInitializedAsync()
    {
        await Obtener();
    }

    private Dictionary<string, string> SetFiltro()
    {
        query[$"{nameof(filtro.Nombre)}"] = filtro.Nombre;

        return query;
    }

    private async Task Obtener()
    {
        try
        {
            loading_info = true;
            var uri = Constructor_De_URL_Parametros.Generar_URL(SetFiltro());

            var response = await http.Get<List<CRMEquipoDTO>>($"api/crmequipo?{uri}");
            if (response.Error)
            {
                loading_info = false;
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading_info = false;
                Equipos = response.Response;

                filtro.Total_paginas = Constructor_De_URL_Parametros.Obt_Total_Paginas(response.HttpResponseMessage);
                filtro.Total_registros = Constructor_De_URL_Parametros.Obt_Total_Registros(response.HttpResponseMessage);
                filtro.Pagina_ACtual = Constructor_De_URL_Parametros.Obt_Pagina_Actual(response.HttpResponseMessage);
            }
        }
        catch (Exception e)
        {
            loading_info = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Eliminar(int id)
    {
        try
        {
            var response = await http.Delete($"api/crmequipo/{id}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Obtener();
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task Pagina_Seleccionada(int pagina)
    {
        filtro.Pagina_ACtual = pagina;
        filtro.Pagina = pagina;

        await Obtener();
    }

    private async Task FiltrarNombre(ChangeEventArgs args)
    {
        filtro.Nombre = args.Value?.ToString() ?? string.Empty;
        await Obtener();
    }

    private async Task FiltrarLider(ChangeEventArgs args)
    {
        filtro.Lider = args.Value?.ToString() ?? string.Empty;
        await Obtener();
    }

    private async Task FiltrarDivision(ChangeEventArgs args)
    {
        filtro.Division = args.Value?.ToString() ?? string.Empty;
        await Obtener();
    }
}
