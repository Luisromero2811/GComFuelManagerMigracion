@page "/seguimiento/ordenes"
@inject IRepositorio repositorio
@inject SweetAlertService swal
<!--Maquetación de formularios-->
<h4><b>Seguimiento de ordenenes</b></h4>

<div class="row">
    <div class="col-6 p-4">
        <label><b>Editar:</b></label>
        <div class="col-12 card h-100 shadow">
            <EditForm Model="@ordenEmbarque" class="m-4">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-6">
                        <div class="col-12">
                            <label class="form-label" for="form2Example17">Destino:</label>
                            <InputSelect class="form-select" @bind-Value="DestinoSeleccionado">
                                <option>--- Seleccione una opcion ----</option>
                                @if (Destinos is null)
                                {
                                    <option disabled>Cargando...</option>
                                }
                                else if (Destinos.Count == 0)
                                {
                                    <option disabled>No hay destinos</option>
                                }
                                else
                                {
                                    @foreach (var item in Destinos)
                                    {
                                        <option value="@item.Cod">@item.Den</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-outline">
                            <label class="form-label" for="form2Example17">Fecha de Carga:</label>
                            <InputDate class="form-control" @bind-Value="Date" />
                        </div>
                    </div>
                </div>
                <div class="row justify-content-end">
                    <div class="col-sm-5  mt-3 mb-3">
                        <button class="btn gcom-bg-amarillo col-12"><b>Guardar Cambios</b></button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="col-6 p-4">
        <label><b>Mostrar Ordenes:</b></label>
        <div class="col-12 card h-100 shadow">
            <EditForm Model="@ordenEmbarque" class="m-4">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-6">
                        <div class="col-12">
                            <label class="form-label" for="form2Example17">Del:</label>
                            <InputDate class="form-control" @bind-Value="@fechas.DateInicio" />
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-outline">
                            <label class="form-label" for="form2Example17">Al:</label>
                            <InputDate class="form-control" @bind-Value="@fechas.DateFin" />
                        </div>
                    </div>
                </div>
                <div class="row mt-4 mb-2">
                    <div class="d-flex justify-content-center">
                        <div class="form-check form-check-inline">
                            <input type="radio" class="form-check-input" name="estatus" checked="@(fechas.Estado == 1)" @onchange="@(()=>fechas.Estado = 1)" />
                            <label class="form-check-label" for="inlineRadio1">Sin Cargar</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="estatus" checked="@(fechas.Estado == 2)" @onchange="@(()=>fechas.Estado = 2)" />
                            <label class="form-check-label" for="inlineRadio2">Cargadas</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="estatus" checked="@(fechas.Estado == 3)" @onchange="@(()=>fechas.Estado = 3)" />
                            <label class="form-check-label" for="inlineRadio3">En Trayecto</label>
                        </div>
                    </div>
                </div>
                <div class="row d-flex g-3 mt-4">
                    <div class="row m-2">
                        <div class="col-sm-12 col-md-6">
                            <button class="btn gcom-bg-amarillo col-12"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Exportar</b></button>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@MostrarOrdenFechaRadio">
                                <b>Mostrar Ordenes</b>
                                @if (loadingFiltro)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <button class="btn gcom-bg-amarillo col-12 mt-3"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Historial de despacho</b></button>
                        </div>
                        <div class="col-sm-12 col-md-6">
                            <button class="btn gcom-bg-amarillo col-12 mt-3"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /> <b>Tráfico</b></button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!--Maquetación de Tabla-->
<div class="my-4 d-flex justify-content-center">
    <div class="table-responsive" style="height: 500px; width: 1000px">
        <table class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th scope="col">NO.</th>
                    <th scope="col">Referencia</th>
                    <th scope="col">Fecha Programa</th>
                    <th scope="col">Estatus Orden</th>
                    <th scope="col">Fecha Carga</th>
                    <th scope="col">Bol</th>
                    <th scope="col">Delivery/Rack</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">Destino</th>
                </tr>
            </thead>
            <tbody>
                @if (ordens is null)
                {
                    <SpinnerLoading />
                }
                else if (ordens.Count == 0)
                {
                    <tr>
                        <td colspan="9">
                            <NoHayRegistros />
                        </td>
                    </tr>
                }
                else
                {
                    @for (int i = 0; i < ordens.Count; i++)
                    {
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@ordens[i]?.Destino?.Den</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();
    //Listas
    private List<CodDenDTO> Destinos { get; set; } = null!;

    //Selecciones
    private int DestinoSeleccionado = 0;

    //Fechas
    public DateTime Date { get; set; } = DateTime.Now;
    public DateTime Date1 { get; set; } = DateTime.Now;
    public DateTime Date2 { get; set; } = DateTime.Now;

    public int Estado { get; set; } = 1;

    bool loadingFiltro = false;

    FechasF fechas = new FechasF();

    protected override async Task OnInitializedAsync()
    {
        await GetDestinos();
    }

    public async Task GetDestinos()
    {
        var response = await repositorio.Get<List<CodDenDTO>>("api/destino");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Destinos = response.Response;
        }
    }
    public async Task MostrarOrdenFechaRadio()
    {
        try
        {
            loadingFiltro = true;
            ordens = null!;
            StateHasChanged();

            var responseHttp = await repositorio.Post<FechasF, List<OrdenEmbarque>>($"api/pedido/filtro", fechas);

            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loadingFiltro = false;
                ordens = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}

<!--Fecha de carga, estacion es destino-->