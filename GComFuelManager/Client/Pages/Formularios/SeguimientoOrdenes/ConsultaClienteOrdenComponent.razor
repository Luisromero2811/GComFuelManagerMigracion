@page "/consulta/ordencliente"
@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Revision Precios")]

<h4>Reporte de órdenes/precios de venta</h4>

<div class="row">
    <div class="col-12 card shadow-sm">
        <div class="col-12 card-body">
            <label><b>Mostrar Órdenes</b></label>
            <div class="col-12 row">
                @*<div class="col-3 mb-2">
                        <div class="col-12">
                            <label>Grupo Empresarial</label>
                            <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="fechas.codGru"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" Change="@GetClientes" AllowClear="true" />
                        </div>
                    </div>
                    <div class="col-3 mb-2">
                        <div class="col-12">
                            <label>Cliente</label>
                            <RadzenDropDown Data="ClientesFiltro" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="fechas.codCte"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" AllowClear="true" />
                        </div>
                    </div>*@
                <div class="col-2 mb-2">
                    <label>Del:</label>
                    <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value="fechaPrecio.FchInicio" @bind-Value:format="yyyy-MM-dd" />
                </div>
                <div class="col-2 mb-2">
                    <label>Al:</label>
                    <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value="fechaPrecio.FchFin" @bind-Value:format="yyyy-MM-dd" />
                </div>
                <div class="col-2 mb-2">
                    <label></label>
                    <button class="col-12 btn gcom-bg-amarillo" @onclick="@GetOrders">
                        <i class="fa fa-solid fa-magnifying-glass"></i> Buscar
                    </button>
                </div>
                <div class="col-2 mb-2">
                    <label></label>
                    <button class="col-12 btn gcom-bg-amarillo" @onclick="@ExportExcel">
                        <i class="fa fa-solid fa-file-excel"></i> Exportar
                    </button>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="col-12 mt-4 overflow-scroll ancho" style="height:449px; resize:both;">
    <table class="table table-hover table-bordered table-sm table-responsive" style="max-height: 600px; overflow: auto; width: 100%">
        <thead>
            <tr>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">BOL</th>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">Cliente</th>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">Destino</th>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">Producto</th>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">Precio</th>
                <th class="th-resizable overflow-hidden" style="min-width:20px;width:400px;">Volumen Cargado</th>
            </tr>
        </thead>
        <tbody>
            <tr style="height:49px;">
                <td></td>
                <td>
                    <RadzenTextBox @bind-Value="ClienteSeleccionado" />
                </td>
                <td>
                    <RadzenTextBox @bind-Value="DestinoSeleccionado" />
                </td>
                <td>
                    <RadzenTextBox @bind-Value="ProductoSeleccionado" />
                </td>
                <td></td>
                <td></td>
            </tr>
            <Virtualize TItem="PrecioBolDTO" Items="PreciosFiltrados" Context="data">
                <tr style="height:49px;">
                    <td>
                        @data.BOL
                    </td>
                    <td>
                        @data.Cliente_Original
                    </td>
                    <td>
                        @data.Destino_Original
                    </td>
                    <td>
                        @data.Producto_Original
                    </td>
                    <td>
                        @data.Precio
                    </td>
                    <td>
                        @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}", @data.Volumen_Cargado)

                    </td>
                </tr>
            </Virtualize>
        </tbody>

    </table>
</div>
@code {
    CierreDiarioDTO fechas { get; set; } = new CierreDiarioDTO();
    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;
    private short? GrupoSeleccionadoB = 0;
    CierreDiarioDTO fechaPrecio { get; set; } = new CierreDiarioDTO();

    private IList<PrecioBolDTO> PrecioBols { get; set; } = new List<PrecioBolDTO>();
    List<PrecioBolDTO> Listado { get; set; } = new List<PrecioBolDTO>();
    private string ProductoSeleccionado = string.Empty;
    private string ClienteSeleccionado = string.Empty;
    private string DestinoSeleccionado = string.Empty;

    private IList<PrecioBolDTO> PreciosFiltrados => PrecioBols.Where(x =>
 (string.IsNullOrEmpty(ProductoSeleccionado) || x.Producto_Original != null && x.Producto_Original != null && x.Producto_Original.Contains(ProductoSeleccionado, StringComparison.OrdinalIgnoreCase)) &&
(string.IsNullOrEmpty(DestinoSeleccionado) || x.Destino_Original != null && x.Destino_Original.Contains(DestinoSeleccionado, StringComparison.OrdinalIgnoreCase)) &&
  (string.IsNullOrEmpty(ClienteSeleccionado) || x.Cliente_Original != null && x.Cliente_Original.Contains(ClienteSeleccionado, StringComparison.OrdinalIgnoreCase))
).ToList();

    private async Task GetOrders()
    {
        try
        {
            var responseHttp = await repositorio.Post<CierreDiarioDTO, IList<PrecioBolDTO>>($"api/cierre/fechasGroup", fechaPrecio);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                PrecioBols = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ExportExcel()
    {
        try
        {
            if (PrecioBols.Count != 0)
            {
                foreach (var item in PrecioBols!)
                {
                    if ((item.Producto_Original == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                        && (item.Destino_Original == DestinoSeleccionado || string.IsNullOrEmpty(DestinoSeleccionado))
                        && (item.Cliente_Original == ClienteSeleccionado || string.IsNullOrEmpty(ClienteSeleccionado)))
                        PrecioBols.Add(new PrecioBolDTO
                        {
                            BOL = item.BOL,
                            Cliente_Original = item.Cliente_Original,
                            Destino_Original = item.Destino_Original,
                            Producto_Original = item.Producto_Original,
                            Precio = item.Precio,
                            Volumen_Cargado = item.Volumen_Cargado
                        });
                }
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("OrdenesPrecios");
                worksheet.Columns.Width = 60;
                worksheet.Columns.AutoFit();

                //Formacion del excel
                var header = worksheet.Cells["A1:F1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<PrecioBolDTO>(PrecioBols, true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                //Guardado de Excel
                await js.GuardarComo($"Ordenes{DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
            else
            {
                await Swal.FireAsync("Alerta", "Debe de tener datos filtrados para poder exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    //  await GetGrupos();
    //}

    //private async Task GetGrupos()
    //{
    //    try
    //    {
    //        var httpResponse = await repositorio.Get<IEnumerable<Grupo>>("api/grupo/all");
    //        if (httpResponse.Error)
    //        {
    //            var message = await httpResponse.ObtenerMensajeError();
    //            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
    //        }
    //        else
    //        {
    //            Grupos = httpResponse.Response;
    //        }
    //    }
    //    catch (Exception e)
    //    {
    //        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }

    //}

    //private async Task GetClientes()
    //{
    //    try
    //    {
    //        if (fechas.codGru != null && GrupoSeleccionadoB != fechas.codGru)
    //        {
    //            var responseHttp = await repositorio.Get<List<CodDenDTO>>($"api/cliente/{fechas.codGru}");
    //            if (responseHttp.Error)
    //            {
    //                var message = await responseHttp.ObtenerMensajeError();
    //                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
    //            }
    //            else
    //            {
    //                GrupoSeleccionadoB = fechas.codGru;
    //                ClientesFiltro = responseHttp.Response;
    //                StateHasChanged();
    //            }
    //        }

    //    }
    //    catch (Exception e)
    //    {
    //        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //    }
    //}



}

