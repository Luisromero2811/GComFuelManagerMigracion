@page "/asignacion/unidades"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@inject AsignacionUnidadValidation validation
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador")]

<h4><b>Programaci√≥n de Equipos</b></h4>
@*<div>
        <RadzenButton Text="Mostrar Ordenes" Click="@(() => sidebar6Expanded = !sidebar7Expanded )" />
    </div>*@
<AuthorizeView Roles="Admin, Administrador Sistema, Programador, Direccion, Gerencia">
    <RadzenPanel AllowCollapse="true" Text="Mostrar Ordenes:" Style="font-weight: bold;" Class="my-4" Expand=@(() => Change("Panel expanded")) Collapse=@(() => Change("Panel collapsed"))>
        <div class="col-12 mt-2 mb-2">
            <div class="d-flex justify-content-center">
                <div class="col-12 mt-3 mb-2">
                    <div class="col-12 card">
                        <div class="col-12 card-body">
                            <label><b>Filtro entre fechas:</b></label>
                            <div class="col-12 row">
                                <div class="col-4 mb-3">
                                    <label>Del:</label>
                                    <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateInicio" />
                                </div>
                                <div class="col-4 mb-3">
                                    <label>A:</label>
                                    <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateFin" />
                                </div>
                                <div class="col-4 d-flex mt-1">
                                    <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                                        <i class="fa fa-solid fa-eye"></i> <b>Mostrar ordenes</b>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </RadzenPanel>
</AuthorizeView>
@*<hr />*@
<AuthorizeView Roles="Admin, Administrador Sistema, Programador" Context="FORM">
    <div class="col-12 mt-2 mb-2">
        <div class="d-flex justify-content-center">
            <div class="col card shadow-sm">
                <div class="col-12 card-body">
                    <label><b>Asignar unidades:</b></label>
                    <EditForm Model="asignacion" class="form col-12" OnInvalidSubmit="@AsignarUnidad">
                        <FluentValidationValidator Validator="validation" />
                        <ValidationSummary />
                        <div class="row mb-3">
                            <div class="col-4">
                                <label>Transportista:</label>
                                <RadzenDropDown Data="Transportistas" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="asignacion.CodTra"
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowVirtualization="true" Change="@GetDataSelction" />
                            </div>
                            <div class="col-4">
                                <label>Chofer:</label>
                                <RadzenDropDown Data="Choferes" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="asignacion.CodChf"
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowVirtualization="true">
                                    <Template Context="data">
                                        @((data as Chofer).Dricod)  | @((data as Chofer).Den) |  @((data as Chofer).Shortden)
                                    </Template>
                                    <ValueTemplate Context="data">
                                        @((data as Chofer).Dricod) | @((data as Chofer).Den) | @((data as Chofer).Shortden)
                                    </ValueTemplate>
                                </RadzenDropDown>
                            </div>
                            <div class="col-4">
                                <label>Vehiculo:</label>
                                <RadzenDropDown Data="Vehiculos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="asignacion.CodTon"
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                AllowVirtualization="true">
                                </RadzenDropDown>

                            </div>
                        </div>
                        <div class="col-12">
                            <div class="row d-flex justify-content-end">
                                <div class="col-8 row">
                                    @if (Vehiculos != null)
                                    {
                                        @if (Vehiculos.Count > 0 && asignacion.CodTon != null)
                                        {
                                            @if (asignacion.CodTon != 0)

                                            {

                                                <InputRadioGroup @bind-Value="asignacion.Compartimiento">
                                                    @for (int i = 1; i <= Vehiculos.FirstOrDefault(x => x.Cod == asignacion.CodTon)!.CapDisponible; i++)
                                                    {
                                                        <div class="col">
                                                            <div class="form-check">
                                                                <InputRadio Value="@i" class="form-check-input" id="@i" />
                                                                <label class="form-check-label" for="@i">Com @i</label>
                                                            </div>
                                                        </div>
                                                    }
                                                </InputRadioGroup>

                                            }
                                        }
                                    }
                                </div>
                                <div class="col-4">
                                    <button class="btn gcom-bg-amarillo col-12" type="submit" @onclick="@AsignarUnidad" disabled="@(ordenEmbarque is null || SendAsignacion)">
                                        <i class="fa fa-solid fa-truck-front"></i>
                                        <b>Asignar</b>
                                        @if (SendAsignacion)
                                        {
                                            <SpinnerLoading />
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
<AuthorizeView Roles="Admin, Administrador Sistema, Programador, Gerencia, Direccion">
    <div class="col-12 d-flex justify-content-center mb-2 mt-2">
        <RadzenDataGrid TItem="OrdenEmbarque" Data="@ordenes" AllowColumnResize="true" AllowVirtualization="false" SelectionMode="DataGridSelectionMode.Multiple" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-6 ancho" Style="height:600px;" @bind-Value="ordenesSeleccionada" AllowRowSelectOnRowClick="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        IsLoading="loadingFiltro" Density="Density.Default" @ref="@grid" AllowSorting="true" AllowColumnPicking="true" AllowFiltering="true" Culture="CultureInfo.CurrentCulture"
                        @bind-Settings="@Settings">
            <Columns>
                <AuthorizeView Roles="Admin, Administrador Usuario, Programador" Context="EdicionUnidades">
                    <RadzenDataGridColumn TItem="OrdenEmbarque" Width="60px" Sortable="false" Filterable="false" Frozen="true" OrderIndex="1">
                        <HeaderTemplate>
                            <RadzenCheckBox TriState="false" TValue="bool" Value="@(ordenes.Any(i => ordenesSeleccionada != null && ordenesSeleccionada.Contains(i)))"
                                            Change="@(args => ordenesSeleccionada = args ? ordenes.ToList() : new List<OrdenEmbarque>())" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TriState="false" Value="@(ordenesSeleccionada.Contains(data))"
                                            TValue="bool" Change="@((bool args) => ToggleCheck(args, data))" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Asignar" Filterable="false" Width="80px" Sortable="false" Frozen="true" OrderIndex="2">
                        <Template Context="data">
                            <div class="col-12">
                                <button class="btn btn-primary col-12" @onclick="@(() => SetOrden(data))">
                                    <i class="fa fa-solid fa-pen-to-square"></i>
                                </button>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Cancelar" Width="90px" Frozen="true" OrderIndex="3" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <div class="col-12">
                                <button class="btn btn-danger col-12" @onclick="@(()=>CancelOrden(data))">
                                    <i class="fa fa-solid fa-cancel"></i>
                                </button>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Orden de compra" Property="OrdenCompra.den" Width="200px" Filterable="false" OrderIndex="4" Frozen="false" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Folio" Property="OrdenCierre.Folio" MinWidth="120px" Filterable="false" OrderIndex="5" Frozen="false" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Cliente" Property="Destino.Cliente.Den" Width="200px" FilterValue="ClienteSeleccionado" OrderIndex="6" Frozen="false">
                    <FilterTemplate Context="filter">
                        <RadzenDropDown Data="ClienteList" @bind-Value="ClienteSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <ValueTemplate Context="data">
                                <InputText class="form-control col-12" @bind-Value="ClienteSeleccionado" MaxLength="190" />
                            </ValueTemplate>
                        </RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div>
                            @data.Destino?.Cliente?.Den
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Destino" Property="Destino.Den" Width="220px" FilterValue="DestinosSeleccionado" OrderIndex="7">
                    <FilterTemplate Context="Destinos">
                        <RadzenDropDown Data="DestinoList" @bind-Value="DestinosSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <ValueTemplate Context="data">
                                <InputText class="form-control col-12" @bind-Value="DestinosSeleccionado" MaxLength="190" />
                            </ValueTemplate>
                        </RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div>
                            @data?.Destino?.Den
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Producto" Property="Producto.Den" Width="200px" FilterValue="ProductosSeleccionado" OrderIndex="8">
                    <FilterTemplate Context="Productos">
                        <RadzenDropDown Data="ProductList" @bind-Value="ProductosSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <ValueTemplate Context="data">
                                <InputText class="form-control col-12" @bind-Value="ProductosSeleccionado" MaxLength="190" />
                            </ValueTemplate>
                        </RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div>
                            @data?.Producto?.Den
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Volumen" Width="100px" FormatString="{0:N2}" Filterable="false" OrderIndex="9">
                    <Template Context="data">
                        <div class="col-12">
                            @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                            data?.Orden is not null ? data?.Orden?.Vol :
                            data?.Compartment == 1 && data.Tonel is not null ? data?.Tonel?.Capcom
                            : data?.Compartment == 2 && data.Tonel is not null ? data?.Tonel?.Capcom2
                            : data?.Compartment == 3 && data.Tonel is not null ? data?.Tonel?.Capcom3
                            : data?.Compartment == 4 && data.Tonel is not null ? data?.Tonel?.Capcom4
                            : data?.Vol
                            )
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Fecha de carga" Property="Fchcar" FormatString="{0:d}" Filterable="false" Width="160px" OrderIndex="10" Sortable="false" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Transportista" Property="Tonel.Transportista.Den" Width="200px" Filterable="false" OrderIndex="11" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Unidad" Width="170px" Filterable="false" OrderIndex="12">
                    <Template Context="data">
                        <div class="col-12">
                            @data?.Tonel?.Tracto @data?.Tonel?.Placa
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Compartimiento" Property="Compartment" Filterable="false" Width="160px" OrderIndex="13" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Operador" Width="200px" Filterable="false" OrderIndex="14">
                    <Template Context="data">
                        <div class="col-12">
                            @data?.Chofer?.Den @data?.Chofer?.Shortden
                            @*@data?.Chofer?.Shortden*@
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Bin" Property="Bin" Filterable="false" Width="110px" OrderIndex="15" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Estatus" Property="Estado.den" Filterable="false" Width="120px" OrderIndex="16" />
                <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Desasignar" Filterable="false" Width="100px" Sortable="false" OrderIndex="17">
                    <Template Context="data">
                        <div class="col-12">
                            <button class="btn btn-primary col-12" @onclick="@(()=>DesasignarUnidad(data))">
                                <i class="fa-solid fa-broom"></i>
                            </button>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                @*<FilterTemplate Context="Estatus">
                    <RadzenDropDown Data="EstatusList" @bind-Value="EstatusSeleccionado" AllowClear="true"></RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                    <div>
                    @data.Estado?.den
                    </div>
                    </Template>
                    </RadzenDataGridColumn>*@
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
<AuthorizeView Roles="Admin, Administrador Sistema, Programador, Direccion, Gerencia" Context="SendSynthesis">
    <div class="col-12 card mt-2 mb-3">
        <div class="col-12 card-body">
            <div class="col-12 mb-2">
                <div class="row d-flex justify-content-start">
                    <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                        <div class="col-4">
                            <RadzenCheckBox @bind-Value="Synthesis" Name="CheckBox1" class="mx-3" />
                            <RadzenLabel Text="Envio a Synthesis" Component="CheckBox1" />
                        </div>
                    </AuthorizeView>
                </div>
                <div class="row d-flex justify-content-end">
                    @if (Synthesis)
                    {
                        <div class="col-4">
                            <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                                @*<button class="btn gcom-bg-amarillo col-12" @onclick="@SendToSynthesis" type="reset"><i class="fa fa-solid fa-paper-plane"></i> <b>Enviar a Syntesis</b></button>*@
                                <div class="gcom-bg-amarillo">

                                    <RadzenButton class="gcom-bg-amarillo col-12" Variant="Variant.Text" Click="@SendToSynthesis" Disabled="updateData">
                                        <div class="col-12">
                                            <i class="fa fa-solid fa-paper-plane"></i><b>Enviar a Synthesis</b>
                                        </div>
                                    </RadzenButton>

                                </div>
                            </AuthorizeView>
                        </div>
                    }
                    <div class="col-4">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel"><i class="fa fa-solid fa-file-excel"></i> <b>Exportar</b></button>
                        </AuthorizeView>

                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {
    //string searchText = "";
    //List<string> filteredOptions
    //{
    //    get
    //    {
    //        if (string.IsNullOrWhiteSpace(searchText))
    //        {
    //            return Vehiculos; // Si no hay texto de b√∫squeda, mostrar todas las opciones
    //        }
    //        else
    //        {
    //            return Vehiculos.Where(Vehiculos => Vehiculos.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList(); // Filtrar las opciones basado en el texto de b√∫squeda
    //        }
    //    }
    //}


    public bool Synthesis { get; set; } = false;
    bool isClose = false;
    //grid
    private RadzenDataGrid<OrdenEmbarque>? grid = new RadzenDataGrid<OrdenEmbarque>();
    private ElementReference dpT;
    private List<int> Cantidades { get; set; } = null!;
    private OrdenEmbarque ordenEmbarque { get; set; } = null!;
    private IList<OrdenEmbarque> ordenes { get; set; } = new List<OrdenEmbarque>();
    private IList<OrdenEmbarque> ordenesSeleccionada { get; set; } = new List<OrdenEmbarque>();

    //Listas
    private List<CodDenDTO> Destinos { get; set; } = null!;
    private List<CodDenDTO> Productos { get; set; } = null!;

    private List<Transportista> Transportistas { get; set; } = new List<Transportista>();
    private List<Chofer> Choferes { get; set; } = new List<Chofer>();
    private List<Tonel> Vehiculos { get; set; } = new List<Tonel>();

    List<TablaAsignacionUnidadesDTO> asignacionUnidadesDTO { get; set; } = new List<TablaAsignacionUnidadesDTO>();

    //Grids
    private string ProductosSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    private string DestinosSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ClienteSeleccionado = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    //private string EstatusSeleccionado = string.Empty;
    //private IEnumerable<string?> EstatusList { get; set; } = new List<string>();

    //Selecciones
    private int ProductoSeleccionado = 0;
    private int DestinoSeleccionado = 0;
    private int TransportistaSeleccionado = 0;
    private int? TransportistaSeleccionadoB = 0;

    private int ChoferSeleccionado = 0;
    private int ChoferSeleccionadoB = 0;

    private int VehiculoSeleccionado = 0;

    private int CompartimentoSeleccionado = 0;

    FechasF fechas = new FechasF();

    //loadings
    bool loadingFiltro = false;
    bool loadingEdit = false;
    bool loadginAsignar = false;
    bool loadingAgregar = false;
    bool loadingSend = false;
    bool SendAsignacion = false;
    //
    CheckChofer checkChofer = new CheckChofer();
    AsignacionDTO asignacion { get; set; } = new AsignacionDTO();
    private FluentValidationValidator? _fluentValidationValidator;

    int width = 0;
    string TotalWidth = string.Empty;
    //bool isClose = false;
    bool updateData = false;

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    protected override async Task OnInitializedAsync()
    {
        var cm = await js.GetItemLocalStorage("CloseMenu");
        if (!string.IsNullOrEmpty(cm))
            isClose = bool.Parse(cm);

        if (isClose)
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
        else
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";

        //await GetDestinos();
        //await GetProductos();
        await GetTransportista();
    }


    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    void Change(string text)
    {
        Console.WriteLine($"{text}");
    }

    public async Task GetDataSelction()
    {
        if (asignacion.CodTra != null && asignacion.CodTra != TransportistaSeleccionadoB)
        {
            asignacion.CodTon = 0;
            asignacion.CodChf = 0;
            await GetChoferes();
            await GetVehiculo();
        }
    }
    public async Task GetDestinos()
    {
        var response = await repositorio.Get<List<CodDenDTO>>("api/destino");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Destinos = response.Response;
        }
    }
    public async Task GetProductos()
    {
        var response = await repositorio.Get<List<CodDenDTO>>("api/producto");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Productos = response.Response;
        }
    }
    public async Task GetTransportista()
    {
        var response = await repositorio.Get<List<Transportista>>("api/transportista");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Transportistas = response.Response;
        }
    }
    public async Task GetChoferes()
    {
        try
        {
            if (asignacion.CodTra != null)
            {
                string? busentid = Transportistas.FirstOrDefault(x => x.Cod == asignacion.CodTra)?.Busentid;
                if (!string.IsNullOrEmpty(busentid))
                {
                    var response = await repositorio.Get<List<Chofer>>($"api/chofer/{busentid}");
                    if (response.Error)
                    {
                        var repositorioHttp = await response.ObtenerMensajeError();
                        await swal.FireAsync("Error", repositorioHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        TransportistaSeleccionadoB = asignacion.CodTra;
                        Choferes = response.Response;
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    public async Task GetVehiculo()
    {
        try
        {
            if (asignacion.CodTra != null)
            {
                string? carid = Transportistas.FirstOrDefault(x => x.Cod == asignacion.CodTra)?.CarrId;
                if (!string.IsNullOrEmpty(carid))
                {
                    var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/{carid}");
                    if (response.Error)
                    {
                        var repositorioHttp = await response.ObtenerMensajeError();
                        await swal.FireAsync("Error", repositorioHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        Vehiculos = response.Response;
                        TransportistaSeleccionadoB = asignacion.CodTra;
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    public async Task MostrarOrdenFecha()
    {
        try
        {
            loadingFiltro = true;
            StateHasChanged();

            var responseHttp = await repositorio.Post<FechasF, IList<OrdenEmbarque>>($"api/pedido/filtrar", fechas);

            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loadingFiltro = false;
                ordenes = responseHttp.Response;
                ordenesSeleccionada = new List<OrdenEmbarque>();

                DestinoList = ordenes?.DistinctBy(x => x?.Destino?.Den).Select(x => x?.Destino?.Den)!;
                ProductList = ordenes?.DistinctBy(x => x?.Producto?.Den).Select(x => x?.Producto?.Den)!;
                ClienteList = ordenes?.DistinctBy(x => x?.Destino?.Cliente?.Den).Select(x => x?.Destino?.Cliente?.Den)!;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task AsignarUnidad()
    {
        try
        {
            SendAsignacion = true;
            if (asignacion.CodTon == null || asignacion.CodTra == null || asignacion.CodChf == null)
                return;

            if (ordenEmbarque == null)
            {
                await swal.FireAsync("Advertencia", "Selecciona una orden para asignar unidad", SweetAlertIcon.Warning);
            }
            else
            {
                checkChofer = new CheckChofer()
                {
                    Chofer = asignacion.CodChf,
                    Tonel = asignacion.CodTon,
                    Compartimento = Vehiculos?.Count == null ? 0 :
                                                                    (asignacion.Compartimiento == 1) ? Vehiculos.FirstOrDefault(x => x.Cod == asignacion.CodTon && asignacion.CodTon != 0)?.Idcom
                                                                : (asignacion.Compartimiento == 2) ? Vehiculos.FirstOrDefault(x => x.Cod == asignacion.CodTon && asignacion.CodTon != 0)?.Idcom2
                                                                : (asignacion.Compartimiento == 3) ? Vehiculos.FirstOrDefault(x => x.Cod == asignacion.CodTon && asignacion.CodTon != 0)?.Idcom3
                                                                : Vehiculos.FirstOrDefault(x => x.Cod == asignacion.CodTon && asignacion.CodTon != 0)?.Idcom4,
                    //: (VehiculoSeleccionado == 4) ? Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado).Idcom4,
                    FechaCarga = ordenesSeleccionada.FirstOrDefault()?.Fchcar
                };

                ordenEmbarque.Codchf = checkChofer.Chofer;
                ordenEmbarque.Codton = checkChofer.Tonel;
                ordenEmbarque.Compartment = asignacion.Compartimiento;
                ordenEmbarque.CompartmentId = checkChofer.Compartimento;

                var response = await repositorio.Post<OrdenEmbarque>($"api/pedido/verificar/carga", ordenEmbarque);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    SendAsignacion = false;
                }
                else
                {
                    var responseHttp = await repositorio.Post<CheckChofer, int>($"api/pedido/check/chofer", checkChofer);

                    if (responseHttp.Error)
                    {
                        var respuestaHttp = await responseHttp.ObtenerMensajeError();
                        await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
                        SendAsignacion = false;
                    }
                    else
                    {
                        if (responseHttp.Response == 0)
                        {

                            await UpdateOrden();
                            asignacion.Compartimiento = 1;

                        }
                        else
                        {
                            var confirm = await swal.FireAsync(new SweetAlertOptions
                            {
                                Icon = SweetAlertIcon.Warning,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Aceptar",
                                CancelButtonText = "Cancelar",
                                Text = "Este chofer y esta unidad ya estan asignados a una orden. ¬øDesea asignarlos a esta orden?"
                            });

                            if (!string.IsNullOrEmpty(confirm.Value))
                            {
                                var responseDes = await repositorio.Put<OrdenEmbarque>($"api/pedido/desasignar/{responseHttp.Response}", new OrdenEmbarque());

                                if (responseDes.Error)
                                {
                                    var message = await responseDes.ObtenerMensajeError();
                                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                                    SendAsignacion = false;
                                }
                                else
                                {
                                    await UpdateOrden();
                                    await MostrarOrdenFecha();
                                    asignacion.Compartimiento = 1;
                                    SendAsignacion = false;
                                    //ordenesSeleccionada = new List<OrdenEmbarque>();
                                }
                            }
                        }
                        SendAsignacion = false;

                    }
                }
            }
            SendAsignacion = false;
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task DesasignarUnidad(OrdenEmbarque orden)
    {
        try
        {
            var confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¬øRealmente desea desasignar de unidad y chofer a esta orden?"
            });
            ordenEmbarque = orden;
            if (!string.IsNullOrEmpty(confirm.Value))
            {
                var responseDes = await repositorio.Put<OrdenEmbarque>($"api/pedido/desasignar/{ordenEmbarque.Cod}", ordenEmbarque);

                if (responseDes.Error)
                {
                    var message = await responseDes.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ns.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos removidos.", Duration = 2000 });
                    ordenEmbarque = orden;
                    //await UpdateOrden();
                    //grid!.Reload();
                    //StateHasChanged();
                    await MostrarOrdenFecha();
                    asignacion.Compartimiento = 1;

                    //ordenesSeleccionada = new List<OrdenEmbarque>();
                }
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task UpdateOrden()
    {
        loadingAgregar = true;
        try
        {
            var response = await repositorio.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido/update", ordenEmbarque);
            if (response.Error)
            {
                loadingAgregar = false;
                string? message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingAgregar = false;
                if (response.Response == null)
                    return;

                var index = ordenes.IndexOf(ordenes.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                ordenes.RemoveAt(index);
                ordenes.Insert(index, response.Response);

                if (ordenesSeleccionada.Any(x => x.Cod == response.Response.Cod))
                {
                    index = ordenesSeleccionada.IndexOf(ordenesSeleccionada.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                    ordenesSeleccionada.RemoveAt(index);
                    ordenesSeleccionada.Insert(index, response.Response);
                }

                ns.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos actualizados.", Duration = 2000 });
                await grid!.Reload();
                ordenEmbarque = null!;
                //StateHasChanged();
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (ordenes.Count != 0)
            {
                foreach (var item in ordenes)
                {
                    //Console.WriteLine(JsonConvert.SerializeObject(item));
                    if ((item.Destino?.Cliente?.Den == ClienteSeleccionado || string.IsNullOrEmpty(ClienteSeleccionado))
                       && (item.Destino?.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado))
                       && (item.Producto?.Den == ProductosSeleccionado || string.IsNullOrEmpty(ProductosSeleccionado)))
                        asignacionUnidadesDTO.Add(new TablaAsignacionUnidadesDTO
                        {
                            OrdenCompra = item?.OrdenCompra?.den ?? "",
                            Referencia = item?.OrdenCierre?.Folio ?? "",
                            Cliente = item?.Destino?.Cliente?.Den ?? "",
                            Destino = item?.Destino?.Den ?? "",
                            Producto = item?.Producto?.Den ?? "",
                            //Volumen = item?.Vol,
                            Volumen = item?.Compartment == 1 && item.Tonel is not null ?
                                                Convert.ToDouble(item?.Tonel?.Capcom) : item?.Compartment == 2 && item.Tonel is not null ?
                                                Convert.ToDouble(item?.Tonel?.Capcom2) : item?.Compartment == 3 && item.Tonel is not null ?
                                                Convert.ToDouble(item?.Tonel?.Capcom3) : item?.Compartment == 4 && item.Tonel is not null ?
                                                Convert.ToDouble(item?.Tonel?.Capcom4) : item?.Vol,
                            FechaCarga = item?.Fchcar?.ToString("dd/MM/yyyy") ?? "",
                            Transportista = item?.Tonel?.Transportista?.Den ?? "",
                            Unidad = item?.Tonel?.Veh ?? "",
                            Compartimento = item?.Compartment,
                            Operador = item?.Chofer?.Den + " " + item?.Chofer?.Shortden ?? "",
                            Bin = item?.Bin,
                            Fecha = item?.OrdenCierre?.FechaLlegada ?? "",
                            Turno = item?.OrdenCierre?.Turno ?? ""
                            //Status = item?.Estado?.den
                        });
                }
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("Asignacion de Unidades");
                worksheet.Columns.Width = 60;
                worksheet.Columns.AutoFit();

                //Formaci√≥n de Excel

                var header = worksheet.Cells["A1:N1"];
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection<TablaAsignacionUnidadesDTO>(asignacionUnidadesDTO, true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                //Guardado de Excel
                await js.GuardarComo($"AsignacionUnidades_{DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
                asignacionUnidadesDTO.Clear();
            }
            else
            {
                await swal.FireAsync("Alerta", "Debe tener datos filtrado para poder exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task AsignarTp(int code, ChangeEventArgs tp)
    {
        try
        {
            OrdenesTP ordentp = new OrdenesTP() { Cod = code, TP = (bool)tp.Value };
            var response = await repositorio.Put<OrdenesTP>($"api/pedido/tp", ordentp);

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                grid?.Reload();
                if (ordentp.TP)
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Orden asignada", Detail = "La orden ha sido asignada a TP." });
                else
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Orden desasignada", Detail = "La orden ha sido desasignada a TP." });
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task SendToSynthesis()
    {
        try
        {
            if (ordenesSeleccionada is not null)
            {
                if (ordenesSeleccionada.Count == 0)
                {
                    await swal.FireAsync("Alerta", "Selecciona alguna orden para enviar a synthesis", SweetAlertIcon.Warning);
                    return;
                }

                var confirm = await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar",
                    Text = "Tenga en cuenta que solo las ordenes con una unidad asignada seran enviadas.¬øDesea continuar?"
                });

                if (!string.IsNullOrEmpty(confirm.Value))
                {
                    Message(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Enviando Ordenes a Synthesis",
                        Detail = "Las ordenes se entan enviando a synthesis.\nPermanezca en esta pantalla hasta terminar el proceso.",
                        Duration = 15000
                    });

                    loadingSend = true;
                    List<OrdenEmbarque> NewOrdens = new List<OrdenEmbarque>();
                    var ordens = ordenesSeleccionada.Where(x => x!.Tonel != null)
                    .OrderBy(x => x.Fchpet)
                    .ThenBy(x => x!.Tonel!.Tracto)
                    // .ThenBy(x => x.Bin)
                    .ToList();
                    // Console.WriteLine(JsonConvert.SerializeObject(ordens));
                    // return;

                    foreach (var item in ordens)
                        if (!NewOrdens.Contains(item))
                            NewOrdens.Add(item);

                    updateData = true;
                    var response = await repositorio.Post<List<OrdenEmbarque>, bool>($"api/services/send", NewOrdens);
                    //var response = await repositorio.Post<List<OrdenEmbarque>>($"api/services/simulacion/synthesis", ordens);

                    if (response.Error)
                    {
                        updateData = false;
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        ordenesSeleccionada = new List<OrdenEmbarque>();
                    }
                    else
                    {
                        loadingSend = false;
                        await swal.FireAsync("Exito", "Las ordenes fueron enviadas a synthesis.", SweetAlertIcon.Success);
                        ordenes = ordenes.Where(x => x.Tonel is null && x.Chofer is null).ToList();
                        ordenesSeleccionada = new List<OrdenEmbarque>();
                        Synthesis = false;
                        updateData = false;
                        //ordenes = new List<OrdenEmbarque>();
                    }
                }
            }
            else
            {
                updateData = false;
                loadingSend = false;
                ordenesSeleccionada = new List<OrdenEmbarque>();
                await swal.FireAsync("Alerta", "Debe de tener ordenes seleccionadas para poder enviar a synthesis", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            updateData = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void ToggleCheck(bool args, OrdenEmbarque orden)
    {
        try
        {
            if (args)
                ordenesSeleccionada.Add(orden);
            else
                ordenesSeleccionada.Remove(orden);

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void SetOrden(OrdenEmbarque orden)
    {
        try
        {
            ordenEmbarque = orden;

            await grid!.SelectRow(orden);
            //await dpT.FocusAsync();
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingsAsignacion", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingsAsignacion");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CancelOrden(OrdenEmbarque orden)
    {
        try
        {
            var confirm = await swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¬øDesea cancelar la orden?"
            });

            if (!string.IsNullOrEmpty(confirm.Value))
            {
                var response = await repositorio.Delete($"api/pedido/cancel/{orden.Cod}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    // if (ordenes.Contains(orden))
                    var index = ordenes.IndexOf(orden);

                    ordenes.RemoveAt(index);

                    if (ordenesSeleccionada.Contains(orden))
                        ordenesSeleccionada.Remove(orden);

                    grid!.Reload();
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}