@page "/asignacion/unidades"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Programador")]

<h4><b>Programación de Equipos</b></h4>

<div class="col-12 mt-2">
    <div class="d-flex justify-content-center">
        <div class="col-12 mt-3">
            <div class="col-12 card">
                <div class="col-12 card-body">
                    <label><b>Mostrar ordenes:</b></label>
                    <div class="col-12 row">
                        <div class="col-4 mb-3">
                            <label>Del:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateInicio" />
                        </div>
                        <div class="col-4 mb-3">
                            <label>A:</label>
                            <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateFin" />
                        </div>
                        <div class="col-4 d-flex mt-1">
                            <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                                <i class="fa fa-solid fa-eye"></i> <b>Mostrar ordenes</b>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <label><b>Asignar unidades:</b></label>
            <div class="col card shadow-sm">
                <div class="col-12 card-body">
                    <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                        <div class="row mb-3">
                            <div class="col">
                                <label>Transportista:</label>
                                <InputSelect class="form-select col-12" @bind-Value="ordenEmbarque?.Tonel?.Transportista.Cod" onchange="@GetDataSelction()">
                                    <input type="text" />
                                    <option>-- seleccione una opcion --</option>
                                    @if (Transportistas is null)
                                    {
                                        <option disabled>Cargando...</option>
                                    }
                                    else if (Transportistas.Count == 0)
                                    {
                                        <option disabled>No hay Transportistas</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Transportistas)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col">
                                <label>Chofer:</label>
                                <InputSelect class="form-select col-12" @bind-Value="ChoferSeleccionado">
                                    <option>-- seleccione una opcion --</option>
                                    @if (Choferes is null)
                                    {
                                        <option disabled>Cargando...</option>
                                    }
                                    else if (Choferes.Count == 0)
                                    {
                                        <option disabled>No hay Choferes</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Choferes)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col">
                                <label>Vehiculo:</label>
                                <InputSelect class="form-select col-12" @bind-Value="VehiculoSeleccionado">
                                    <option>-- seleccione una opcion --</option>
                                    @if (Vehiculos is null)
                                    {
                                        <option disabled>Cargando...</option>
                                    }
                                    else if (Vehiculos.Count == 0)
                                    {
                                        <option disabled>No hay vehiculos</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Vehiculos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="row d-flex justify-content-end">
                                <div class="col-8 row">
                                    @if (Vehiculos != null)
                                    {
                                        @if (Vehiculos.Count > 0 && VehiculoSeleccionado != 0)
                                        {
                                            <InputRadioGroup @bind-Value="CompartimentoSeleccionado">
                                                @for (int i = 1; i <= Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado)!.CapDisponible; i++)
                                                {
                                                    <div class="col">
                                                        <div class="form-check">
                                                            <InputRadio Value="@i" class="form-check-input" id="@i" />
                                                            <label class="form-check-label" for="@i">Com @i</label>
                                                        </div>
                                                    </div>
                                                }
                                            </InputRadioGroup>
                                        }
                                    }
                                </div>
                                <div class="col-4">
                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@AsignarUnidad"><i class="fa fa-solid fa-truck-front"></i> <b>Asignar</b></button>
                                </div>
                            </div>
                        </div>
                    </AuthorizeView>
                    <hr />
                    <div class="col-12 my-3">
                        <div class="row d-flex justify-content-end">
                            <div class="col-4">
                                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador">
                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel"><i class="fa fa-solid fa-file-excel"></i> <b>Exportar</b></button>
                                </AuthorizeView>
                            </div>
                            @*<div class="col-3">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@AsignarUnidad"><b>Enviar a TP</b></button>
                            </div>
                            <div class="col-3">
                            <button class="btn gcom-bg-rojo col-12 text-light" @onclick="@AsignarUnidad"><b>Desasignar a TP</b></button>
                            </div>*@
                            <div class="col-4">
                                <AuthorizeView Roles="Admin, Administrador Sistema, Programador">
                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@SendToSynthesis"><i class="fa fa-solid fa-paper-plane"></i> <b>Enviar a Syntesis</b></button>
                                </AuthorizeView>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-12 d-flex justify-content-center">
    <RadzenDataGrid TItem="OrdenEmbarque" Data="@ordenes" AllowColumnResize="true" AllowVirtualization="true" SelectionMode="DataGridSelectionMode.Multiple"
                    GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;" @bind-Value="ordenesSeleccionada" AllowRowSelectOnRowClick="false"
                    IsLoading="loadingFiltro" Density="Density.Default" @ref="@grid" AllowSorting="true">
        @*<EmptyTemplate>
        <NoHayRegistros></NoHayRegistros>
        </EmptyTemplate>*@
        <Columns>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Width="60px" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TriState="false" TValue="bool" Value="@(ordenes.Any(i => ordenesSeleccionada != null && ordenesSeleccionada.Contains(i)))"
                                    Change="@(args => ordenesSeleccionada = args ? ordenes.ToList() : new List<OrdenEmbarque>())" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TriState="false" Value="@(ordenesSeleccionada.Contains(data))"
                                    TValue="bool" Change="@((bool args) => ToggleCheck(args, data))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Asignar" Filterable="false" Width="80px" Sortable="false">
                <Template Context="data">
                    <div class="col-12">
                        <button class="btn btn-primary col-12" @onclick="@SetOrden">
                            <i class="fa fa-solid fa-pen-to-square"></i>
                        </button>
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Orden de compra" Property="OrdenEmbarque.OrdenCompra.den" Width="200px" Frozen="true" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Cliente" Property="Destino.Cliente.Den" Width="200px" Frozen="true" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Destino" Property="Destino.Den" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Producto" Property="Producto.Den" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Volumen" Width="200px" MinWidth="200px">
                <Template Context="data">
                    <div class="col-12">
                        @(data?.Compartment == 1 ? data?.Tonel?.Capcom
                            : data?.Compartment == 2 ? data?.Tonel?.Capcom2
                            : data?.Compartment == 3 ? data?.Tonel?.Capcom3
                            : data?.Compartment == 4 ? data?.Tonel?.Capcom4
                            : data?.Vol)
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Fecha de carga" Property="OrdenEmbarque.Fchcar" FormatString="{0:d}" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Transportista" Property="OrdenEmbarque.Tonel.Transportista.Den" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Unidad" Width="200px" MinWidth="200px">
                <Template Context="data">
                    <div class="col-12">
                        @data?.Tonel?.Tracto @data?.Tonel?.Placa
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Compartimiento" Property="OrdenEmbarque.Compartment" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Operador" Width="200px" MinWidth="200px">
                <Template Context="data">
                    <div class="col-12">
                        @data?.Chofer?.Den @data?.Chofer?.Shortden
                    </div>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Bin" Property="OrdenEmbarque.Bin" Width="200px" MinWidth="200px" />
            <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Estatus" Property="OrdenEmbarque.Estado.den" Width="200px" MinWidth="200px" />
            @*<RadzenDataGridColumn TItem="OrdenEmbarque" Title="SIMSA TRANSPORTE" Width="200px" MinWidth="200px">
            <Template Context="data">
            <div class="col-12">
            <div class="form-check form-switch m-2">
            <input class="form-check-input" type="checkbox" role="switch" id="@data.Cod" checked="@data.Tp"
            @onchange="@((ChangeEventArgs e) => AsignarTp(data.Cod, e))">
            </div>
            </div>
            </Template>
            </RadzenDataGridColumn>*@
        </Columns>
    </RadzenDataGrid>
</div>

<style type="text/css" media="screen and (min-width:1100px)">
    .ancho {
        width: 1000px;
    }
</style>

<style type="text/css" media="screen and (min-width:1500px)">
    .ancho {
        width: 1500px;
    }
</style>
<style type="text/css" media="screen and (min-width:1400px)">
    .ancho {
        width: 1300px;
    }
</style>
@code {
    //grid
    private RadzenDataGrid<OrdenEmbarque>? grid = new RadzenDataGrid<OrdenEmbarque>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private IList<OrdenEmbarque> ordenes { get; set; } = new List<OrdenEmbarque>();
    private IList<OrdenEmbarque> ordenesSeleccionada { get; set; } = new List<OrdenEmbarque>();

    //Listas
    private List<CodDenDTO> Destinos { get; set; } = null!;
    private List<CodDenDTO> Productos { get; set; } = null!;

    private List<Transportista> Transportistas { get; set; } = null!;
    private List<CodDenDTO> Choferes { get; set; } = null!;
    private List<Tonel> Vehiculos { get; set; } = null!;

    //Selecciones
    private int ProductoSeleccionado = 0;
    private int DestinoSeleccionado = 0;
    private int TransportistaSeleccionado = 0;
    private int TransportistaSeleccionadoB = 0;

    private int ChoferSeleccionado = 0;
    private int ChoferSeleccionadoB = 0;

    private int VehiculoSeleccionado = 0;

    private int CompartimentoSeleccionado = 0;

    FechasF fechas = new FechasF();

    //loadings
    bool loadingFiltro = false;
    bool loadingEdit = false;
    bool loadginAsignar = false;
    bool loadingAgregar = false;
    bool loadingSend = false;
    //
    CheckChofer checkChofer = new CheckChofer();

    protected override async Task OnInitializedAsync()
    {
        await GetDestinos();
        await GetProductos();
        await GetTransportista();
    }

    public async Task GetDataSelction()
    {
        if (TransportistaSeleccionado != 0 && TransportistaSeleccionado != TransportistaSeleccionadoB)
        {
            VehiculoSeleccionado = 0;
            ChoferSeleccionado = 0;
            await GetChoferes();
            await GetVehiculo();
        }
    }
    public async Task GetDestinos()
    {
        var response = await repositorio.Get<List<CodDenDTO>>("api/destino");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Destinos = response.Response;
        }
    }
    public async Task GetProductos()
    {
        var response = await repositorio.Get<List<CodDenDTO>>("api/producto");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Productos = response.Response;
        }
    }
    public async Task GetTransportista()
    {
        var response = await repositorio.Get<List<Transportista>>("api/transportista");
        if (response.Error)
        {
            var responseHttp = await response.ObtenerMensajeError();
            await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
        }
        else
        {
            Transportistas = response.Response;
        }
    }
    public async Task GetChoferes()
    {
        try
        {
            string? busentid = Transportistas.FirstOrDefault(x => x.Cod == TransportistaSeleccionado).Busentid;
            var response = await repositorio.Get<List<CodDenDTO>>($"api/chofer/{busentid}");
            if (response.Error)
            {
                var repositorioHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", repositorioHttp, SweetAlertIcon.Error);
            }
            else
            {
                TransportistaSeleccionadoB = TransportistaSeleccionado;
                Choferes = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    public async Task GetVehiculo()
    {
        try
        {
            string? carid = Transportistas.FirstOrDefault(x => x.Cod == TransportistaSeleccionado).CarrId;
            var response = await repositorio.Get<List<Tonel>>($"api/vehiculo/{carid}");
            if (response.Error)
            {
                var repositorioHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", repositorioHttp, SweetAlertIcon.Error);
            }
            else
            {
                Vehiculos = response.Response;
                StateHasChanged();
                TransportistaSeleccionadoB = TransportistaSeleccionado;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    public async Task MostrarOrdenFecha()
    {
        try
        {
            loadingFiltro = true;
            StateHasChanged();

            var responseHttp = await repositorio.Post<FechasF, IList<OrdenEmbarque>>($"api/pedido/filtrar", fechas);

            if (responseHttp.Error)
            {
                loadingFiltro = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loadingFiltro = false;
                ordenes = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            loadingFiltro = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task AsignarUnidad()
    {
        try
        {
            if (ordenesSeleccionada.Count == 0)
            {
                await swal.FireAsync("Advertencia", "Selecciona una orden para asignar unidad", SweetAlertIcon.Warning);
            }
            else
            {
                checkChofer = new CheckChofer()
                    {
                        Chofer = ChoferSeleccionado,
                        Tonel = VehiculoSeleccionado,
                        Compartimento =
                                    (CompartimentoSeleccionado == 1) ? Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado)!.Idcom
                                    : (CompartimentoSeleccionado == 2) ? Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado)!.Idcom2
                                    : (CompartimentoSeleccionado == 3) ? Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado)!.Idcom3
                                    : Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado)!.Idcom4,
                        //: (VehiculoSeleccionado == 4) ? Vehiculos.FirstOrDefault(x => x.Cod == VehiculoSeleccionado).Idcom4,
                        FechaCarga = ordenesSeleccionada.FirstOrDefault()?.Fchcar
                    };
                var responseHttp = await repositorio.Post<CheckChofer, int>($"api/pedido/check/chofer", checkChofer);

                if (responseHttp.Error)
                {
                    var respuestaHttp = await responseHttp.ObtenerMensajeError();
                    await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
                }
                else
                {
                    if (responseHttp.Response == 0)
                    {
                        ordenesSeleccionada.FirstOrDefault()!.Codchf = checkChofer.Chofer;
                        ordenesSeleccionada.FirstOrDefault()!.Codton = checkChofer.Tonel;
                        ordenesSeleccionada.FirstOrDefault()!.Compartment = CompartimentoSeleccionado;
                        ordenesSeleccionada.FirstOrDefault()!.CompartmentId = checkChofer.Compartimento;

                        await UpdateOrden();
                    }
                    else
                    {
                        var confirm = await swal.FireAsync(new SweetAlertOptions
                            {
                                Icon = SweetAlertIcon.Warning,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Aceptar",
                                CancelButtonText = "Cancelar",
                                Text = "Este chofer y esta unidad ya estan asignados a una orden. ¿Desea asignarlos a esta orden?"
                            });

                        if (!string.IsNullOrEmpty(confirm.Value))
                        {
                            var response = await repositorio.Put<OrdenEmbarque>($"api/pedido/desasignar/{responseHttp.Response}", new OrdenEmbarque());

                            if (response.Error)
                            {
                                var message = await response.ObtenerMensajeError();
                                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                            }
                            else
                            {
                                ordenesSeleccionada.FirstOrDefault()!.Codchf = checkChofer.Chofer;
                                ordenesSeleccionada.FirstOrDefault()!.Codton = checkChofer.Tonel;
                                ordenesSeleccionada.FirstOrDefault()!.Compartment = CompartimentoSeleccionado;
                                ordenesSeleccionada.FirstOrDefault()!.CompartmentId = checkChofer.Compartimento;

                                await UpdateOrden();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task UpdateOrden()
    {
        loadingAgregar = true;
        try
        {
            var response = await repositorio.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido/update", ordenesSeleccionada.FirstOrDefault()!);
            if (response.Error)
            {
                loadingAgregar = false;
                string? message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingAgregar = false;
                if (response.Response == null)
                    return;

                var index = ordenes.IndexOf(ordenes.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                ordenes.RemoveAt(index);
                ordenes.Insert(index, response.Response);
                ns.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos actualizados.", Duration = 2000 });
                await grid!.Reload();
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GenerateExcel()
    {
        if (ordenes != null)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            var excel = new ExcelPackage();
            var worksheet = excel.Workbook.Worksheets.Add("Asignacion de Unidades");
            worksheet.Columns.Width = 60;
            worksheet.Columns.AutoFit();

            //Formación de Excel
            var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
            from o in ordenes
            select new TablaAsignacionUnidadesDTO()
                {
                    OrdenCompra = o?.OrdenCompra?.den,
                    Referencia = o?.Folio.ToString(),
                    Cliente = o?.Destino?.Cliente?.Den,
                    Destino = o?.Destino?.Den,
                    Producto = o?.Producto?.Den,
                    Volumen = o?.Vol,
                    FechaCarga = o?.Fchcar!.Value.ToString("dd/MM/yyyy"),
                    Transportista = o?.Tonel?.Transportista?.Den,
                    Unidad = o?.Tonel?.Veh,
                    Compartimento = o?.Compartment,
                    Operador = o?.Chofer?.Den,
                    Bin = o?.Bin,
                    Status = o?.Estado?.den
                }, true);

            tablebody.Style.Font.Bold = true;
            tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            var header = worksheet.Cells["A1:M1"];
            header.Style.Fill.PatternType = ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
            //Guardado de Excel
            await js.GuardarComo($"AsignacionUnidades_{DateTime.Today.ToString("dd/MM/yyyy")}.xlsx", excel.GetAsByteArray());
        }
        else
        {
            await swal.FireAsync("Alerta", "Debe tener datos filtrador para poder exportar", SweetAlertIcon.Warning);
        }
    }

    private async Task AsignarTp(int code, ChangeEventArgs tp)
    {
        try
        {
            OrdenesTP ordentp = new OrdenesTP() { Cod = code, TP = (bool)tp.Value };
            var response = await repositorio.Put<OrdenesTP>($"api/pedido/tp", ordentp);

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                grid?.Reload();
                if (ordentp.TP)
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Orden asignada", Detail = "La orden ha sido asignada a TP." });
                else
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Orden desasignada", Detail = "La orden ha sido desasignada a TP." });
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task SendToSynthesis()
    {
        try
        {
            if (ordenes is not null || ordenes.Count == 0)
            {
                var confirm = await swal.FireAsync(new SweetAlertOptions
                    {
                        Icon = SweetAlertIcon.Info,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Aceptar",
                        CancelButtonText = "Cancelar",
                        Text = "Tenga en cuenta que solo las ordenes con una unidad asignada seran enviadas.¿Desea continuar?"
                    });

                if (!string.IsNullOrEmpty(confirm.Value))
                {
                    Message(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Actualizando Transportistas",
                            Detail = "Las ordenes se entan enviando a synthesis.\nPermanesca en esta pantalla hasta terminar el proceso.",
                            Duration = 15000
                        });

                    loadingSend = true;

                    var ordens = ordenes.Where(x => x!.Tonel != null).ToList();

                    var response = await repositorio.Post<List<OrdenEmbarque>, bool>($"api/services/send", ordens);

                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingSend = false;
                        await swal.FireAsync("Exito", "Las ordenes fueron enviadas a synthesis.", SweetAlertIcon.Success);

                        ordenes = new List<OrdenEmbarque>();
                    }
                }
            }
            else
            {
                loadingSend = false;
                await swal.FireAsync("Alerta", "Debe de tener ordenes para poder enviar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void ToggleCheck(bool args, OrdenEmbarque orden)
    {
        try
        {
            Console.WriteLine("cambio");
            if (args)
                ordenesSeleccionada.Add(orden);
            else
                ordenesSeleccionada.Remove(orden);

            Console.WriteLine(ordenesSeleccionada.Count);
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void SetOrden(OrdenEmbarque orden)
    {
        try
        {
            ordenEmbarque = orden;
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}