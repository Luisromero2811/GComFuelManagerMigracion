@inject SweetAlertService Swal
@inject IRepositorio http
@inject DialogService ds

<div class="col-12">
    <div class="col-12 row">
        <div class="col-4">
            <p>Ordenes a crear: </p>
        </div>
        <div class="col-4">
            <input type="number" class="col-12 form-control form-control-sm" @bind="ordenEmbarque.Ordenes_A_Crear"/>
        </div>
        <div class="col-4">
            <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@Crear_Ordenes">
                Crear ordenes
                @if (Loading_Creacion_Orden)
                {
                    <SpinnerLoading/>
                }
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter] public OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();

    private bool Loading_Creacion_Orden = false;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task Crear_Ordenes()
    {
        try
        {
            Loading_Creacion_Orden = true;
            var responseHttp = await http.Post<OrdenEmbarque>($"api/pedido/filtrar", ordenEmbarque);
            if (responseHttp.Error)
            {
                Loading_Creacion_Orden = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                Loading_Creacion_Orden = false;
                ds.Close(true);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
