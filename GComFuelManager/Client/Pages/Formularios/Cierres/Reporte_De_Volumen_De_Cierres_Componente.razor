@page "/reporte/cierres/volumen"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@inject DialogService ds
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial")]

<h4>Reporte de volumen de cierres</h4>
<div class="col-12 card shadow-sm">
    <div class="col-12 card-body">
        <label><b>Mostrar cierres:</b></label>
        <div class="row col-12">
            <div class="col-4">
                <div class="col-12">
                    <label class="form-label">Del:</label>
                    <InputDate class="form-control" @bind-Value="folio_Activo_Vigente.ID_FchIni" @bind-Value:format="yyyy-MM-dd" Type="InputDateType.DateTimeLocal" />
                </div>
            </div>
            <div class="col-4">
                <div class="form-outline">
                    <label class="form-label">Al:</label>
                    <InputDate class="form-control" @bind-Value="folio_Activo_Vigente.ID_FchFin" @bind-Value:format="yyyy-MM-dd" Type="InputDateType.DateTimeLocal" />
                </div>
            </div>
            <div class="col-2">
                <div class="mt-2">
                    <label></label>
                    <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@Obtener_VolumenFecha">
                        <i class="fa fa-solid fa-magnifying-glass"></i> Mostrar por fecha
                    </button>
                </div>
            </div>
        </div>
        <div class="row col-12">
            <div class="col-3">
                <div class="col-12">
                    <label>Grupo</label>
                    <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="folio_Activo_Vigente.ID_Grupo"
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowVirtualization="true" Change="@GetClientes" style="height:31px;">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as Grupo)?.Den)
                            </RadzenText>
                        </Template>
                        <ValueTemplate Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as Grupo)?.Den)
                            </RadzenText>
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </div>
            <div class="col-3">
                <div class="col-12">
                    <label>Cliente</label>
                    <RadzenDropDown Data="Clientes" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="folio_Activo_Vigente.ID_Cliente"
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowVirtualization="true" Change="@GetEstaciones" style="height:31px;">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as CodDenDTO)?.Den)
                            </RadzenText>
                        </Template>
                        <ValueTemplate Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as CodDenDTO)?.Den)
                            </RadzenText>
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </div>
            <div class="col-3">
                <div class="col-12">
                    <label>Estacion</label>
                    <RadzenDropDown Data="Estaciones" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="folio_Activo_Vigente.ID_Destino"
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder=""
                                    AllowVirtualization="true" style="height:31px;">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as CodDenDTO)?.Den)
                            </RadzenText>
                        </Template>
                        <ValueTemplate Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @((data as CodDenDTO)?.Den)
                            </RadzenText>
                        </ValueTemplate>
                    </RadzenDropDown>
                </div>
            </div>
            <div class="col-3">
                <label>Productos:</label>
                <InputSelect @bind-Value="folio_Activo_Vigente.ID_Producto" class="form-select col-12 form-select-sm">
                    <option value="0">-- Selecciona un producto --</option>
                    @if (Productos is null)
                    {
                        <option disabled> Cargando ...</option>
                    }
                    else if (Productos.Count == 0)
                    {
                        <option disabled> No hay productos </option>
                    }
                    else
                    {
                        foreach (var item in Productos)
                        {
                            <option value="@item.Cod">@item.Den</option>
                        }
                    }
                </InputSelect>
            </div>
            @*<div class="col-12 row mt-2 d-flex justify-content-center">
                <div class="col-6">
                    <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@Obtener_Volumen">
                        <i class="fa fa-solid fa-magnifying-glass"></i> Filtrar
                    </button>
                </div>
                <div class="col-6">
                    <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@(()=>folio_Activo_Vigente = new Folio_Activo_Vigente())">
                        <i class="fa fa-solid fa-broom"></i> Limpiar formulario
                    </button>
                </div>
            </div>*@
        </div>
        <div class="col-12 row mt-2 d-flex justify-content-center">
            <div class="col-4">
                <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@Obtener_Volumen">
                    <i class="fa fa-solid fa-magnifying-glass"></i> Filtrar
                </button>
            </div>
            <div class="col-4">
                <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@(()=>folio_Activo_Vigente = new Folio_Activo_Vigente())">
                    <i class="fa fa-solid fa-broom"></i> Limpiar formulario
                </button>
            </div>
        </div>
    </div>
</div>

@if (productoVolumens is not null || productoVolumens?.Count > 0)
{
    <VolumenesPedido volumenes="folio_Activo_Vigente_Response.ProductoVolumenes" />
}

<div class="col-12 card">
    <div class="card-header col-12">
        <div class="col-12 row">
            <div class="col-2">
                <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@(()=>Mostrar_Detalle = !Mostrar_Detalle)">
                    <i class="fa fa-solid fa-eye"></i> Mostrar historial de cierres
                </button>
            </div>
            @*<div class="col" style="font-size:12px;">
                    <p> Mostrar detalle</p>
                </div>*@
            <div class="col-1">
                <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@ClearFormData">
                    <i class="fa fa-solid fa-broom"></i> Limpiar
                </button>
            </div>
            <div class="col-2 offset-7">
                <button class="btn btn-sm gcom-bg-amarillo col-12" @onclick="@ExportarCierre">
                    <i class="fa fa-solid fa-file-excel"></i>
                    Exportar datos
                </button>
            </div>
        </div>
    </div>
    @if (Mostrar_Detalle)
    {
        <div class="ancho">
            <RadzenDataGrid TItem="OrdenCierre" Data="@folio_Activo_Vigente_Response.OrdenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                            GridLines="DataGridGridLines.Both" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Density="Density.Default"
                            Culture="CultureInfo.CurrentCulture" AllowSorting="true" AllowFiltering="true" AllowColumnPicking="true">
                <Columns>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha" Property="FchCierre" FormatString="{0:dd/MM/yyyy}" Filterable="false" Width="180px">
                        <Template Context="item">
                            <p>
                                @(item.FchCierre?.ToString("dd/MM/yyyy"))
                            </p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio del cierre / OC" Property="Folio" Filterable="false" Width="180px;" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Grupo" Property="Grupo.Den" FilterValue="GruposSeleccionado" Filterable="true" Width="180px;">
                        <FilterTemplate>
                            <RadzenDropDown Data="GroupList" @bind-Value="GruposSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                        </FilterTemplate>
                        <Template Context="data">
                            @(data.Grupo is not null ? data.Grupo.Den : "Sin Grupo")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Cliente" Property="Cliente.Den" Filterable="true" FilterValue="ClientesSeleccionados" Width="180px;">
                        <FilterTemplate>
                            <RadzenDropDown Data="ClienteList" @bind-Value="ClientesSeleccionados" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                        </FilterTemplate>
                        <Template Context="data">
                            @(data.Cliente is not null ? data.Cliente.Den : "Sin clientes")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="Destino.Den" Filterable="true" FilterValue="DestinosSeleccionado" Width="180px;">
                        <FilterTemplate>
                            <RadzenDropDown Data="DestinoList" @bind-Value="DestinosSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                        </FilterTemplate>
                        <Template Context="data">
                            @(data.Destino is not null ? data.Destino.Den : "Sin destino")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="Producto.Den" Filterable="true" FilterValue="ProductoSeleccionado" Width="180px;">
                        <FilterTemplate>
                            <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                        </FilterTemplate>
                        <Template Context="data">
                            <div class="col-12 row">
                                <div class="col-1">
                                    @if (data?.Producto?.Cod == 25 || data?.Producto?.Cod == 26 || data?.Producto?.Cod == 27)
                                    {
                                        <div class="badge rounded-pill regular">&nbsp;</div>
                                    }
                                    else if (data?.Producto?.Cod == 11 || data?.Producto?.Cod == 12 || data?.Producto?.Cod == 116)
                                    {
                                        <div class="badge rounded-pill regular-vdm">&nbsp;</div>
                                    }
                                    else if (data?.Producto?.Cod == 19 || data?.Producto?.Cod == 20 || data?.Producto?.Cod == 21)
                                    {
                                        <div class="badge rounded-pill premium">&nbsp;</div>
                                    }
                                    else
                                    {
                                        <div class="badge rounded-pill diesel">&nbsp;</div>
                                    }
                                </div>
                                <div class="col-11">
                                    @data?.Producto?.Den
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="100px" FormatString="{0:N2}" Filterable="false" Property="Volumenes" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="PrecioFormateado" Filterable="false" Width="90px" />
                    <!--Aplicar Fecha de Vencimiento-->
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Vencimiento" FormatString="{0:dd/MM/yyyy}" Filterable="false" Width="100px">
                        <Template Context="item">
                            <div class="col-12">
                                <p> @item.FchVencimiento?.ToString("dd/MM/yyyy") </p>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    @*Cargado - Pendiente de carga - Disponible*@
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Cargado" Property="ConsumidoFormateado" FormatString="{0:N2}" Filterable="false" Width="140px"/>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Programado" Property="VolumenProgramadoFormateado" FormatString="{0:N2}" Filterable="false" Width="140px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Espera de Carga" Property="VolumenEsperaFormateada" FormatString="{0:N2}" Filterable="false" Width="140px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Disponible" Width="100px" FormatString="{0:N2}" Filterable="false" Property="DisponibleFormateado" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Property="Observaciones" Filterable="false" Width="250px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Estado de Pedido" Property="Estado_Pedido" Filterable="false" Width="180px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Tipo de Venta" Property="TipoPago" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Ver ordenes" Filterable="false" Width="150px">
                        <Template Context="item">
                            <button class="col-12 btn gcom-bg-amarillo" type="button" @onclick="@(()=>OpenModal(item))">
                                <i class="fa-solid fa-eye"></i> Ver ordenes
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
</div>
<style>
    .ancho {
        width: @TotalWidth
    }
</style>
@code {
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre();
    private List<OrdenCierre> ordenCierr { get; set; } = new List<OrdenCierre>();
    private List<FolioCierreDTO> Folios { get; set; } = new List<FolioCierreDTO>();

    Folio_Activo_Vigente folio_Activo_Vigente { get; set; } = new Folio_Activo_Vigente();
    Folio_Activo_Vigente folio_Activo_Vigente_Response { get; set; } = new Folio_Activo_Vigente();

    List<ProductoVolumen> productoVolumens { get; set; } = new List<ProductoVolumen>();

    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<Precio> Precios { get; set; } = null!;
    private List<Producto> Productos { get; set; } = new List<Producto>();

    //Filtrados de tabla
    private string ClientesSeleccionados = string.Empty;
    private IEnumerable<string?> ClienteList { get; set; } = new List<string>();

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    private string GruposSeleccionado = string.Empty;
    private IEnumerable<string?> GroupList { get; set; } = new List<string>();

    private string DestinosSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private Int16? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;

    bool Loading_Volumen = false;
    bool Mostrar_Detalle = false;

    Dictionary<string, string> query = new Dictionary<string, string>();

    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;

    protected override async Task OnInitializedAsync()
    {
        await GetGrupos();
        await GetProductos();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);

            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";
        }
    }

    private void ClearFormData()
    {
        folio_Activo_Vigente_Response  = new Folio_Activo_Vigente();
    }

    private async Task ExportarCierre()
    {
        try
        {
            if (folio_Activo_Vigente != null)
            {
                var response = await repositorio.Post<Folio_Activo_Vigente, List<FolioCierreDTO>>($"api/excel/reporte/volumen/cierre", folio_Activo_Vigente_Response);
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    ExcelPackage.LicenseContext = LicenseContext.Commercial;
                    var excel = new ExcelPackage();
                    var ws = excel.Workbook.Worksheets.Add("Cierres");
                    ws.Columns.Width = 60;
                    ws.Columns.AutoFit();

                    var header = ws.Cells["A1:P1"];
                    var tablebody = ws.Cells["A1:A1"].LoadFromCollection(response.Response, true);
                    tablebody.Style.Font.Size = 12;
                    tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    tablebody.Style.Font.Bold = true;
                    header.Style.Font.Size = 14;

                    header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    header.Style.Font.Bold = true;

                    await js.GuardarComo($"CierresGrupalesPedidos_{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}.xlsx", excel.GetAsByteArray());
                }
            }
            else
            {
                await swal.FireAsync("Alerta", "Debe de tener datos filtrados para exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            if (folio_Activo_Vigente.ID_Cliente != null && ClienteSeleccionado != folio_Activo_Vigente.ID_Cliente)
            {
                var response = await repositorio.Get<List<CodDenDTO>>($"api/estacion/{folio_Activo_Vigente.ID_Cliente}");
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    Estaciones = response.Response;
                    ClienteSeleccionado = folio_Activo_Vigente.ID_Cliente;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (folio_Activo_Vigente.ID_Grupo != null && GrupoSeleccionado != folio_Activo_Vigente.ID_Grupo)
            {
                var response = await repositorio.Get<List<CodDenDTO>>($"api/cliente/{folio_Activo_Vigente.ID_Grupo}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = folio_Activo_Vigente.ID_Grupo;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetProductos()
    {
        try
        {
            var response = await repositorio.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task Obtener_Volumen()
    {
        try
        {
            // if (folio_Activo_Vigente.ID_Grupo is null || folio_Activo_Vigente.ID_Grupo == 0)
            //     return;

            Loading_Volumen = true;

            query = new Dictionary<string, string>();

            query["ID_Grupo"] = folio_Activo_Vigente.ID_Grupo.ToString() ?? string.Empty;
            query["ID_Cliente"] = folio_Activo_Vigente.ID_Cliente.ToString() ?? string.Empty;
            query["ID_Destino"] = folio_Activo_Vigente.ID_Destino.ToString() ?? string.Empty;
            query["ID_Producto"] = folio_Activo_Vigente.ID_Producto.ToString() ?? string.Empty;
            //query["ID_FchIni"] = folio_Activo_Vigente.ID_FchIni.ToString("MM/dd/yyyy") ?? string.Empty;
            //query["ID_FchFin"] = folio_Activo_Vigente.ID_FchFin.ToString("MM/dd/yyyy") ?? string.Empty;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var response = await repositorio.Get<Folio_Activo_Vigente>($"api/volumen/reporte?{uri}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                Loading_Volumen = false;
            }
            else
            {
                folio_Activo_Vigente_Response = response.Response;
                Loading_Volumen = false;

                ClienteList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Cliente?.Den).Select(x => x.Cliente?.Den)!;
                GroupList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Grupo?.Den).Select(x => x.Grupo?.Den)!;
                DestinoList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                ProductList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Volumen = false;
        }
    }

    public async Task Obtener_VolumenFecha()
    {
        try
        {
            Loading_Volumen = true;

            query = new Dictionary<string, string>();

            query["ID_FchIni"] = folio_Activo_Vigente.ID_FchIni.ToString("MM/dd/yyyy") ?? string.Empty;
            query["ID_FchFin"] = folio_Activo_Vigente.ID_FchFin.ToString("MM/dd/yyyy") ?? string.Empty;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var response = await repositorio.Get<Folio_Activo_Vigente>($"api/volumen/reportefecha?{uri}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                Loading_Volumen = false;
            }
            else
            {
                folio_Activo_Vigente_Response = response.Response;
                Loading_Volumen = false;

                ClienteList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Cliente?.Den).Select(x => x.Cliente?.Den)!;
                GroupList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Grupo?.Den).Select(x => x.Grupo?.Den)!;
                DestinoList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                ProductList = folio_Activo_Vigente_Response.OrdenCierres?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            Loading_Volumen = false;
        }
    }

    private async Task OpenModal(OrdenCierre cierre)
    {
        try
        {
            await ds.OpenAsync<DetalleCierreDialog>($"Orden {cierre.Folio}",
            new Dictionary<string, object>() { { "folio", cierre?.Folio ?? string.Empty }, { "ID_Cierre", cierre?.Cod ?? 0 } },
            new DialogOptions() { Height = "600px", Width = "85%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}

