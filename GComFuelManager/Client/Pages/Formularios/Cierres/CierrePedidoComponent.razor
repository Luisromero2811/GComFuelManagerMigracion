@page "/cerrar"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms
@inject DialogService ds

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Comprador, Direccion, Gerencia, Cierre Pedidos")]

<h3>Cerrar Pedidos</h3>

<div class="col-12 card shadow-sm">
    <div class="card-body">
        <h4>Rango de fecha</h4>
        <div class="col-12 row">
            <div class="col-4 mb-3">
                <label>Del:</label>
                <InputDate class="form-control col-12" Type="InputDateType.Date" @bind-Value:format="yyyy-MM-dd" @bind-Value="@fechas.FchInicio" />
            </div>
            <div class="col-4 mb-3">
                <label>A:</label>
                <InputDate class="form-control col-12" Type="InputDateType.Date" @bind-Value:format="yyyy-MM-dd" @bind-Value="@fechas.FchFin" />
            </div>
            <div class="col-4 d-flex mt-1">
                <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                    <i class="fa fa-solid fa-eye"></i> <b>Mostrar ordenes</b>
                </button>
            </div>
        </div>
        <hr />
        <div class="col-12">
            <div class="col-12">
                <label>Filtro clientes:</label>
                <RadzenDropDown @bind-Value="ClienteSeleccionado" Data="Clientes" Change="@ChangeCliente" AllowClear="true"/>
            </div>
            <RadzenDataList Data="@Cierres" Style="height:500px;overflow-y:scroll;" TItem="OrdenCierre">
                <Template Context="cierre">
                    <div class="col-12 row">
                        <div class="col-8">
                            <p><b>Folio: @cierre?.Folio</b></p>
                            @if (cierre.CodCte == null)
                            {

                            }
                            else
                            {
                                <p><b>Cliente: @cierre?.Cliente?.Den</b></p>
                            }
                            <p><b>Producto: @cierre?.Producto?.Den</b></p>
                            @if (cierre?.VolumenDisponible?.Productos.Count > 0)
                            {
                                <div class="col-12">
                                    <p><b>Total:</b> @cierre.VolumenDisponible?.Productos?.FirstOrDefault()?.Total?.ToString("N2")</p>
                                    <p><b class="text-success">Disponible:</b> @cierre.VolumenDisponible?.Productos?.FirstOrDefault()?.Disponible?.ToString("N2")</p>
                                    <p><b class="text-primary">En espera de carga:</b> @cierre.VolumenDisponible?.Productos?.FirstOrDefault()?.Congelado?.ToString("N2")</p>
                                    <p><b class="text-warning">Cargado:</b> @cierre.VolumenDisponible?.Productos?.FirstOrDefault()?.Consumido?.ToString("N2")</p>
                                    <p><b class="text-danger">Promedio de carga:</b> @cierre.VolumenDisponible?.Productos?.FirstOrDefault()?.PromedioCarga?.ToString("N2")</p>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <p><b>Total:</b> @cierre?.Volumenes</p>
                                </div>
                            }
                        </div>
                        <div class="col-4 d-flex row">
                            <AuthorizeView Roles="Admin, Administrador Sistema, Cierre Pedidos, Comprador" Context="ACCIONES">
                                <div class="col-6 my-auto">
                                    <button class="col-12 btn gcom-bg-amarillo" type="button" @onclick="@(()=>CloseOrden(cierre))">
                                        <i class="fa-solid fa-unlock"></i> Cerrar Orden
                                    </button>
                                </div>
                            </AuthorizeView>
                            <div class="col-6 my-auto">
                                <button class="col-12 btn gcom-bg-amarillo" type="button" @onclick="@(()=>OpenModal(cierre.Folio))">
                                    <i class="fa-solid fa-eye"></i> Ver Cargas de Orden
                                </button>
                            </div>
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        </div>
    </div>
</div>

@code {
    List<OrdenCierre> Cierres { get; set; } = new List<OrdenCierre>();
    List<OrdenCierre> CierresCompleta { get; set; } = new List<OrdenCierre>();
    OrdenCierre Cierre { get; set; } = new OrdenCierre();
    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();

    IEnumerable<string> Clientes { get; set; } = new List<string>();
    string ClienteSeleccionado { get; set; } = string.Empty;

    private async Task MostrarOrdenFecha()
    {
        try
        {
            var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/disponibles", fechas);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Cierres = response.Response;
                CierresCompleta = response.Response;
                if (Cierres.Count > 0)
                {
                    Clientes = Cierres.Where(x => x.Cliente != null).DistinctBy(x => x.Cliente.Den).Select(x => x.Cliente.Den);
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ChangeCliente()
    {
        try
        {
            if (string.IsNullOrEmpty(ClienteSeleccionado))
                Cierres = CierresCompleta;
            else
            {
                var CierresSinClienteNull = CierresCompleta.Where(x => x.Cliente != null).ToList();
                Cierres = CierresSinClienteNull.Where(x => x.Cliente.Den == ClienteSeleccionado).ToList();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {

            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CloseOrden(OrdenCierre orden)
    {
        try
        {
            var response = await http.Delete($"api/cierre/cerrar/orden/{orden.Cod}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                orden.Activa = false;
                await Swal.FireAsync("Exito", "El pedido ha sido cerrado", SweetAlertIcon.Success);
                await MostrarOrdenFecha();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task OpenModal(string folio)
    {
        try
        {
            await ds.OpenAsync<DetalleCierreDialog>($"Orden {folio}",
                    new Dictionary<string, object>() { { "folio", folio } },
                    new DialogOptions() { Height = "600px", Width = "85%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
