@page "/cierres"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms
@inject DialogService ds
@inject TooltipService ts
@inject OrdenCierreAdminValidation validation
@inject OrdenCierreClientValidation clientValidation
@inject AuthenticationStateProvider auth

@attribute [Authorize(Roles = "Administrador Sistema, Comprador")]

<AuthorizeView Roles="Administrador Sistema,Comprador" Context="VISTA">
    <Authorized>

        <h3><b>Cierre de Pedidos</b></h3>

        <AuthorizeView Roles="Administrador Sistema, Comprador" Context="FORMULARIO">
            <Authorized>
                <div class="col-12 d-flex justify-content-center mt-2">
                    <div class="col-12">
                        <div class="col-12 card shadow-sm">
                            <div class="col-12 card-body">
                                <div class="col-12 row">
                                    <div class="col-2">
                                        <h4><b>Crear cierre</b></h4>
                                    </div>
                                    <div class="col row d-flex justify-content-start">
                                        <RadzenStack Orientation="Orientation.Horizontal">
                                            <RadzenText Text="Precio Automático" />
                                            <RadzenSwitch @bind-Value="@ordenCierre.Precio_Manual" Change="@(()=>ChangePrecioType())" />
                                        </RadzenStack>
                                    </div>
                                </div>

                                <EditForm Model="ordenCierre" class="form col-12" OnValidSubmit="@GetFolio">
                                    <AuthorizeView Context="Validation" Roles="Comprador">
                                        <Authorized>
                                            <FluentValidationValidator Validator="clientValidation" />
                                        </Authorized>
                                    </AuthorizeView>
                                    <ValidationSummary />
                                    <div class="col-12 row">

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label>Fecha de creación de cierre</label>
                                                <RadzenDatePicker class="col-12" @bind-Value="ordenCierre.FchCierre" ShowTime="false" DateFormat="dd/MM/yyyy" />
                                            </div>
                                        </div>

                                        @*<div class="col-4 mb-1 d-flex">
                                                <div class="col-12 my-auto d-flex">
                                                    <RadzenCheckBox @bind-Value=@ordenCierre.IsCierreVolumen Name="CheckBox2" class="me-2" />
                                                    <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipCierreVolumen(infoIconVolumen))" @ref="infoIconVolumen">
                                                        <label for="CheckBox2">
                                                            Cierre por volumen
                                                            <i class="fa-solid fa-circle-info fa-xs"></i>
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>*@

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label>Destino (Estación)</label>
                                                <RadzenDropDown Data="Destino" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@GetPrecios"
                                                                AllowVirtualization="true" />
                                            </div>
                                        </div>
                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label>Producto</label>
                                                @if (ordenCierre.Precio_Manual)
                                                {
                                                    <RadzenDropDown Data="Precios" class="col-12" TextProperty="Producto.Den" ValueProperty="Producto.Cod" @bind-Value="ordenCierre.CodPrd"
                                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@ChangeProducto"
                                                                    AllowVirtualization="true">
                                                        <Template Context="data">
                                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                                            <RadzenBadge Variant="Variant.Outlined" Text="@((data as Precio)?.FchDia.ToShortDateString())" />
                                                        </Template>
                                                        <ValueTemplate Context="data">
                                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                                        </ValueTemplate>
                                                    </RadzenDropDown>
                                                }
                                                else
                                                {
                                                    <InputSelect @bind-Value="ordenCierre.CodPrd" class="form-select">
                                                        <option>-- Selecciona una opcion --</option>
                                                        @if (Productos is null)
                                                        {
                                                            <option disabled> Cargando ...</option>
                                                        }
                                                        else if (Productos.Count == 0)
                                                        {
                                                            <option disabled> No hay capacidades</option>
                                                        }
                                                        else
                                                        {
                                                            foreach (var item in Productos)
                                                            {
                                                                <option value="@item.Cod">@item.Den</option>
                                                            }
                                                        }
                                                    </InputSelect>
                                                }

                                            </div>
                                        </div>


                                        @if (!ordenCierre.IsDifferentVol)
                                        {
                                            <div class="col-2 mb-1">
                                                <div class="col-12">
                                                    <label>Volumen</label>

                                                    <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select">
                                                        <option>-- Selecciona una opcion --</option>
                                                        @if (Cantidades is null)
                                                        {
                                                            <option disabled> Cargando ...</option>
                                                        }
                                                        else if (Cantidades.Count == 0)
                                                        {
                                                            <option disabled> No hay capacidades</option>
                                                        }
                                                        else
                                                        {
                                                            foreach (var item in Cantidades)
                                                            {
                                                                <option value="@item">@item.ToString("N2")</option>
                                                            }
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                        }

                                        @if (ordenCierre.IsDifferentVol)
                                        {
                                            <div class="col-2 mb-1">
                                                <div class="col-12">
                                                    <label>Volumen</label>
                                                    <RadzenNumeric class="form-control col-12" @bind-Value="ordenCierre.Volumen" />
                                                </div>
                                            </div>
                                        }

                                        <div class="col-2 mb-1 d-flex">
                                            <div class="col-12 my-auto d-flex">
                                                <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentVol Name="CheckBox1" class="me-2" />
                                                <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipVolumen(infoCierreVolumen))" @ref="infoCierreVolumen">
                                                    <label for="CheckBox1">
                                                        Volumen Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                @if (ordenCierre.Precio_Manual)
                                                {
                                                    <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipPrecio(infoPrecio))" @ref="infoPrecio">
                                                        <label>
                                                            Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                                        </label>
                                                    </div>
                                                    <RadzenNumeric class="form-control col-12" @bind-Value="ordenCierre.Precio" Disabled="true" />
                                                }
                                                else
                                                {
                                                    <div class="col-12 row p-0">
                                                        <label>
                                                            Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                                        </label>
                                                    </div>
                                                    <InputNumber class="form-control col-12" @bind-Value="ordenCierre.Precio" TValue="double" MaxLenght="20" />
                                                }

                                            </div>
                                        </div>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label>Tipo de pago</label>
                                                <InputSelect @bind-Value="ordenCierre.TipoPago" class="form-select">
                                                    <option>-- Selecciona una opcion --</option>
                                                    @if (TpPago is null)
                                                    {
                                                        <option disabled> Cargando ...</option>
                                                    }
                                                    else if (TpPago.Count == 0)
                                                    {
                                                        <option disabled> No hay tipos de pago</option>
                                                    }
                                                    else
                                                    {
                                                        foreach (var item in TpPago)
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    }
                                                </InputSelect>
                                            </div>
                                        </div>

                                        @*<div class="col-4 mb-1">
                                                <div class="col-12">
                                                    <label @onmouseenter="@(args => ShowTooltip(infoIcon))" @ref="infoIcon">
                                                        Folio <i class="fa-solid fa-circle-info fa-xs"></i>
                                                    </label>
                                                    <div class="col-12">
                                                        <RadzenTextBox class="form-control col-12 disabled" @bind-Value="ordenCierre.Folio" Disabled="true" />
                                                    </div>
                                                </div>
                                            </div>*@

                                        <div class="col-12 mb-1">
                                            <div class="col-12">
                                                <label>Observaciones</label>
                                                <RadzenTextArea class="form-control col-12" Placeholder="Maximo 250 caracteres" @bind-Value="ordenCierre.Observaciones" MaxLength="250" />
                                            </div>
                                        </div>

                                        <div class="col-12 d-flex justify-content-center mt-3">
                                            <div class="col-3 mx-2">
                                                <button class="btn gcom-bg-amarillo col-12" type="submit">
                                                    <i class="fa fa-solid fa-plus"></i>
                                                    <b>Crear cierre</b>
                                                    @*@if (loadingCreate)
                                                        {
                                                            <SpinnerLoading></SpinnerLoading>
                                                        }*@
                                                </button>
                                            </div>
                                            <div class="col-3 mx-2">
                                                <button class="btn gcom-bg-amarillo col-12" type="button" @onclick="@SendEmail">
                                                    <i class="fa fa-solid fa-envelope"></i>
                                                    <b>Enviar cierre</b>
                                                    @if (loadingSend)
                                                    {
                                                        <SpinnerLoading></SpinnerLoading>
                                                    }
                                                </button>
                                            </div>
                                            <div class="col-3 mx-2">
                                                <button class="btn gcom-bg-amarillo col-12" type="button" @onclick="@(()=> ClearForm())">
                                                    <i class="fa fa-solid fa-broom"></i>
                                                    <b>Limpiar formulario</b>
                                                </button>
                                            </div>
                                        </div>
                                    </div>

                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>


        <div class="col-12 d-flex justify-content-center row">
            <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                            GridLines="DataGridGridLines.Both" class="rz-my-2 ancho" Style="height:600px;" ColumnWidth="200px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            IsLoading="loading" @ref="@grid" AllowSorting="true" AllowFiltering="true" Culture="CultureInfo.CurrentCulture" AllowColumnPicking="true"
                            @bind-Settings="@Settings" PageSizeOptions="@pageSizeOptions">
                <Columns>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Cancelar Pedido" Filterable="false" Frozen="true" Width="110px">
                        <Template Context="data">
                            @if (data.Activa is true)
                            {
                                <div class="col-12">
                                    <button class="col-6 btn gcom-bg-amarillo" type="button" @onclick="(()=>CloseOrden(data))">
                                        <i class="fa fa-solid fa-unlock"></i>
                                    </button>
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de creación de cierre" Property="FchCierre" FormatString="{0:d}" Filterable="false" Frozen="true" Width="140px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de vencimiento" Property="FchVencimiento" FormatString="{0:d}" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio de cierre" Property="Folio" Filterable="false" Width="120px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino (Estación)" Property="Destino.Den" FilterValue="DestinosSeleccionado" Filterable="true">
                        <FilterTemplate Context="Destinos">
                            <RadzenDropDown Data="DestinoList" @bind-Value="DestinosSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                <ValueTemplate Context="data">
                                    <InputText class="form-control col-12" @bind-Value="DestinosSeleccionado" MaxLength="190" />
                                </ValueTemplate>
                            </RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div>
                                @data?.Destino?.Den
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto Seleccionado" FilterValue="ProductoSeleccionado" Property="Producto.Den" Filterable="true">
                        <FilterTemplate>
                            <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                                <ValueTemplate Context="data">
                                    <InputText class="form-control col-12" @bind-Value="ProductoSeleccionado" MaxLength="190" />
                                </ValueTemplate>
                            </RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div class="col-12 d-flex">
                                <div class="col-1">
                                    @if (data.Producto.Cod == 25 || data.Producto.Cod == 26 || data.Producto.Cod == 27)
                                    {
                                        <div class="badge rounded-pill regular me-1">&nbsp;</div>
                                    }
                                    else if (data.Producto.Cod == 11 || data.Producto.Cod == 12 || data.Producto.Cod == 116)
                                    {
                                        <div class="badge rounded-pill regular-vdm me-1">&nbsp;</div>
                                    }
                                    else if (data.Producto.Cod == 19 || data.Producto.Cod == 20 || data.Producto.Cod == 21)
                                    {
                                        <div class="badge rounded-pill premium me-1">&nbsp;</div>
                                    }
                                    else
                                    {
                                        <div class="badge rounded-pill diesel me-1">&nbsp;</div>
                                    }
                                </div>
                                <div class="col-11">
                                    @data.Producto?.Den
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="Precio" Filterable="false" Width="90px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="130px" FormatString="{0:N2}" Filterable="false">
                        <Template Context="item">
                            <div class="col-12">
                                @string.Format("{0:N2}",
                                item?.OrdenEmbarque?.Orden is not null ? item?.OrdenEmbarque?.Orden?.Vol :
                                item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom
                                : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom2
                                : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom3
                                : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom4
                                : item?.Volumen
                                )
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Tipo de venta" Property="TipoVenta" Filterable="false" Width="140px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Cliente" Property="Cliente.Den" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Vendedor" Property="Vendedor" Visible="!IsClient" Filterable="false" Width="140px" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Property="Observaciones" Filterable="false" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </Authorized>
</AuthorizeView>

<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {
    //Fules por producto
    List<OrdenCierre>? cierres { get; set; }
    private int? FullesRestantes { get; set; } = 0;

    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();
    CierreFiltroDTO fchVencimiento { get; set; } = new CierreFiltroDTO();
    CierreFiltroDTO fchCaducidad { get; set; } = new CierreFiltroDTO();

    UsuarioInfo user { get; set; } = new UsuarioInfo();

    OrdenCierre ordenCierre { get; set; } = new OrdenCierre();
    List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    private List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    private List<CodDenDTO> ClientesFiltro { get; set; } = new List<CodDenDTO>();

    private Cliente Cliente { get; set; } = new Cliente();

    private int? clienteSeleccioado { get; set; }

    private List<CodDenDTO> Destino { get; set; } = new List<CodDenDTO>();

    private List<Producto> Productos { get; set; } = new List<Producto>();

    private List<CodDenDTO> meses { get; set; } = new List<CodDenDTO>();
    private int mesSeleccionado { get; set; } = 0;

    private List<int> años { get; set; } = new List<int>();
    private int añoSeleccionado { get; set; } = 0;

    private List<int> Cantidades { get; set; } = new List<int>();

    private List<string> TpPago { get; set; } = new List<string> { "Credito", "Contado", "Contraentrga" };

    private List<Precio> Precios { get; set; } = new List<Precio>();

    Contacto Contacto { get; set; } = new Contacto();
    IEnumerable<Contacto> Contactos = new List<Contacto>();

    private IEnumerable<Grupo> Grupos { get; set; } = new List<Grupo>();
    private short? GrupoSeleccionadoB = 0;

    private short? GrupoSeleccionado = 0;
    private short GrupoSeleccionadoFiltro = 0;
    private int ClienteSeleccionado = 0;
    private int? DestinoSeleccionado = 0;
    private int? VolumenTotal = 0;
    private byte? CodProductoSeleccionado = 0;

    private string DestinosSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    bool loading = false;
    bool isEdit = false;
    bool loadingCreate = false;
    bool loadingFilter = false;
    bool isFilter = false;
    bool loadingExport = false;
    bool loadingSend = false;
    bool IsClient = false;
    bool IsDifferentVol = false;
    bool loadingEdit = false;
    bool sameOrder = false;
    bool monthFilter = false;
    bool AddDaysExpiration = false;
    bool AddMargen = false;
    bool IsCierreVolumen = false;

    int count = 0;

    ElementReference infoIcon;
    ElementReference infoIconVolumen;
    ElementReference infoCierreVolumen;
    ElementReference infoPrecio;

    int width = 0;
    string TotalWidth = string.Empty;

    private FluentValidationValidator? _fluentValidationValidator;

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    private ClaimsPrincipal User { get; set; } = null!;

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    bool isClose = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);
            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";

            await GetDestinoComprador();
            await GetCantidades();
            await GetProductos();

            var authState = await auth.GetAuthenticationStateAsync();
            if (authState is not null)
                User = authState.User;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null!) =>
    ts.Open(elementReference, "El Folio se llenara automaticamente al crear el cierre.", options);
    void ShowTooltipVolumen(ElementReference elementReference, TooltipOptions options = null!) =>
    ts.Open(elementReference, "Introduzca una cantidad diferente.", options);
    void ShowTooltipPrecio(ElementReference elementReference, TooltipOptions options = null!) =>
    ts.Open(elementReference, "El precio se llenara automaticamente al seleccionar el producto.", options);
    //void ShowTooltipCierreVolumen(ElementReference elementReference, TooltipOptions options = null!) =>
    //ts.Open(elementReference, "Seleccione para realizar un cierre por volumen.", options);

    private async Task ChangePrecioType()
    {
        try
        {
            if (ordenCierre.CodPrd != null)
            {
                if (Precios.Any(x => x.Producto?.Cod != ordenCierre.CodPrd))
                {
                    ordenCierre.CodPrd = Precios.FirstOrDefault()?.Producto?.Cod;
                }
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Productos = response.Response;
                ProductList = response.Response.DistinctBy(x => x.Den).Select(x => x.Den)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CreateCierre()
    {
        try
        {
            loadingCreate = true;
            isFilter = false;

            //if (ordenCierre.IsCierreVolumen)
            //{
            foreach (var item in Precios)
            {
                if (item.PrecioOverDate)
                    if (ordenCierre.Precio == item.Pre)
                        ordenCierre.PrecioOverDate = true;
                if (ordenCierre.Precio == item.Pre)
                    ordenCierre.ID_Moneda = item.ID_Moneda;
            }
            var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/cierrefolio", ordenCierre);
            if (responseOC.Error)
            {
                loadingCreate = false;
                var message = await responseOC.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var orden = responseOC.Response;

                OrdenPedido ordenPedido = new OrdenPedido();
                ordenPedido.CodPed = ordenCierre.CodPed;
                ordenPedido.Folio = ordenCierre.Folio;

                var responseOP = await http.Post<OrdenPedido>($"api/cierre/orden/add", ordenPedido);
                if (responseOP.Error)
                {
                    var message = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierres.Add(responseOC.Response);
                    await grid.Reload();
                    count++;
                }

                //loadingCreate = false;
                //ordenCierres.Add(responseOC.Response);
                //await grid.Reload();
            }
        }
        //    else
        //{
        //var responseBIN = await http.Get<int>("api/pedido/binNumber");
        //if (responseBIN.Error)
        //{
        //    loadingCreate = false;
        //    var message = await responseBIN.ObtenerMensajeError();
        //    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
        //}
        //else
        //{
        //    var bin = responseBIN.Response;
        //    OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
        //    {
        //        Codprd = ordenCierre.CodPrd,
        //        Pre = ordenCierre.Precio,
        //        Vol = ordenCierre.Volumen,
        //        Coddes = ordenCierre.CodDes,
        //        Fchpet = DateTime.Now,
        //        Bin = ordenCierres.Count == 0 ? ++bin : ordenCierres.Count % 2 != 0 ? ++bin : bin
        //    };
        //    foreach (var item in Precios)
        //    {
        //        if (item.PrecioOverDate)
        //            if (ordenCierre.Precio == item.Pre)
        //                ordenCierre.PrecioOverDate = true;
        //    }
        @*var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                    if (response.Error)
                    {
                        loadingCreate = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        ordenCierre.CodPed = response.Response.Cod;
                        var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre", ordenCierre);
                        if (responseOC.Error)
                        {
                            loadingCreate = false;
                            var message = await responseOC.ObtenerMensajeError();
                            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        }
                        else
                        {
                            loadingCreate = false;
                            ordenCierres.Add(responseOC.Response);
                            await grid.Reload();
                        }
                    }
                }
                //}
            }*@
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void cancelEdit()
    {
        isEdit = false;
        ordenCierre = new OrdenCierre();
    }

    private async Task CloseOrden(OrdenCierre orden)
    {
        try
        {
            var response = await http.Delete($"api/cierre/cerrar/orden/{orden.Cod}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                orden.Activa = false;
                await Swal.FireAsync("Exito", "El pedido ha sido cancelado", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task UpateOrden()
    {
        try
        {
            loadingCreate = true;

            var responseEM = await http.Put<OrdenCierre>($"api/pedido/cierre/update/{ordenCierre.CodPed}", ordenCierre);
            if (responseEM.Error)
            {
                loadingCreate = false;
                var message = await responseEM.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
                if (response.Error)
                {
                    loadingCreate = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingCreate = false;
                    var index = ordenCierres.IndexOf(ordenCierres.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                    ordenCierres.RemoveAt(index);
                    ordenCierres.Insert(index, response.Response);
                    ms.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos del cierre {ordenCierre.Folio} actualizados.", Duration = 1500 });
                    await grid.Reload();
                    cancelEdit();
                }
            }
        }
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task GetYears()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cierre/years");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void ClearForm()
    {
        ordenCierre = new OrdenCierre();
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (ordenCierres != null)
            {
                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 65;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:R1"];

                var ordenFilter = new List<OrdenCierre>();
                foreach (var item in ordenCierres)
                    if ((item.Producto!.Den == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                       && (item.Destino!.Den == DestinosSeleccionado || string.IsNullOrEmpty(DestinosSeleccionado)))
                        ordenFilter.Add(item);

                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<OrdenCierre>(ordenFilter, true);
                tablebody.Style.Font.Size = 14;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Cierre_{ordenCierre.Folio}_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmail()
    {
        try
        {
            ms.Notify(new NotificationMessage()
            {
                Summary = "Enviando correo",
                Detail = "Se esta enviando el correo de notificación para validación del pedido, por favor, espere en esta pantalla hasta terminar el proceso",
                Duration = 10000,
                Severity = NotificationSeverity.Info
            });
            if (ordenCierres.Count > 0)
            {
                //if (ordenCierres.DistinctBy(x => x.Folio).Count() == 1)
                //{
                loadingSend = true;

                var response = await http.Post<List<OrdenCierre>>("api/email/validacioncierre", ordenCierres);
                if (response.Error)
                {
                    loadingSend = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingSend = false;
                    await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
                    ordenCierres = new List<OrdenCierre>();
                    ordenCierre = new OrdenCierre();
                }
                //}
                //else
                //{
                //    await Swal.FireAsync("Alerta", "Se encontraron mas de un folio en el listado de ordenes. Filtre solo uno para poder enviar el correo.", SweetAlertIcon.Warning);
                //}
            }
            else
            {
                await Swal.FireAsync("Alerta", "Se deben tener un cierre para enviar el correo.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetDestinoComprador()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>($"api/destino/comprador");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetFolio()
    {
        try
        {
            //var responseActivo = await http.Post<OrdenCierre, bool>($"api/cierre/activo", ordenCierre);
            //if (responseActivo.Error)
            //{
            //    var message = await responseActivo.ObtenerMensajeError();
            //    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            //}
            //else
            //{

            //}
            //if (string.IsNullOrEmpty(ordenCierre.Folio))
            //{
            //    if (ordenCierres.Count > 0 && string.IsNullOrEmpty(ordenCierre.Folio))
            //    {

            //        var r = await Swal.FireAsync(new SweetAlertOptions
            //        {
            //            Title = "Agregar pedido",
            //            Text = "Ya tiene una orden en lista, ¿Desea crear una nueva orden?",
            //            Icon = SweetAlertIcon.Warning,
            //            CancelButtonText = "Cancelar",
            //            ConfirmButtonText = "Aceptar",
            //            ShowCancelButton = true
            //        });
            //        if (!string.IsNullOrEmpty(r.Value))
            //        {
            //            ordenCierres = new List<OrdenCierre>();
            //        }
            //        else
            //        {
            //            return;
            //        }
            //    }

            //    var response = await http.Get<Cliente>($"api/clientes/one");
            //    if (response.Error)
            //    {
            //        var message = await response.ObtenerMensajeError();
            //        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            //    }
            //    else
            //    {
            //        Cliente = response.Response;
            //        Cliente.Consecutivo = Cliente.Consecutivo != null ? Cliente.Consecutivo + 1 : 1;

            //        if (string.IsNullOrEmpty(Cliente.CodCte))
            //            ms.Notify(new NotificationMessage()
            //            {
            //                Severity = NotificationSeverity.Warning,
            //                Detail = "Este cliente no cuenta con una clave para generar un folio, por lo que se generara uno automaticamente para este cierre.",
            //                Duration = 10000
            //            });

            //        var userCod = User.Identity?.Name?.Substring(0, 3);
            //        if (string.IsNullOrEmpty(userCod))
            //            userCod = string.Empty;

            //        var codcte = string.IsNullOrEmpty(Cliente.CodCte) ? userCod : Cliente.CodCte;
            //        var guid = Guid.NewGuid().ToString().Split("-");
            //        ordenCierre.Folio = $"P-{codcte}{Convert.ToString(Cliente.Consecutivo)}-{guid[0]}";

            //        await PutClientes();
            await CreateCierre();
            //        }
            //    }
            //    else
            //    {
            //        await CreateCierre();
            //}
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PutClientes()
    {
        try
        {
            var response = await http.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetPrecios()
    {
        try
        {

            ZonaCliente zonaCliente = new ZonaCliente();
            zonaCliente.DesCod = ordenCierre.CodDes;

            var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos", zonaCliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Precios = response.Response;
                StateHasChanged();
                DestinoSeleccionado = ordenCierre.CodDes;
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeProducto()
    {
        try
        {
            if (ordenCierre.CodPrd != null && CodProductoSeleccionado != ordenCierre.CodPrd)
            {
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void ClearList()
    {
        try
        {
            ordenCierres = new List<OrdenCierre>();
            sameOrder = false;
            monthFilter = false;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingsCierre", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingsCierre");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
