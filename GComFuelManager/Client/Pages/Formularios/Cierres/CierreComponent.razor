@page "/"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms
@inject DialogService ds
@inject TooltipService ts

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Comprador" Context="VISTA">
    <Authorized>
        <NavigationLock OnBeforeInternalNavigation="OnPreventInternalNavigation"></NavigationLock>

        <h3>Cierre de Ordenes</h3>

        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador" Context="FILTRO">
            <Authorized>
                <div class="col-12 d-flex justify-content-center mb-2 shadow-sm">
                    <div class="col-12">
                        <div class="col-12 card">
                            <div class="col-12 card-body">
                                <div class="col-12 row">
                                    <div class="col-3 row">
                                        <div class="col-6">
                                            <label class="form-label">Folio</label>
                                            <InputText class="form-control col-12" @bind-Value="filtro.Folio" />
                                        </div>
                                        <div class="col-3 d-flex">
                                            <div class="col-12 mt-auto">
                                                <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@ShowDetails">
                                                    <i class="fa fa-solid fa-eye"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-3 d-flex">
                                            <div class="col-12 mt-auto">
                                                <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@(()=>GetFiltroCierres(true))">
                                                    <i class="fa fa-solid fa-magnifying-glass"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-2">
                                        <div class="col-12">
                                            <label class="form-label">Grupo</label>
                                            <InputSelect @bind-Value="GrupoSeleccionadoFiltro" class="form-select" onchange="@GetClientesFiltro()">
                                                <option>-- Selecciona una opcion --</option>
                                                @if (Grupos is null)
                                                {
                                                    <option disabled> Cargando ...</option>
                                                }
                                                else if (Grupos.Count() == 0)
                                                {
                                                    <option disabled> No hay grupos</option>
                                                }
                                                else
                                                {
                                                    foreach (var item in Grupos)
                                                    {
                                                        <option value="@item.Cod">@item.Den</option>
                                                    }
                                                }
                                            </InputSelect>
                                            @*<RadzenDropDown @bind-Value="@ordenCierre.CodGru" Data="Grupos" class="col-12"
                                                TextProperty="Den" ValueProperty="Cod" Change="@GetClientes" TValue="Int16?"/>*@
                                        </div>
                                    </div>
                                    <div class="col-2">
                                        <div class="col-12">
                                            <label class="form-label">Cliente</label>
                                            <InputSelect @bind-Value="filtro.codCte" class="form-select">
                                                <option>-- Selecciona una opcion --</option>
                                                @if (ClientesFiltro is null)
                                                {
                                                    <option disabled> Cargando ...</option>
                                                }
                                                else if (ClientesFiltro.Count == 0)
                                                {
                                                    <option disabled> No hay capacidades</option>
                                                }
                                                else
                                                {
                                                    foreach (var item in ClientesFiltro)
                                                    {
                                                        <option value="@item.Cod">@item.Den</option>
                                                    }
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="col-2">
                                        <label class="form-label">Año</label>
                                        <InputSelect @bind-Value="añoSeleccionado" class="form-select">
                                            <option>-- Selecciona una opcion --</option>
                                            @if (años is null)
                                            {
                                                <option disabled> Cargando ...</option>
                                            }
                                            else if (años.Count == 0)
                                            {
                                                <option disabled> No hay capacidades</option>
                                            }
                                            else
                                            {
                                                foreach (var item in años)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col-2">
                                        <label class="form-label">Mes</label>
                                        <InputSelect @bind-Value="mesSeleccionado" class="form-select">
                                            <option>-- Selecciona una opcion --</option>
                                            @if (meses is null)
                                            {
                                                <option disabled> Cargando ...</option>
                                            }
                                            else if (meses.Count == 0)
                                            {
                                                <option disabled> No hay capacidades</option>
                                            }
                                            else
                                            {
                                                foreach (var item in meses)
                                                {
                                                    <option value="@item.Cod">@item.Den.ToUpper()</option>
                                                }
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col-1 d-flex ">
                                        <div class="col-12 mt-auto">
                                            <button class="col-12 btn gcom-bg-amarillo" @onclick="@(()=>GetFiltroCierres(false))">
                                                <i class="fa fa-solid fa-magnifying-glass"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Comprador" Context="FORMULARIO">
            <Authorized>
                <div class="col-12 d-flex justify-content-center shadow-sm">
                    <div class="col-12">
                        <div class="col-12 card">
                            <div class="col-12 card-body">
                                <EditForm Model="ordenCierre" class="form col-12">
                                    <DataAnnotationsValidator />

                                    <div class="col-12 row">

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Fecha de cierre</label>
                                                @if (!IsClient)
                                                {
                                                    <InputDate class="form-control col-12 disabled" @bind-Value="ordenCierre.FchCierre" />
                                                }
                                                else
                                                {
                                                    <RadzenDatePicker class="col-12" @bind-Value="ordenCierre.FchCierre" Disabled="true" />
                                                }
                                            </div>
                                        </div>
                                        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador" Context="FORM">
                                            <Authorized>
                                                <div class="col-4 mb-1">
                                                    <div class="col-12">
                                                        <label class="form-label">Grupo</label>
                                                        <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodGru"
                                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        AllowVirtualization="true" Change="@GetClientes" />
                                                        @*<InputSelect @bind-Value="ordenCierre.CodGru" class="form-select" onchange="@GetClientes()">
                                                            <option>-- Selecciona una opcion --</option>
                                                            @if (Grupos is null)
                                                            {
                                                            <option disabled> Cargando ...</option>
                                                            }
                                                            else if (Grupos.Count == 0)
                                                            {
                                                            <option disabled> No hay grupos</option>
                                                            }
                                                            else
                                                            {
                                                            foreach (var item in Grupos)
                                                            {
                                                            <option value="@item.Cod">@item.Den</option>
                                                            }
                                                            }
                                                            </InputSelect>*@
                                                    </div>
                                                </div>

                                                <div class="col-4 mb-1">
                                                    <div class="col-12">
                                                        <label class="form-label">Cliente</label>
                                                        <RadzenDropDown Data="Clientes" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodCte"
                                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        AllowVirtualization="true" Change="@GetData" />
                                                        @*<InputSelect @bind-Value="ordenCierre.CodCte" class="form-select" onchange="@GetData()">
                                                            <option>-- Selecciona una opcion --</option>
                                                            @if (Clientes is null)
                                                            {
                                                            <option disabled> Cargando ...</option>
                                                            }
                                                            else if (Clientes.Count == 0)
                                                            {
                                                            <option disabled> No hay capacidades</option>
                                                            }
                                                            else
                                                            {
                                                            foreach (var item in Clientes)
                                                            {
                                                            <option value="@item.Cod">@item.Den</option>
                                                            }
                                                            }
                                                            </InputSelect>*@
                                                    </div>
                                                </div>
                                            </Authorized>
                                        </AuthorizeView>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Contacto</label>
                                                <RadzenDropDown Data="Contactos" class="col-12" TextProperty="Nombre" ValueProperty="Cod" @bind-Value="ordenCierre.CodCon"
                                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                AllowVirtualization="true">
                                                    <Template Context="data">
                                                        Nombre: @((data as Contacto).Nombre) | Correo: @((data as Contacto).Correo)
                                                    </Template>
                                                    <ValueTemplate Context="data">
                                                        Nombre: @((data as Contacto).Nombre) | Correo: @((data as Contacto).Correo)
                                                    </ValueTemplate>
                                                </RadzenDropDown>
                                                @*<InputSelect @bind-Value="ordenCierre.CodCon" class="form-select">
                                                    <option>-- Selecciona una opcion --</option>
                                                    @if (Contactos is null)
                                                    {
                                                    <option disabled> Cargando ...</option>
                                                    }
                                                    else if (Contactos.Count() == 0)
                                                    {
                                                    <option disabled> No hay contactos</option>
                                                    }
                                                    else
                                                    {
                                                    foreach (var item in Contactos)
                                                    {
                                                    <option value="@item.Cod">Nombre: @item.Nombre | Correo: @item.Correo</option>
                                                    }
                                                    }
                                                    </InputSelect>*@
                                            </div>
                                        </div>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Destino</label>
                                                <RadzenDropDown Data="Destino" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@GetPrecios"
                                                                AllowVirtualization="true" />
                                                @*<InputSelect @bind-Value="ordenCierre.CodDes" class="form-select" onchange="@GetPrecios()">
                                                    <option>-- Selecciona una opcion --</option>
                                                    @if (Destino is null)
                                                    {
                                                    <option disabled> Cargando ...</option>
                                                    }
                                                    else if (Destino.Count == 0)
                                                    {
                                                    <option disabled> No hay capacidades</option>
                                                    }
                                                    else
                                                    {
                                                    foreach (var item in Destino)
                                                    {
                                                    <option value="@item.Cod">@item.Den</option>
                                                    }
                                                    }
                                                    </InputSelect>*@
                                            </div>
                                        </div>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Producto</label>
                                                @*<InputSelect @bind-Value="ordenCierre.CodPrd" class="form-select" onchange="@ChangeProducto()">
                                                    <option>-- Selecciona una opcion --</option>
                                                    @if (Precios is null)
                                                    {
                                                    <option disabled> Cargando ...</option>
                                                    }
                                                    else if (Precios.Count == 0)
                                                    {
                                                    <option disabled> No hay Productos</option>
                                                    }
                                                    else
                                                    {
                                                    foreach (var item in Precios)
                                                    {
                                                    <option value="@item.Producto!.Cod">@item.Producto.Den | $@item.Pre</option>
                                                    }
                                                    }
                                                    </InputSelect>*@
                                                <RadzenDropDown Data="Precios" class="col-12" TextProperty="Producto.Den" ValueProperty="Producto.Cod" @bind-Value="ordenCierre.CodPrd"
                                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@ChangeProducto"
                                                                AllowVirtualization="true">
                                                    <Template Context="data">
                                                        @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                                    </Template>
                                                    <ValueTemplate Context="data">
                                                        @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                                    </ValueTemplate>
                                                </RadzenDropDown>
                                            </div>
                                        </div>

                                        @if (!IsDifferentVol)
                                        {
                                            <div class="col-2 mb-1">
                                                <div class="col-12">
                                                    <label class="form-label">Volumen</label>
                                                    <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select">
                                                        <option>-- Selecciona una opcion --</option>
                                                        @if (Cantidades is null)
                                                        {
                                                            <option disabled> Cargando ...</option>
                                                        }
                                                        else if (Cantidades.Count == 0)
                                                        {
                                                            <option disabled> No hay capacidades</option>
                                                        }
                                                        else
                                                        {
                                                            foreach (var item in Cantidades)
                                                            {
                                                                <option value="@item">@item</option>
                                                            }
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                        }

                                        @if (IsDifferentVol)
                                        {
                                            <div class="col-2 mb-1">
                                                <div class="col-12">
                                                    <label class="form-label">Volumen</label>
                                                    <InputNumber class="form-control col-12" @bind-Value="ordenCierre.Volumen" />
                                                </div>
                                            </div>
                                        }

                                        <div class="col-2 mb-1 d-flex">
                                            <div class="col-12 my-auto d-flex">
                                                <RadzenCheckBox @bind-Value=@IsDifferentVol Name="CheckBox1" class="me-2" />
                                                <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipVolumen(infoIconVolumen))" @ref="infoIconVolumen">
                                                    <label class="form-label" for="CheckBox1">
                                                        Volumen Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipPrecio(infoPrecio))" @ref="infoPrecio">
                                                    <label class="form-label">
                                                        Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                                    </label>
                                                </div>
                                                <RadzenNumeric class="form-control col-12 disabled" @bind-Value="ordenCierre.Precio" Disabled="true" />
                                            </div>
                                        </div>

                                        <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador" Context="FORM">
                                            <Authorized>

                                                <div class="col-4 mb-1">
                                                    <div class="col-12">
                                                        <label class="form-label">Modelo de Venta</label>
                                                        <InputSelect @bind-Value="ordenCierre.ModeloVenta" class="form-select">
                                                            <option>-- Selecciona una opcion --</option>
                                                            @if (MdVenta is null)
                                                            {
                                                                <option disabled> Cargando ...</option>
                                                            }
                                                            else if (MdVenta.Count == 0)
                                                            {
                                                                <option disabled> No hay capacidades</option>
                                                            }
                                                            else
                                                            {
                                                                foreach (var item in MdVenta)
                                                                {
                                                                    <option value="@item">@item</option>
                                                                }
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>

                                                <div class="col-4 mb-1">
                                                    <div class="col-12">
                                                        <label class="form-label">Tipo de Venta</label>
                                                        <InputSelect @bind-Value="ordenCierre.TipoVenta" class="form-select">
                                                            <option>-- Selecciona una opcion --</option>
                                                            @if (TpVenta is null)
                                                            {
                                                                <option disabled> Cargando ...</option>
                                                            }
                                                            else if (TpVenta.Count == 0)
                                                            {
                                                                <option disabled> No hay modelo de venta</option>
                                                            }
                                                            else
                                                            {
                                                                foreach (var item in TpVenta)
                                                                {
                                                                    <option value="@item">@item</option>
                                                                }
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                </div>

                                                <div class="col-4 mb-1">
                                                    <div class="col-12">
                                                        <label class="form-label">Vendedor</label>
                                                        <InputText class="form-control col-12" @bind-Value="ordenCierre.Vendedor" />
                                                    </div>
                                                </div>
                                            </Authorized>
                                        </AuthorizeView>
                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Tipo de pago</label>
                                                <InputSelect @bind-Value="ordenCierre.TipoPago" class="form-select">
                                                    <option>-- Selecciona una opcion --</option>
                                                    @if (TpPago is null)
                                                    {
                                                        <option disabled> Cargando ...</option>
                                                    }
                                                    else if (TpPago.Count == 0)
                                                    {
                                                        <option disabled> No hay tipos de pago</option>
                                                    }
                                                    else
                                                    {
                                                        foreach (var item in TpPago)
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    }
                                                </InputSelect>
                                            </div>
                                        </div>
                                        @*<div class="col-4 mb-1">
                                            <div class="col-12">
                                            <label class="form-label">Fecha de llegada</label>
                                            <InputDate class="col-12 form-control" TValue="DateTime?" @bind-Value="@ordenCierre.FchLlegada"></InputDate>
                                            </div>
                                            </div>*@

                                        <div class="col-4 mb-1">
                                            <div class="col-12">
                                                <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltip(infoIcon))" @ref="infoIcon">
                                                    <label class="form-label">
                                                        Folio <i class="fa-solid fa-circle-info fa-xs"></i>
                                                    </label>
                                                </div>
                                                <RadzenTextBox class="form-control col-12 disabled" @bind-Value="ordenCierre.Folio" Disabled="true" />
                                            </div>
                                        </div>

                                        <div class="col-12 mb-1">
                                            <div class="col-12">
                                                <label class="form-label">Observaciones</label>
                                                <InputTextArea class="form-control col-12" @bind-Value="ordenCierre.Observaciones" />
                                            </div>
                                        </div>

                                        <div class="col-12 d-flex justify-content-center mt-3">
                                            @if (!isEdit)
                                            {
                                                <div class="col-3 mx-2">
                                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@GetFolio">
                                                        <i class="fa fa-solid fa-plus"></i>
                                                        <b>Crear cierre</b>
                                                        @if (loadingCreate)
                                                        {
                                                            <SpinnerLoading></SpinnerLoading>
                                                        }
                                                    </button>
                                                </div>
                                                <div class="col-3 mx-2">
                                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@SendEmail">
                                                        <i class="fa fa-solid fa-envelope"></i>
                                                        <b>Enviar cierre</b>
                                                        @if (loadingSend)
                                                        {
                                                            <SpinnerLoading></SpinnerLoading>
                                                        }
                                                    </button>
                                                </div>
                                                <div class="col-3 mx-2">
                                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel">
                                                        <i class="fa fa-solid fa-file-excel"></i>
                                                        <b>Exportar Cierres</b>
                                                        @if (loadingExport)
                                                        {
                                                            <SpinnerLoading></SpinnerLoading>
                                                        }
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col-3 mx-2">
                                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@UpateOrden">
                                                        <i class="fa fa-solid fa-floppy-disk"></i>
                                                        <b>Guardar cambio</b>
                                                        @if (loadingCreate)
                                                        {
                                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                            <span class="visually-hidden">Loading...</span>
                                                        }
                                                    </button>
                                                </div>
                                                <div class="col-3 mx-2">
                                                    <button class="btn gcom-bg-amarillo col-12" @onclick="@cancelEdit">
                                                        <i class="fa fa-solid fa-xmark"></i>
                                                        <b>Cancelar cambio</b>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>


        <div class="col-12 d-flex justify-content-center">
            <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                            GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;" ColumnWidth="200px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            IsLoading="loading" @ref="@grid" AllowSorting="true" AllowFiltering="true">
                <Columns>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" MinWidth="200px" Visible="true" Filterable="false">
                        <Template Context="item">
                            <div class="col-12 row">
                                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador">
                                    <Authorized>
                                        <div class="col">
                                            <button class="btn btn-danger col-12" @onclick="@(()=>CancelPedido(item))"><i class="fa fa-solid fa-ban"></i></button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                                <div class="col">
                                    <button class="btn btn-primary col-12" @onclick="@(()=>setEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de cierre" Property="FchCierre" FormatString="{0:d}" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de vencimiento" Property="FchVen" FormatString="{0:d}" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Frozen="true" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="BOL" Property="OrdenEmbarque.Orden.BatchId" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="Destino.Den" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto.Den">
                        <FilterTemplate>
                            <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true"></RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div class="col-12 d-flex">
                                <div class="col-1">
                                    @if (data.Producto.Cod == 25 || data.Producto.Cod == 26 || data.Producto.Cod == 27)
                                    {
                                        <div class="badge rounded-pill regular me-1">&nbsp;</div>
                                    }
                                    else if (data.Producto.Cod == 11 || data.Producto.Cod == 12 || data.Producto.Cod == 116)
                                    {
                                        <div class="badge rounded-pill regular-vdm me-1">&nbsp;</div>
                                    }
                                    else if (data.Producto.Cod == 19 || data.Producto.Cod == 20 || data.Producto.Cod == 21)
                                    {
                                        <div class="badge rounded-pill premium me-1">&nbsp;</div>
                                    }
                                    else
                                    {
                                        <div class="badge rounded-pill diesel me-1">&nbsp;</div>
                                    }
                                </div>
                                <div class="col-11">
                                    @data.Producto?.Den
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="Precio" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Property="Volumen" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Tipo de venta" Property="TipoVenta" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Cliente" Property="Cliente.Den" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Vendedor" Property="Vendedor" Visible="!IsClient" Filterable="false" />
                    <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Property="Observaciones" Filterable="false" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </Authorized>
</AuthorizeView>

<style type="text/css" media="screen and (min-width:1200px)">
    .ancho {
        width: 1100px;
    }
</style>

<style type="text/css" media="screen and (min-width:1500px)">
    .ancho {
        width: 1500px;
    }
</style>
<style type="text/css" media="screen and (min-width:1100px)">
    .ancho {
        width: 1000px;
    }
</style>

@code {
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    UsuarioInfo user { get; set; } = new UsuarioInfo();

    OrdenCierre ordenCierre { get; set; } = new OrdenCierre();
    List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    private List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    private List<CodDenDTO> ClientesFiltro { get; set; } = new List<CodDenDTO>();

    private Cliente Cliente { get; set; } = new Cliente();

    private int? clienteSeleccioado { get; set; }

    private List<CodDenDTO> Destino { get; set; } = null!;

    private List<Producto> Productos { get; set; } = null!;

    private List<CodDenDTO> meses { get; set; } = new List<CodDenDTO>();
    private int mesSeleccionado { get; set; }

    private List<int> años { get; set; } = new List<int>();
    private int añoSeleccionado { get; set; }

    private List<int> Cantidades { get; set; } = null!;
    private List<int> ordenPendientes { get; set; } = new List<int>();

    private List<string> MdVenta { get; set; } = new List<string> { "Delivery", "Rack" };

    private List<string> TpVenta { get; set; } = new List<string> { "Interno", "Externo", "Rack" };

    private List<string> TpPago { get; set; } = new List<string> { "Credito", "Contado", "Contraentrga" };

    private List<Precio> Precios { get; set; } = new List<Precio>();

    Contacto Contacto { get; set; } = new Contacto();
    IEnumerable<Contacto> Contactos = new List<Contacto>();

    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private short? GrupoSeleccionadoB = 0;

    private EmailContent emailContent { get; set; } = new EmailContent();

    private short? GrupoSeleccionado = 0;
    private short GrupoSeleccionadoFiltro = 0;
    private int ClienteSeleccionado = 0;
    private int? DestinoSeleccionado = 0;
    private int? VolumenTotal = 0;
    private byte? CodProductoSeleccionado = 0;

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string?> ProductList { get; set; } = new List<string>();

    bool loading = false;
    bool isEdit = false;
    bool loadingCreate = false;
    bool loadingFilter = false;
    bool isFilter = false;
    bool loadingExport = false;
    bool loadingSend = false;
    bool IsClient = false;
    bool IsDifferentVol = false;
    bool loadingEdit = false;
    ElementReference infoIcon;
    ElementReference infoIconVolumen;
    ElementReference infoPrecio;

    //protected override bool ShouldRender()
    //{
    //    if (ordenCierre.CodCte != clienteSeleccioado)
    //        return true;

    //    if (ordenCierre.CodDes != DestinoSeleccionado)
    //        return true;

    //    if (ordenCierre.CodGru != GrupoSeleccionado)
    //        return true;

    //    return false;
    //}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckClient();
            if (!IsClient)
            {
                var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.ToList();
                months.RemoveAt(months.IndexOf(months.Last()));
                var i = 1;
                foreach (var item in months)
                {

                    meses.Add(new CodDenDTO { Cod = i, Den = item.ToString() });
                    i++;
                }
                await GetGrupos();
                await GetYears();
                //await GetEstaciones();
            }
            else
            {
                await GetDestinoComprador();
                await GetContactosComprador();
            }
            await GetCantidades();
            //await GetProductos();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "El Folio se llenara automaticamente al crear el cierre.", options);
    void ShowTooltipVolumen(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introdusca una cantidad diferente.", options);
    void ShowTooltipPrecio(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "El precio se llenara automaticamente al seleccionar el producto.", options);

    private async Task GetData()
    {
        if (ordenCierre.CodCte != null || clienteSeleccioado != ordenCierre.CodCte)
        {
            await GetContactos();
            await GetEstaciones();
            clienteSeleccioado = ordenCierre.CodCte;
            StateHasChanged();
        }

    }

    private async Task GetContactos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Contacto>>($"api/contacto/{ordenCierre.CodCte}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Contactos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetContactosComprador()
    {
        try
        {
            var response = await http.Get<IEnumerable<Contacto>>($"api/contacto/comprador");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Contactos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>($"api/estacion/{ordenCierre.CodCte}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CreateCierre()
    {
        try
        {
            loadingCreate = true;
            isFilter = false;

            var responseBIN = await http.Get<int>("api/pedido/binNumber");
            if (responseBIN.Error)
            {
                loadingCreate = false;
                var message = await responseBIN.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var bin = responseBIN.Response;
                OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
                {
                    Codprd = ordenCierre.CodPrd,
                    Pre = ordenCierre.Precio,
                    Vol = ordenCierre.Volumen,
                    Coddes = ordenCierre.CodDes,
                    Fchpet = DateTime.Now,
                    Bin = ordenCierres.Count == 0 ? bin : ordenCierres.Count % 2 != 0 ? ++bin : bin
                };

                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                if (response.Error)
                {
                    loadingCreate = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierre.CodPed = response.Response.Cod;
                    var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre", ordenCierre);
                    if (responseOC.Error)
                    {
                        loadingCreate = false;
                        var message = await responseOC.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingCreate = false;
                        ordenCierres.Add(responseOC.Response);
                        ordenPendientes.Add(responseOC.Response.Cod);
                        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
                        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());
                        await grid.Reload();
                    }
                }
            }
        }
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void setEdit(OrdenCierre orden)
    {
        try
        {
            ordenCierre = orden;
            await GetData();
            await GetPrecios();
            if (!Cantidades.Any(x => x == ordenCierre.Volumen))
                IsDifferentVol = true;
            else
                IsDifferentVol = false;
            isEdit = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void cancelEdit()
    {
        isEdit = false;
        ordenCierre = new OrdenCierre();
    }

    private async Task UpateOrden()
    {
        try
        {
            loadingCreate = true;

            var responseEM = await http.Put<OrdenCierre>($"api/pedido/cierre/update/{ordenCierre.CodPed}", ordenCierre);
            if (responseEM.Error)
            {
                loadingCreate = false;
                var message = await responseEM.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
                if (response.Error)
                {
                    loadingCreate = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingCreate = false;
                    var index = ordenCierres.IndexOf(ordenCierres.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                    ordenCierres.RemoveAt(index);
                    ordenCierres.Insert(index, response.Response);
                    ms.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos del cierre {ordenCierre.Folio} actualizados.", Duration = 1500 });
                    await grid.Reload();
                    cancelEdit();
                }
            }
        }
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task OnPreventInternalNavigation(LocationChangingContext context)
    {
        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());

        //context.PreventNavigation();

        return;
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¿Desea cancelar la orden?"
            });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseEM = await http.Delete($"api/pedido/{orden.CodPed}/cancel");
                if (responseEM.Error)
                {
                    var responseHttp = await responseEM.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var response = await http.Delete($"api/cierre/{orden.Cod}/cancel");
                    if (response.Error)
                    {
                        var responseHttp = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await Swal.FireAsync("Cierre cancelado", $"La orden con folio ha sido cancelada.", SweetAlertIcon.Info);
                        ordenPendientes.Remove(orden.Cod);
                        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());
                        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
                        ordenCierres.Remove(orden);
                        //await GetOrdenesPendientes();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetOrdenesPendientes()
    {
        try
        {
            List<int>? ordenesPendientes = new List<int>();

            DateTime expiration;
            if (DateTime.TryParse(await js.GetItemLocalStorage("EXPIRACIONCIERRE"), out expiration))
            {
                if (DateTime.Now > expiration)
                {
                    await js.RemoveItemLocalStorage("EXPIRACIONCIERRE");
                    await js.RemoveItemLocalStorage("CIERRE");
                }
            }

            if (await js.GetItemLocalStorage("CIERRE") != null)
            {
                ordenesPendientes = JsonConvert.DeserializeObject<List<int>>(await js.GetItemLocalStorage("CIERRE"));
                ordenCierres = null!;

                var response = await http.Post<List<int>, List<OrdenCierre>>("api/cierre/list", ordenesPendientes!);

                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierres = response.Response;
                    ordenPendientes = ordenesPendientes!;
                }
            }


        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetYears()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cierre/years");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetFiltroCierres(bool forFolio)
    {
        try
        {
            filtro.forFolio = forFolio;
            isFilter = true;

            if (!forFolio)
            {
                int fchFin = DateTime.DaysInMonth(Convert.ToInt32(mesSeleccionado), mesSeleccionado);
                filtro.FchInicio = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, 1);
                filtro.FchFin = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, fchFin).AddHours(11).AddMinutes(59).AddSeconds(59);
            }

            var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordenCierres = response.Response;
                ProductList = ordenCierres?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (ordenCierres != null)
            {
                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 50;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:P1"];

                var ordenFilter = new List<OrdenCierre>();
                foreach (var item in ordenCierres)
                    if (item.Producto!.Den == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                        ordenFilter.Add(item);

                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<OrdenCierre>(ordenFilter, true);
                tablebody.Style.Font.Size = 14;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Cierre_{ordenCierre.Folio}_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmail()
    {
        try
        {
            if (ordenCierres.Count > 0)
            {
                loadingSend = true;


                var response = await http.Post<List<OrdenCierre>>("api/email/confirmacion", ordenCierres);
                if (response.Error)
                {
                    loadingSend = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingSend = false;
                    await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
                    ordenCierres = new List<OrdenCierre>();
                    ordenCierre = new OrdenCierre();
                }
            }
            else
            {
                await Swal.FireAsync("Alerta", "Se deben tener un cierre para enviar el correo.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmailV()
    {
        try
        {
            var response = await http.Post<EmailContent>("api/email/vencimiento", emailContent);
            if (response.Error)
            {
                loadingSend = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSend = false;
                await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ShowDetails()
    {
        try
        {
            await ds.OpenAsync<TabsCierresDialogs>($"Orden {filtro.Folio}",
            new Dictionary<string, object>() { { "folio", filtro.Folio } },
            new DialogOptions() { Height = "600px", Width = "75%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (ordenCierre.CodGru != null && GrupoSeleccionado != ordenCierre.CodGru)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{ordenCierre.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = ordenCierre.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientesFiltro()
    {
        try
        {
            if (GrupoSeleccionadoFiltro != null && GrupoSeleccionadoFiltro != GrupoSeleccionadoB)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{GrupoSeleccionadoFiltro}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoB = GrupoSeleccionadoFiltro;
                    ClientesFiltro = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetDestinoComprador()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>($"api/destino/comprador");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetFolio()
    {
        try
        {
            if (string.IsNullOrEmpty(ordenCierre.Folio))
            {
                if (IsClient)
                    ordenCierre.CodCte = user.CodCte;

                var response = await http.Get<Cliente>($"api/clientes/{ordenCierre.CodCte}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    Cliente = response.Response;
                    Cliente.Consecutivo = Cliente.Consecutivo != null ? Cliente.Consecutivo + 1 : 1;

                    ordenCierre.Folio = Cliente.CodCte != null ? Cliente.CodCte + Convert.ToString(Cliente.Consecutivo) : string.Empty;
                    await PutClientes();
                    await CreateCierre();
                }
            }
            else
            {
                await CreateCierre();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PutClientes()
    {
        try
        {
            var response = await http.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task CheckClient()
    {
        try
        {
            var response = await http.Get<UsuarioInfo>("api/cuentas/check/cliente");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                IsClient = response.Response.IsClient;
                user = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetPrecios()
    {
        try
        {
            if (ordenCierre.CodDes != null && ordenCierre.CodCte != null && DestinoSeleccionado != ordenCierre.CodDes)
            {

            }

            ZonaCliente zonaCliente = new ZonaCliente();
            zonaCliente.DesCod = ordenCierre.CodDes;
            zonaCliente.CteCod = ordenCierre.CodCte;

            var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos", zonaCliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Precios = response.Response;
                StateHasChanged();
                DestinoSeleccionado = ordenCierre.CodDes;
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeProducto()
    {
        try
        {
            if (ordenCierre.CodPrd != null && CodProductoSeleccionado != ordenCierre.CodPrd)
            {
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd)?.Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                StateHasChanged();
                //Console.WriteLine("precio");
            }
            //CodProductoSeleccionado = ordenCierre.CodPrd;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
