@page "/cierres"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ms
@inject DialogService ds
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial")]

<NavigationLock OnBeforeInternalNavigation="OnPreventInternalNavigation"></NavigationLock>

<h3>Cierre de Ordenes</h3>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial">
    <div class="col-12 d-flex justify-content-center mb-2 shadow-sm">
        <div class="col-12">
            <div class="col-12 card">
                <div class="col-12 card-body">
                    <div class="col-12 row">
                        <div class="col-3 row">
                            <div class="col-6">
                                <label class="form-label">Folio</label>
                                <InputText class="form-control col-12" @bind-Value="filtro.Folio" />
                            </div>
                            <div class="col-3 d-flex">
                                <div class="col-12 mt-auto">
                                    <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@ShowDetails">
                                        <i class="fa fa-solid fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="col-3 d-flex">
                                <div class="col-12 mt-auto">
                                    <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@(()=>GetFiltroCierres(true))">
                                        <i class="fa fa-solid fa-magnifying-glass"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="col-12">
                                <label class="form-label">Cliente</label>
                                <InputSelect @bind-Value="filtro.codCte" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Clientes is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Clientes.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Clientes)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-2">
                            <label class="form-label">Año</label>
                            <InputSelect @bind-Value="añoSeleccionado" class="form-select">
                                <option>-- Selecciona una opcion --</option>
                                @if (años is null)
                                {
                                    <option disabled> Cargando ...</option>
                                }
                                else if (años.Count == 0)
                                {
                                    <option disabled> No hay capacidades</option>
                                }
                                else
                                {
                                    foreach (var item in años)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-2">
                            <label class="form-label">Mes</label>
                            <InputSelect @bind-Value="mesSeleccionado" class="form-select">
                                <option>-- Selecciona una opcion --</option>
                                @if (meses is null)
                                {
                                    <option disabled> Cargando ...</option>
                                }
                                else if (meses.Count == 0)
                                {
                                    <option disabled> No hay capacidades</option>
                                }
                                else
                                {
                                    foreach (var item in meses)
                                    {
                                        <option value="@item.Cod">@item.Den.ToUpper()</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-1 d-flex ">
                            <div class="col-12 mt-auto">
                                <button class="col-12 btn gcom-bg-amarillo" @onclick="@(()=>GetFiltroCierres(false))">
                                    <i class="fa fa-solid fa-magnifying-glass"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial" Context="Folio">
    <div class="col-12 d-flex justify-content-center shadow-sm">
        <div class="col-12">
            <div class="col-12 card">
                <div class="col-12 card-body">
                    <EditForm Model="ordenCierre" class="form col-12">
                        <DataAnnotationsValidator />

                        <div class="col-12 row">

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Folio</label>
                                    <InputText class="form-control col-12" @bind-Value="ordenCierre.Folio" />
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Fecha de cierre</label>
                                    <InputDate class="form-control col-12 disabled" @bind-Value="ordenCierre.FchCierre" />
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label>Grupo</label>
                                    <InputSelect @bind-Value="ordenCierre.CodGru" class="form-select" onchange="@GetClientes()">
                                        <option>-- Selecciona una opcion --</option>
                                        @if (Grupos is null)
                                        {
                                            <option disabled> Cargando ...</option>
                                        }
                                        else if (Grupos.Count == 0)
                                        {
                                            <option disabled> No hay grupos</option>
                                        }
                                        else
                                        {
                                            foreach (var item in Grupos)
                                            {
                                                <option value="@item.Cod">@item.Den</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Cliente</label>
                                    <InputSelect @bind-Value="ordenCierre.CodCte" class="form-select" onchange="@GetData()">
                                        <option>-- Selecciona una opcion --</option>
                                        @if (Clientes is null)
                                        {
                                            <option disabled> Cargando ...</option>
                                        }
                                        else if (Clientes.Count == 0)
                                        {
                                            <option disabled> No hay capacidades</option>
                                        }
                                        else
                                        {
                                            foreach (var item in Clientes)
                                            {
                                                <option value="@item.Cod">@item.Den</option>
                                            }
                                        }

                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Contacto</label>
                                    <InputSelect @bind-Value="ordenCierre.CodCon" class="form-select">
                                        <option>-- Selecciona una opcion --</option>
                                        @if (Contactos is null)
                                        {
                                            <option disabled> Cargando ...</option>
                                        }
                                        else if (Contactos.Count() == 0)
                                        {
                                            <option disabled> No hay contactos</option>
                                        }
                                        else
                                        {
                                            foreach (var item in Contactos)
                                            {
                                                <option value="@item.Cod">Nombre: @item.Nombre | Correo: @item.Correo</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Producto</label>
                                    <RadzenDropDown Data="Productos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodPrd"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    AllowVirtualization="true" />
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Destino</label>
                                    <RadzenDropDown Data="Destino" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    AllowVirtualization="true" />
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Volumen</label>
                                    <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select">
                                        <option>-- Selecciona una opcion --</option>
                                        @if (Cantidades is null)
                                        {
                                            <option disabled> Cargando ...</option>
                                        }
                                        else if (Cantidades.Count == 0)
                                        {
                                            <option disabled> No hay capacidades</option>
                                        }
                                        else
                                        {
                                            foreach (var item in Cantidades)
                                            {
                                                <option value="@item">@item</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Precio</label>
                                    <InputNumber class="form-control col-12" @bind-Value="ordenCierre.Precio" />
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Tipo de Venta</label>
                                    <InputSelect @bind-Value="ordenCierre.TipoVenta" class="form-select">
                                        <option>-- Selecciona una opcion --</option>
                                        @if (TpVenta is null)
                                        {
                                            <option disabled> Cargando ...</option>
                                        }
                                        else if (TpVenta.Count == 0)
                                        {

                                            <option disabled> No hay capacidades</option>
                                        }
                                        else
                                        {
                                            foreach (var item in TpVenta)
                                            {
                                                <option value="@item">@item</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Vendedor</label>
                                    <InputText class="form-control col-12" @bind-Value="ordenCierre.Vendedor" />
                                </div>
                            </div>

                            <div class="col-12 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Observaciones</label>
                                    <InputTextArea class="form-control col-12" @bind-Value="ordenCierre.Observaciones" />
                                </div>
                            </div>

                            <div class="col-12 d-flex justify-content-center mt-3">
                                @if (!isEdit)
                                {
                                    <div class="col-3 mx-2">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@CreateCierre">
                                            <i class="fa fa-solid fa-plus"></i>
                                            <b>Crear cierre</b>
                                            @if (loadingCreate)
                                            {
                                                <SpinnerLoading></SpinnerLoading>
                                            }
                                        </button>
                                    </div>
                                    <div class="col-3 mx-2">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@SendEmail">
                                            <i class="fa fa-solid fa-floppy-disk"></i>
                                            <b>Guardar cierres</b>
                                            @if (loadingSend)
                                            {
                                                <SpinnerLoading></SpinnerLoading>
                                            }
                                        </button>
                                    </div>
                                    <div class="col-3 mx-2">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel">
                                            <i class="fa fa-solid fa-file-excel"></i>
                                            <b>Exportar Cierres</b>
                                            @if (loadingExport)
                                            {
                                                <SpinnerLoading></SpinnerLoading>
                                            }
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-3 mx-2">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@UpateOrden">
                                            <i class="fa fa-solid fa-floppy-disk"></i>
                                            <b>Guardar cambio</b>
                                            @if (loadingCreate)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="visually-hidden">Loading...</span>
                                            }
                                        </button>
                                    </div>
                                    <div class="col-3 mx-2">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@cancelEdit">
                                            <i class="fa fa-solid fa-xmark"></i>
                                            <b>Cancelar cambio</b>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial">
    <div class="col-12 d-flex justify-content-center">
        <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:500px;" ColumnResized="@(()=>grid.Reset())"
                        IsLoading="loading" @ref="@grid" AllowSorting="true">
            <Columns>
                @*<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial" Context="Acciones">*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" Width="200px" MinWidth="200px" Visible="true">
                    <Template Context="item">
                        <AuthorizeView Roles="Admin, Administrador Sistema" Context="Acciones">
                            <div class="col-12 row">
                                <div class="col">
                                    <button class="btn btn-danger col-12" @onclick="@(()=>CancelPedido(item))"><i class="fa fa-solid fa-ban"></i></button>
                                </div>
                                <div class="col">
                                    <button class="btn btn-primary col-12" @onclick="@(()=>setEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
                @*</AuthorizeView>*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de cierre" Property="FchCierre" FormatString="{0:d}" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de cierre" Property="FchVen" FormatString="{0:d}" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Width="200px" MinWidth="200px" Frozen="true" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" MinWidth="200px" Property="Destino.Den" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="Producto.Den" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="Precio" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="200px" MinWidth="200px" Property="Volumen" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Tipo de venta" Width="200px" MinWidth="200px" Property="TipoVenta" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Cliente" Width="200px" MinWidth="200px" Property="Cliente.Den" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Vendedor" Width="200px" MinWidth="200px" Property="Vendedor" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Width="400px" MinWidth="400px" Property="Observaciones" />
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>


<style type="text/css" media="screen and (min-width:1200px)">
    .ancho {
        width: 1100px;
    }
</style>

<style type="text/css" media="screen and (min-width:1400px)">
    .ancho {
        width: 1300px;
    }
</style>
<style type="text/css" media="screen and (min-width:1100px)">
    .ancho {
        width: 1000px;
    }
</style>

@code {
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    OrdenCierre ordenCierre { get; set; } = new OrdenCierre();
    List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    private List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    private List<CodDenDTO> ClientesSeleccionado { get; set; } = new List<CodDenDTO>();

    private int? clienteSeleccioado { get; set; }

    private List<CodDenDTO> Destino { get; set; } = null!;

    private List<Producto> Productos { get; set; } = null!;

    private List<CodDenDTO> meses { get; set; } = new List<CodDenDTO>();
    private int mesSeleccionado { get; set; }

    private List<int> años { get; set; } = new List<int>();
    private int añoSeleccionado { get; set; }

    private List<int> Cantidades { get; set; } = null!;
    private List<int> ordenPendientes { get; set; } = new List<int>();

    private List<string> TpVenta { get; set; } = new List<string> { "Delivery", "Rack" };

    Contacto Contacto { get; set; } = new Contacto();
    IEnumerable<Contacto> Contactos = new List<Contacto>();

    private List<CodDenDTO> Grupos { get; set; } = null!;
    private Int16? GrupoSeleccionadoB = 0;

    private EmailContent emailContent { get; set; } = new EmailContent();

    private int GrupoSeleccionado = 0;
    private int ClienteSeleccionado = 0;
    private int? VolumenTotal = 0;

    bool loading = false;
    bool isEdit = false;
    bool loadingCreate = false;
    bool loadingFilter = false;
    bool isFilter = false;
    bool loadingExport = false;
    bool loadingSend = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.ToList();
            months.RemoveAt(months.IndexOf(months.Last()));
            var i = 1;
            foreach (var item in months)
            {

                meses.Add(new CodDenDTO { Cod = i, Den = item.ToString() });
                i++;
            }
            await GetGrupos();
            await GetYears();
            await GetProductos();
            await GetCantidades();
            //await GetClientes();
            await GetEstaciones();
            await SendEmailV();
            //await GetOrdenesPendientes();
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetData()
    {
        if (ordenCierre.CodCte != clienteSeleccioado)
        {
            await GetContactos();
            await GetEstaciones();
            clienteSeleccioado = ordenCierre.CodCte;
        }
    }

    private async Task GetContactos()
    {
        try
        {
            if (ordenCierre.CodCte != null)
            {
                var response = await http.Get<IEnumerable<Contacto>>($"api/contacto/{ordenCierre.CodCte}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    Contactos = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>($"api/estacion/{ordenCierre.CodCte}");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CreateCierre()
    {
        try
        {
            loadingCreate = true;
            isFilter = false;

            var responseBIN = await http.Get<int>("api/pedido/binNumber");
            if (responseBIN.Error)
            {
                loadingCreate = false;
                var message = await responseBIN.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var bin = responseBIN.Response;
                OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
                {
                    Codprd = ordenCierre.CodPrd,
                    Pre = ordenCierre.Precio,
                    Vol = ordenCierre.Volumen,
                    Coddes = ordenCierre.CodDes,
                    Fchpet = DateTime.Now,
                    Bin = ordenCierres.Count == 0 ? bin : ordenCierres.Count % 2 == 0 ? bin : bin++
                };

                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                if (response.Error)
                {
                    loadingCreate = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierre.CodPed = response.Response.Cod;
                    var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre", ordenCierre);
                    if (responseOC.Error)
                    {
                        loadingCreate = false;
                        var message = await responseOC.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingCreate = false;
                        ordenCierres.Add(responseOC.Response);
                        ordenPendientes.Add(responseOC.Response.Cod);
                        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
                        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());
                        await grid.Reload();
                    }
                }
            }
        }
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void setEdit(OrdenCierre orden)
    {
        try
        {
            ordenCierre = orden;
            isEdit = true;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void cancelEdit()
    {
        isEdit = false;
        ordenCierre = new OrdenCierre();
    }

    private async Task UpateOrden()
    {
        try
        {
            loadingCreate = true;

            OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
            {
                Codprd = ordenCierre.CodPrd,
                Pre = ordenCierre.Precio,
                Vol = ordenCierre.Volumen,
                Coddes = ordenCierre.CodDes
            };

            var responseEM = await http.Put<OrdenEmbarque>($"api/pedido/cierre/update/{ordenCierre.CodPed}", ordenEmbarque);
            if (responseEM.Error)
            {
                loadingCreate = false;
                var message = await responseEM.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
                if (response.Error)
                {
                    loadingCreate = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingCreate = false;
                    var index = ordenCierres.IndexOf(ordenCierres.FirstOrDefault(x => x.Cod == response.Response.Cod)!);
                    ordenCierres.RemoveAt(index);
                    ordenCierres.Insert(index, response.Response);
                    ms.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Actualizacion", Detail = $"Datos del cierre {ordenCierre.Folio} actualizados.", Duration = 3000 });
                    await grid.Reload();
                }
            }
        }
        catch (Exception e)
        {
            loadingCreate = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task OnPreventInternalNavigation(LocationChangingContext context)
    {
        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());

        //context.PreventNavigation();

        return;
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¿Desea cancelar la orden?"
            });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseEM = await http.Delete($"api/pedido/{orden.CodPed}/cancel");
                if (responseEM.Error)
                {
                    var responseHttp = await responseEM.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var response = await http.Delete($"api/cierre/{orden.Cod}/cancel");
                    if (response.Error)
                    {
                        var responseHttp = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await Swal.FireAsync("Cierre cancelado", $"La orden con folio {orden.Folio} ha sido cancelada.", SweetAlertIcon.Info);
                        ordenPendientes.Remove(orden.Cod);
                        await js.SetItemLocalStorage("EXPIRACIONCIERRE", DateTime.Today.Date.AddDays(1).ToString());
                        await js.SetItemLocalStorage("CIERRE", JsonConvert.SerializeObject(ordenPendientes));
                        ordenCierres.Remove(orden);
                        //await GetOrdenesPendientes();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetOrdenesPendientes()
    {
        try
        {
            List<int>? ordenesPendientes = new List<int>();

            DateTime expiration;
            if (DateTime.TryParse(await js.GetItemLocalStorage("EXPIRACIONCIERRE"), out expiration))
            {
                if (DateTime.Now > expiration)
                {
                    await js.RemoveItemLocalStorage("EXPIRACIONCIERRE");
                    await js.RemoveItemLocalStorage("CIERRE");
                }
            }

            if (await js.GetItemLocalStorage("CIERRE") != null)
            {
                ordenesPendientes = JsonConvert.DeserializeObject<List<int>>(await js.GetItemLocalStorage("CIERRE"));
                ordenCierres = null!;
                StateHasChanged();

                var response = await http.Post<List<int>, List<OrdenCierre>>("api/cierre/list", ordenesPendientes!);

                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierres = response.Response;
                    ordenPendientes = ordenesPendientes!;
                }
            }


        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetYears()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cierre/years");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetFiltroCierres(bool forFolio)
    {
        try
        {
            filtro.forFolio = forFolio;
            isFilter = true;

            if (!forFolio)
            {
                int fchFin = DateTime.DaysInMonth(Convert.ToInt32(mesSeleccionado), mesSeleccionado);
                filtro.FchInicio = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, 1);
                filtro.FchFin = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, fchFin).AddHours(11).AddMinutes(59).AddSeconds(59);
            }

            var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordenCierres = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (ordenCierres != null)
            {
                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 50;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:P1"];
                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<OrdenCierre>(ordenCierres, true);
                tablebody.Style.Font.Size = 14;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Cierre_{ordenCierre.Folio}_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmail()
    {
        try
        {
            loadingSend = true;
            IEnumerable<OrdenCierre> cierresDistinc = ordenCierres.DistinctBy(x => x.Producto!.Den);

            foreach (var item in cierresDistinc)
            {
                foreach (var cierre in ordenCierres)
                    if (cierre.Producto!.Den == item.Producto!.Den)
                        VolumenTotal = VolumenTotal + cierre.Volumen;
                cierresDistinc.FirstOrDefault(x => x.Producto!.Den == item.Producto!.Den)!.Volumen = VolumenTotal;
                VolumenTotal = 0;
            }

            emailContent.Nombre = ordenCierres.FirstOrDefault()!.ContactoN!.Nombre;
            emailContent.Email = ordenCierres.FirstOrDefault()!.ContactoN!.Correo;
            emailContent.Subject = "Confirmacion de compra";
            emailContent.ordenCierres = cierresDistinc;

            var response = await http.Post<EmailContent>("api/email/confirmacion", emailContent);
            if (response.Error)
            {
                loadingSend = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSend = false;
                await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmailV()
    {
        try
        {
            var response = await http.Post<EmailContent>("api/email/vencimiento", emailContent);
            if (response.Error)
            {
                loadingSend = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSend = false;
                await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ShowDetails()
    {
        try
        {
            await ds.OpenAsync<TabsCierresDialogs>($"Orden {filtro.Folio}",
            new Dictionary<string, object>() { { "folio", filtro.Folio } },
            new DialogOptions() { Height = "600px", Width = "75%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (ordenCierre.CodGru != null && ordenCierre.CodGru != GrupoSeleccionadoB)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{ordenCierre.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoB = ordenCierre.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
