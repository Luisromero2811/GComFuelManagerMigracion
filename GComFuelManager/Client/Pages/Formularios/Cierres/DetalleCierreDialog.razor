@*@page "/detalle/{folio}"*@
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js

<RadzenStack Gap="1rem">
    @if (cierres == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="col-12">
            <div class="col-12">
                <div class="col-12 row mb-3">
                    <div class="col-12">
                        <b class="my-auto">
                            @if (volumenDisponible.Productos.Count > 0)
                            {
                                @foreach (var item in volumenDisponible.Productos)
                                {
                                    <div class="col-12 row">
                                        <p>@(item.Nombre) | Total : @(item.Total?.ToString("N")) | Disponible : @(item.Disponible?.ToString("N")) | Solicitado : @(item.Solicitud?.ToString("N")) | Programado : @(item.Programado?.ToString("N")) | Espera Carga : @(item.Congelado?.ToString("N")) | Consumido : @(item.Consumido?.ToString("N"))</p>
                                    </div>
                                }
                            }
                        </b>
                    </div>
                </div>
            </div>
            <div class="row justify-content-end">
                <div class="col-6 d-flex justify-content-end">
                    <button class="btn gcom-bg-amarillo col-6" @onclick="@GenerateExcel">
                        <i class="fa-solid fa-file-excel fa"></i> Exportar
                        @if (loadingExport)
                        {
                            <SpinnerLoading></SpinnerLoading>
                        }
                    </button>
                </div>
            </div>
        </div>

        <RadzenDataGrid TItem="OrdenCierre" Data="@cierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" Style="height:500px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        IsLoading="loading" @ref="@grid" AllowSorting="true" AllowFiltering="true" AllowColumnPicking="true"
        @bind-Settings="@Settings">
            <Columns>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Frozen="true" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de cierre" Property="FchCierre" Filterable="false" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="BOL" Property="OrdenEmbarque.Orden.BatchId" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio de referencia" Property="OrdenEmbarque.Folio" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="Destino.Den" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Unidad" Property="OrdenEmbarque.Tonel.Placatracto" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto.Den">
                    <FilterTemplate Context="filter">
                        <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowFiltering="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                            <ValueTemplate Context="data">
                                <InputText class="form-control col-12" @bind-Value="ProductoSeleccionado" MaxLength="190" />
                            </ValueTemplate>
                        </RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div class="col-12 row">
                            <div class="col-1">
                                @if (data.Producto.Cod == 25 || data.Producto.Cod == 26 || data.Producto.Cod == 27)
                                {
                                    <div class="badge rounded-pill regular">&nbsp;</div>
                                }
                                else if (data.Producto.Cod == 11 || data.Producto.Cod == 12 || data.Producto.Cod == 116)
                                {
                                    <div class="badge rounded-pill regular-vdm">&nbsp;</div>
                                }
                                else if (data.Producto.Cod == 19 || data.Producto.Cod == 20 || data.Producto.Cod == 21)
                                {
                                    <div class="badge rounded-pill premium">&nbsp;</div>
                                }
                                else
                                {
                                    <div class="badge rounded-pill diesel">&nbsp;</div>
                                }
                            </div>
                            <div class="col-11">
                                @data.Producto?.Den
                            </div>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="Precio" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="200px" FormatString="{0:N2}" Filterable="false">
                    <Template Context="item">
                        <div class="col-12">
                            @string.Format("{0:N2}",
                        item?.OrdenEmbarque?.Orden is null ? item?.OrdenEmbarque?.Vol
                        : item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom
                        : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom2
                        : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom3
                        : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom4
                        : item?.OrdenEmbarque?.Orden?.Vol
                        )
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Estado" Filterable="false">
                    <Template Context="item">
                        @(item.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de entrega" Property="FchLlegada" Filterable="false" FormatString="{0:d}" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Property="Observaciones" Filterable="false" />
            </Columns>
        </RadzenDataGrid>
    }
</RadzenStack>

@code {
    [Parameter] public string folio { get; set; } = string.Empty;
    [Parameter] public string? producto { get; set; } = string.Empty;
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();
    OrdenCierre OrdenCierre { get; set; } = new OrdenCierre();

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    List<OrdenCierre>? cierres { get; set; }
    List<Producto>? productos { get; set; }

    List<DetalleCierreDTO> detalleCierres { get; set; } = new List<DetalleCierreDTO>();

    VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    private int? FullesRestantes { get; set; } = 0;
    private int? ProductosRestantes { get; set; } = 0;
    private int index { get; set; } = 0;
    private int indexRow { get; set; } = 0;

    bool loadingExport = false;
    bool loading = false;

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string> ProductList { get; set; } = new List<string>();

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    protected async override Task OnInitializedAsync()
    {
        await GetFiltroCierres();

        foreach (var item in cierres!)
        {
            detalleCierres.Add(new DetalleCierreDTO
                {
                    OC = item.Folio,
                    FolioReferencia = item?.OrdenEmbarque?.Folio.ToString(),
                    Precio = item.Precio.ToString(),
                    Volumen = item?.OrdenEmbarque?.Orden is null ? item?.OrdenEmbarque?.Vol
                    : item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom?.ToString())
                    : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom2?.ToString())
                    : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom3?.ToString())
                    : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom4?.ToString())
                    : item?.OrdenEmbarque?.Orden?.Vol,
                    Observaciones = item?.Observaciones,
                    FchCierre = item?.FchCierre?.ToString("dd/MM/yyyy"),
                    Destino = item?.Destino?.Den,
                    Producto = item?.Producto?.Den,
                    BOL = item?.OrdenEmbarque?.Orden?.BatchId.ToString(),
                    Unidad = item?.OrdenEmbarque?.Tonel?.Veh,
                    Estatus = item?.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den,
                    FchLlegada = item?.FechaLlegada
                });
        }
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task GetFiltroCierres()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/{folio}/detalle");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                cierres = response.Response;

                filtro.Folio = folio;
                filtro.forFolio = true;

                var responseVolumen = await http.Post<CierreFiltroDTO, VolumenDisponibleDTO>($"api/cierre/volumen", filtro);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    volumenDisponible = responseVolumen.Response;
                }
                ProductList = cierres.DistinctBy(x => x.Producto.Den).Select(x => x.Producto.Den);

                if (!string.IsNullOrEmpty(producto))
                    ProductoSeleccionado = producto;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (cierres != null)
            {
                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 50;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:L1"];
                var ordenFilter = new List<DetalleCierreDTO>();
                foreach (var item in detalleCierres)
                    if (item.Producto == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                        ordenFilter.Add(item);

                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<DetalleCierreDTO>(ordenFilter, true);
                tablebody.Style.Font.Size = 14;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;

                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Detalle_Cierre_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settings", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settings");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}
