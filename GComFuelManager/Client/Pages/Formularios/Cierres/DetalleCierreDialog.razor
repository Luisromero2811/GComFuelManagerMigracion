@*@page "/detalle/{folio}"*@
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js

<RadzenStack Gap="1rem">
    @if (cierres == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="col-12">
            <div class="col-12 row">
                <div class="col-4">
                    Fulles: @(Convert.ToDouble(cierres.Count) / 2) | Fulles restantes: @(Convert.ToDouble(FullesRestantes) / 2)
                </div>
                <div class="col-4">
                    <button class="btn gcom-bg-amarillo col-12" @onclick="@GenerateExcel">
                        <i class="fa-solid fa-file-excel fa"></i> Eportar
                        @if (loadingExport)
                        {
                            <SpinnerLoading></SpinnerLoading>
                        }
                    </button>
                </div>
            </div>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th scope="col">OC</th>
                        <th scope="col">Fecha de cierre</th>
                        <th scope="col">Destino</th>
                        <th scope="col">Producto</th>
                        @*<th scope="col">Fulles</th>*@
                        @*<th scope="col">Litros cargados</th>*@
                        <th scope="col">BOL</th>
                        <th scope="col">Unidad</th>
                        <th scope="col">Estatus</th>
                        <th scope="col">Fecha de entrega</th>
                    </tr>
                </thead>
                <tbody style="height:500px;overflow-y:scroll;overflow-x:scroll;">
                    <Virtualize Context="item" Items="@cierres" TItem="OrdenCierre">
                        <tr>
                            <td>@item.Folio</td>
                            <td>@item.FchCierre</td>
                            <td>@item.Destino?.Den</td>
                            <td>@item.Producto?.Den</td>
                            @*<td></td>*@
                            @*<td>@((index++ % 2) == 0 ? index : "")</td>*@
                            <td>@item.OrdenEmbarque?.Orden?.BatchId</td>
                            <td>@item.OrdenEmbarque?.Tonel?.Placatracto</td>
                            <td>@(item.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den)</td>
                            <td>@item?.FchLlegada</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    }
</RadzenStack>

@code {
    [Parameter] public string folio { get; set; } = string.Empty;

    OrdenCierre OrdenCierre { get; set; } = new OrdenCierre();

    List<OrdenCierre>? cierres { get; set; }

    List<DetalleCierreDTO> detalleCierres { get; set; } = new List<DetalleCierreDTO>();

    private int? FullesRestantes { get; set; } = 0;

    private int index { get; set; } = 0;
    private int indexRow { get; set; } = 0;

    bool loadingExport = false;

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    protected async override Task OnInitializedAsync()
    {
        await GetFiltroCierres();
        foreach (var item in cierres!)
        {
            detalleCierres.Add(new DetalleCierreDTO
                {
                    OC = item.Folio,
                    FchCierre = item?.FchCierre?.ToString("dd/MM/yyyy"),
                    Destino = item?.Destino?.Den,
                    Producto = item?.Producto?.Den,
                    BOL = item?.OrdenEmbarque?.Orden?.BatchId.ToString(),
                    Unidad = item?.OrdenEmbarque?.Tonel?.Veh,
                    Estatus = item?.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den,
                    FchLlegada = item?.FechaLlegada
                });
        }
    }

    private async Task GetFiltroCierres()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/{folio}/detalle");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                cierres = response.Response;
                foreach (var item in cierres)
                    if (item.OrdenEmbarque?.Folio == null)
                        FullesRestantes++;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (cierres != null)
            {
                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 50;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:P1"];
                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<DetalleCierreDTO>(detalleCierres, true);
                tablebody.Style.Font.Size = 14;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Detalle_Cierre_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}
