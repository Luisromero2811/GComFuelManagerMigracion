@inject IRepositorio http
@inject SweetAlertService swal
@inject NotificationService ns
@inject TooltipService ts
@inject IJSRuntime JS


<AuthorizeView Roles="Admin, Administrador Sistema, Coordinador, Programador" Context="Filter">
    <div class="col-12 card shadow-sm">
        <div class="card-header">
            Asignar bol a orden
        </div>
        <div class="card-body">
            <div class="col-12 row">
                <div class="col-3">
                    <input type="text" class="form-control form-control-sm col-12" @bind="folio_.Folio" placeholder="Identificador de orden" />
                </div>
                <div class="col-2">
                    <button class="btn btn-sm gcom-bg-amarillo" @onclick="Obtener_Orden">
                        <i class="fa fa-solid fa-magnifying-glass"></i>
                    </button>
                </div>
            </div>
            <div class="col-12 row my-2">
                <div class="col-4">
                    Terminal de origen: @ordenEmbarque?.Tad?.Den
                </div>
                <div class="col-4">
                    Cliente de origen: @ordenEmbarque?.Destino?.Cliente?.Den
                </div>
                <div class="col-4">
                    Destino de origen: @ordenEmbarque?.Destino?.Den
                </div>
                <div class="col-4">
                    Proucto de origen: @ordenEmbarque?.Producto?.Den
                </div>
                <div class="col-4">
                    Unidad de origen: @ordenEmbarque?.Tonel?.Veh
                </div>
                <div class="col-4">
                    Compartimento de origen: @ordenEmbarque?.Compartment
                </div>
                <div class="col-4">
                    Chofer de origen: @ordenEmbarque?.Chofer?.FullName
                </div>
                <div class="col-4">
                    Precio: @ordenEmbarque?.Pre
                </div>
            </div>
            <div class="col-12 row my-2">
                <EditForm Model="Datos_BOL" OnValidSubmit="Guardar_Orden">
                    <div class="col-12 row d-flex g-1">
                        <div class="col-3">
                            <label>BOL / Embarque</label>
                            <InputNumber @bind-Value="@Datos_BOL.BatchId" class="form-control form-control-sm" />
                            <ValidationMessage For="@(()=>Datos_BOL.BatchId)" />
                        </div>
                        <div class="col-3">
                            <label>Fecha de carga</label>
                            <InputDate @bind-Value="@Datos_BOL.Fchcar" class="form-control form-control-sm" Type="InputDateType.DateTimeLocal" />
                            <ValidationMessage For="@(()=>Datos_BOL.Fchcar)" />
                        </div>
                        <div class="col-3">
                            <label>Fecha de llegada estimada</label>
                            <InputDate @bind-Value="@Datos_BOL.Fecha_llegada" class="form-control form-control-sm" Type="InputDateType.DateTimeLocal" />
                            <ValidationMessage For="@(()=>Datos_BOL.Fchcar)" />
                        </div>
                        <div class="col-3 mt-auto">
                            <label>ETA</label>
                            @Datos_BOL.Eta
                        </div>
                        <div class="col-4">
                            <label>Litros cargados</label>
                            <InputNumber step="0.01" @bind-Value="@Datos_BOL.Vol" class="form-control form-control-sm" />
                            <ValidationMessage For="@(()=>Datos_BOL.Vol)" />
                        </div>
                        <div class="col-4">
                            <label>Pedimento</label>
                            <InputText class="form-control form-control-sm" @bind-Value="@Datos_BOL.Pedimento"/>
                        </div>
                        <div class="col-4">
                            <label>Sellos</label>
                            <InputText class="form-control form-cotrol-sm" @bind-Value="@Datos_BOL.SealNumber"/>
                        </div>
                    </div>
                    <div class="col-12 d-flex justify-content-center mt-2">
                        <div class="col-4">
                            <button class="col-12 btn btn-sm gcom-bg-amarillo">
                                Guardar
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</AuthorizeView>
@*<Cambiar_Estatus_De_Orden_Componente />*@

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Suministros, Analista Credito , Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo" Context="Exportar">
    <!--Segundo formulario para exportación de ETA-->
    <div class="col-12 card shadow mt-3 mb-5">
        <div class="card-body">
            <EditForm Model="@ordenEmbarque">
                <div class="row g3 d-flex">
                    <div class="row justify-content-center">
                        <label><b>Reporte</b></label>
                        <div class="col-md-4" @onmouseenter="@(args => ShowToolsTips(infosIcon))" @ref="infosIcon">
                            <label>Fecha de inicio:</label><i class="fa-solid fa-circle-info fa-xs"></i>
                            <InputDate class="form-control col-12" @bind-Value="@fechas.DateInicio" />
                        </div>
                        <div class="col-md-4">
                            <label>Fecha final</label>
                            <InputDate class="form-control col-12" @bind-Value="@fechas.DateFin" />
                        </div>
                        <div class="col-md-4">
                            <label></label>
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@MostrarEtaFecha"><i class="fa fa-solid fa-eye"></i> <b>Mostrar órdenes</b></button>
                        </div>
                    </div>
                    <!--RadioButtons-->
                    <div class="row col-12 mt-3" style="text-align: center;">
                        <div style="text-align: center;">
                            <label style="text-align: center;">Modelos de Venta (Rack, Delivery's Interno-Externo)</label>
                        </div>
                    </div>
                    <div class="row col-12 mt-3">
                        <div class="d-flex justify-content-center">
                            @*<label>Modelos de Venta</label>*@
                            <div class="form-check form-check-inline">
                                <input type="radio" class="form-check-input" id="Ambas" name="estatus" checked="@(fechas.Estado == 1)" @onchange="@(()=>fechas.Estado = 1)" />
                                <label class="form-check-label" for="Ambas">Ambos Delivery's</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" id="Interno" name="estatus" checked="@(fechas.Estado == 2)" @onchange="@(()=>fechas.Estado = 2)" />
                                <label class="form-check-label" for="Interno">Interno</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" id="Externo" name="estatus" checked="@(fechas.Estado == 3)" @onchange="@(()=>fechas.Estado = 3)" />
                                <label class="form-check-label" for="Externo">Externo</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" id="Todos" name="estatus" checked="@(fechas.Estado == 4)" @onchange="@(()=>fechas.Estado = 4)" />
                                <label class="form-check-label" for="Todos">Delivery-Rack</label>
                            </div>
                        </div>
                    </div>
                </div>
                <!--Tabla de muestreo de datos-->
                <div class="col-12 mt-4 table-responsive ancho-tabla" style="height:450px;resize:both;">
                    <div class="table table-sm table-bordered table-hover" style="font-size:12px;width:2500px;text-align:left;">
                        <table class="table table-sm table-bordered table-hover table-striped" style="font-size:12px;width:2500px;text-align:left;">
                            <thead class="fila" style="position: sticky;">
                                <tr style="max-height:50px;white-space:nowrap; position: sticky;" class="sticky-column">
                                    <th>
                                        Referencia
                                    </th>
                                    <th>
                                        Fecha de Programa
                                    </th>
                                    <th>
                                        Unidad de Negocio
                                    </th>
                                    <th>
                                        Estatus de Orden
                                    </th>
                                    <th style="max-width:200px; position: sticky;">
                                        Fecha de Carga
                                    </th>
                                    <th>
                                        BOL
                                    </th>
                                    <th>
                                        Precio
                                    </th>
                                    <th>
                                        Tipo de Venta
                                    </th>
                                    <th>
                                        Cliente
                                    </th>
                                    <th>
                                        Destino
                                    </th>
                                    <th>
                                        Producto
                                    </th>
                                    <th>
                                        Volumen Natural
                                    </th>
                                    <th>
                                        Volumen Cargado
                                    </th>
                                    <th>
                                        Transportista
                                    </th>
                                    <th>
                                        Unidad
                                    </th>
                                    <th>
                                        Operador
                                    </th>
                                    <th>
                                        ETA
                                    </th>
                                    <th>
                                        Fecha de llegada estimada
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="sticky-column" style="background-color:white;"></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                                <Virtualize Items="@ordens" Context="data" TItem="EtaNTDTO">
                                    <tr class="@(etaDto == data ? "table-active" : string.Empty)" style="white-space:nowrap;">


                                        <td>@data?.Referencia</td>
                                        <td style="max-width:200px; text-align: center;">
                                            <p class="text-break">
                                                @data?.FechaPrograma
                                            </p>
                                        </td>
                                        <td>@data?.Unidad_Negocio</td>
                                        <td>@data?.EstatusOrden</td>
                                        <td>
                                            @(data?.FechaCarga is not null && data?.Bol is not null ? data?.FechaCarga : "")
                                        </td>
                                        <td>@data?.Bol</td>
                                        <td>@data?.Precio</td>
                                        <td style="text-align: center;">
                                            @data?.DeliveryRack
                                        </td>
                                        <td>@data?.Cliente</td>
                                        <td>@data?.Destino</td>
                                        <td>@data?.Producto</td>
                                        <td style="text-align: center;">
                                            @data?.Volms
                                        </td>
                                        <td style="text-align: center;">@data?.Vols</td>
                                        <td>@data?.Transportista</td>
                                        <td>@data?.Unidad</td>
                                        <td>@data?.Operador</td>
                                        <td>@data?.ETA</td>
                                        <td>@data?.Fecha_llegada</td>
                                    </tr>
                                </Virtualize>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row justify-content-end me-3 mt-3 mb-3">
                    <div class="col-3 mt-3 mb-3">
                        <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportExcel"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /><b>Exportar</b></button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

@code {
    EtaNTDTO etaDto = new EtaNTDTO();
    private List<EtaNTDTO> ordens { get; set; } = new List<EtaNTDTO>();
    FechasF fechas = new FechasF();
    ElementReference infosIcon;
    void ShowToolsTips(ElementReference elementReference, TooltipOptions optionss = null!) => ts.Open(elementReference, "En caso de obtener órdenes con Tipo de Venta RACK, solo filtre entre un rango de fechas", optionss);

    Folio_Activo_Vigente folio_ { get; set; } = new();
    OrdenEmbarque ordenEmbarque { get; set; } = new();
    Orden Datos_BOL = new();
    bool loading_guardar = false;
    bool loading_buscar = false;
    private async Task Obtener_Orden()
    {

        try
        {
            loading_buscar = true;
            Datos_BOL.Ref = folio_.Folio;

            Dictionary<string, string> query = new();
            query["Folio"] = folio_.Folio;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await http.Get<OrdenEmbarque>($"api/pedido/orden?{uri}");
            if (response.Error)
            {
                loading_buscar = false;
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading_buscar = false;
                ordenEmbarque = response.Response;
                if (ordenEmbarque.Orden is not null)
                {
                    Datos_BOL.Cod = ordenEmbarque.Orden.Cod;
                    Datos_BOL.Fchcar = ordenEmbarque.Orden.Fchcar;
                    Datos_BOL.BatchId = ordenEmbarque.Orden.BatchId;
                    Datos_BOL.Vol = ordenEmbarque.Orden.Vol;
                }
                else
                {
                    ns.Notify(new() { Summary = "Bol / embarque", Detail = "Esta orden no cuenta con un bol / embarque", Severity = NotificationSeverity.Warning });
                    Datos_BOL.Cod = null!;
                }
            }
        }
        catch (Exception e)
        {
            loading_buscar = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Guardar_Orden()
    {
        try
        {
            loading_guardar = true;
            var response = await http.Post<Orden>("api/pedido/asignar/embarque", Datos_BOL);
            if (response.Error)
            {
                loading_guardar = false;
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                loading_guardar = false;
                folio_.Folio = Datos_BOL.Ref ?? string.Empty;
                ns.Notify(new() { Summary = "Registro guardado", Detail = "Bol / Embarque dato de al ta correctamente", Severity = NotificationSeverity.Success });
                await Obtener_Orden();
            }
        }
        catch (Exception e)
        {
            loading_guardar = false;
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task MostrarEtaFecha()
    {
        try
        {
            var responseHttp = await http.Post<FechasF, List<EtaNTDTO>?>($"api/Eta/Reportesnotuxpan", fechas);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordens = responseHttp.Response!;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ExportExcel()
    {
        try
        {
            var responseHttp = await http.Post<FechasF, List<EtaNTDTO>?>($"api/Eta/Reportesnotuxpan", fechas);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                ordens = responseHttp.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //Generacion de Excel
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("ETA");
                worksheet.Columns.Width = 49;
                worksheet.Columns.AutoFit();
                //Formación de Excel
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    ordens
                  , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                var header = worksheet.Cells["A1:R1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await JS.GuardarComo($"ETA_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}
