@page "/gestionordenes"
@inject IRepositorio repositorio
@inject SweetAlertService swal

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Analista Credito, Programador, Coordinador")]
@if (Is_Checked)
{
    @if (Esta_En_Tuxpan)
    {
        <RadzenTabs>
            <Tabs>
                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador">
                    <RadzenTabsItem Text="ETA" Style="font-size: x-small;">
                        <GComFuelManager.Client.Pages.Formularios.ETA.ETAComponent />
                    </RadzenTabsItem>
                </AuthorizeView>

                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Credito">
                    <RadzenTabsItem Text="Gestión de Estados" Style="font-size: x-small;">
                        <CambiosEstadoComponent />
                    </RadzenTabsItem>
                </AuthorizeView>
            </Tabs>
        </RadzenTabs>
    }
    else
    {
        <RadzenTabs>
            <Tabs>
                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador">
                    <RadzenTabsItem Text="ETA" Style="font-size: x-small;">
                        <Asignar_Embarque_Orden_Componente />
                    </RadzenTabsItem>
                </AuthorizeView>

                <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Programador, Coordinador, Analista Credito">
                    <RadzenTabsItem Text="Gestión de Estados" Style="font-size: x-small;">
                        <CambiosEstadoComponent />
                    </RadzenTabsItem>
                </AuthorizeView>
            </Tabs>
        </RadzenTabs>
    }
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await Checar_Terminal();
    }

    bool Esta_En_Tuxpan = true;
    bool Is_Checked = false;

    private async Task Checar_Terminal()
    {
        try
        {
            var response = await repositorio.Get<Tad>($"api/terminal/check");
            //var response = await repositorio.Post<List<OrdenEmbarque>>($"api/services/simulacion/synthesis", ordens);

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Is_Checked = true;
                Esta_En_Tuxpan = response.Response.Cod == 1;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

