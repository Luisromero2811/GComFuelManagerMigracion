@page "/subir/ordenes"

@inject ILogger<Subir_Ordenes_Component> Logger
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NotificationService ns
@inject DialogService ds
@inject HttpClient http

<div class="card">
    <div class="card-header">
        Subir ordenes
    </div>
    <div class="card-body">
        <div class="col-12 my-2">
            <div class="col-3">
                <button class="col-12 btn btn-sm gcom-bg-amarillo" @onclick="Descargar_Formato">
                    Descargar formato de ordenes
                </button>
            </div>
        </div>
        <InputFile accept=".xlsx, .csv" multiple OnChange="OnInputFileChange" class="form-control form-control-sm"/>
        @if (loading_upload)
        {
            <SpinnerLoading />
        }
        else
        {
            <div class="card">
                <div class="card-body">
                    <ul>
                        @foreach (var file in files)
                        {
                            <li>
                                Archivo: @file.Name
                                <br />
                                @if (FileUpload(UploadResults, file.Name, Logger, out var result))
                                {
                                    <span>Archivo subido</span>
                                }
                                else
                                {
                                    <span>@result.ErrorMessage</span>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
</div>
<div>
    <Tabla Datos="ordens">
        <Cabeceras>
            <tr>
                <th></th>
                <th>Fecha de carga</th>
                <th>Fecha de llegada estimada</th>
                <th>Producto</th>
                <th>Volumen</th>
                <th>Cliente</th>
                <th>Destino</th>
                <th>Turno</th>
                <th>Precio</th>
                <th>Estado</th>
            </tr>
        </Cabeceras>
        <Columnas Context="orden">
            <tr>
                <td>
                    <button class="btn btn-sm btn-danger">
                        <i class="fa fa-solid fa-cancel"></i>
                    </button>
                </td>
                <td>@orden.Fchcar?.ToString("dd/MM/yyyy")</td>
                <td>@orden.OrdenCierre?.FchLlegada?.ToString("dd/MM/yyyy")</td>
                <td>@orden.Obtener_Producto_De_Orden</td>
                <td>@orden.Obtener_Volumen_De_Orden_En_Formato()</td>
                <td>@orden.Obtener_Cliente_De_Orden</td>
                <td>@orden.Obtener_Destino_De_Orden</td>
                <td>@orden.OrdenCierre?.Turno</td>
                <td>@orden.Pre</td>
                <td>@orden.Estado?.den</td>
            </tr>
        </Columnas>
    </Tabla>
</div>
@code {
    bool loading_upload = false;
    private int MaxAllowedFiles = 3;

    private List<File> files = new();
    private List<UploadResult> UploadResults = new();

    private List<OrdenEmbarque> ordens = new();

    private async Task Descargar_Formato()
    {
        try
        {
            var response = await repositorio.Get<byte[]>("api/orden/formato");
            if (response.Error)
            {
                await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
            }
            else
            {
                await js.GuardarComo($"Formato_Ordenes.xlsx", response.Response);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long MaxFileSize = 1024 * 15 * 1024;
        bool upload = false;

        files = new();

        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
        {
            try
            {
                files.Add(new() { Name = file.Name });

                var fileContent = new StreamContent(file.OpenReadStream(MaxFileSize));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation("{FileName} no se ha subido. (Err: 1) {Message}", file.Name, ex.Message);
                UploadResults.Add(new()
                    {
                        FileName = file.Name,
                        ErrorCode = 1,
                        Upload = false
                    });
            }

            if (upload)
            {
                loading_upload = true;

                var response = await repositorio.PostFile<List<OrdenEmbarque>>("api/orden/subir", content);
                if (response.Error)
                {
                    await swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                }
                else
                {
                    ordens.AddRange(response.Response);
                }
                // var response = await http.PostAsync("api/orden/subir", content);
                // // var newResponse = await response.Content.ReadFromJsonAsync<IList<UploadResult>>();

                // // UploadResults = newResponse?.ToList() ?? new();
                // if (response.IsSuccessStatusCode)
                // {
                //     var newResponse = await response.Content.ReadFromJsonAsync<List<OrdenEmbarque>>();
                //     if (newResponse is not null)
                //         ordens = newResponse;
                // }


                loading_upload = false;
            }
        }
    }

    private static bool FileUpload(IList<UploadResult> uploadResults, string filename, ILogger<Subir_Ordenes_Component> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(x => x.FileName == filename);
        if (result is null)
        {
            logger.LogInformation("(Err: 1) {FileName} archivo no subido.", filename);
            result = new();
            result.ErrorCode = 1;
        }

        return result.Upload;
    }

    public class File
    {
        public string Name { get; set; } = string.Empty;
    }
}
