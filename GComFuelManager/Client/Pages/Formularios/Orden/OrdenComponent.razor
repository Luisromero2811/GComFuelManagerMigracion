@page "/orden/{folio?}"
@page "/orden"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject DialogService ds

@attribute [Authorize(Roles = "Administrador Sistema, Cliente Lectura")]
<!--Tabla HTML-->
<div class="card">
    <div class="card-header">
        <b>Historial de órdenes</b>
    </div>
    <div class="card-body">
        <div class="row col-12">
            <div class="col-md-4">
                <div class="col-12 mt-2">
                    <label class="form-label" for="form2Example17">Del:</label>
                    <InputDate class="form-control" @bind-Value="@busquedaOrdenes.DateInicio" @bind-Value:format="yyyy-MM-dd"  />
                </div>
            </div>
            <div class="col-md-4">
                <div class="col-12 mt-2">
                    <label class="form-label" for="form2Example17">Al:</label>
                    <InputDate class="form-control" @bind-Value="@busquedaOrdenes.DateFin" @bind-Value:format="yyyy-MM-dd"/>
                </div>
            </div>
            <div class="col-md-4 d-flex mt-auto">
                <button class="btn gcom-bg-amarillo mt-2 col-12" @onclick="@MostrarOrdenFecha">
                    <i class="fa fa-solid fa-eye"></i>
                    <b>Mostrar Ordenes</b>
                    @if (loadingFiltro)
                    {
                        <SpinnerLoading></SpinnerLoading>
                    }
                </button>
            </div>
        </div>
        <div class="col-12 ancho overflow-scroll mt-4" style="height:450px;resize:both;">
            <table class="table table-sm table-bordered table-hover" id="miTabla">
                <thead class="fila">
                    <tr style="max-height:50px;white-space:nowrap;">
                        <th>Fecha de orden</th>
                        <th>Folio de orden</th>
                        <th>BOL / Embarque</th>
                        <th>Destino</th>
                        <th>Producto</th>
                        <th>Volumen Solicitado</th>
                        <th>Volumen Cargado</th>
                        <th>Transportista</th>
                        <th>Unidad</th>
                        <th>Chofer</th>
                        <th>Estado de la orden</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="fila">
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.destino"/>
                        </td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.producto"/>
                        </td>
                        <td></td>
                        <td></td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.transportista"/>
                        </td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.unidad" />
                        </td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.chofer" />
                        </td>
                        <td>
                            <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaOrdenes.estado"/>
                        </td>
                    </tr>
                    @if (FoliosOrdenes is null)
                    {
                        <tr>
                            <td colspan="12">
                                <p>No hay órdenes</p>
                            </td>
                        </tr>
                    }
                    else if (FoliosOrdenes?.Count > 0)
                    {
                        @foreach (var item in FoliosOrdenes)
                        {
                            <tr>

                                <td>
                                    <RadzenText Text="@item.FchCierre.ToString()" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item?.Folio" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item.OrdenEmbarque.Bol.ToString()" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item?.Destino.Den" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item?.Producto?.Den" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item?.OrdenEmbarque?.Vol.ToString()" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    <RadzenText Text="@item?.OrdenEmbarque.Orden?.Vol.ToString()" TextStyle="TextStyle.Body2" />
                                </td>
                                <td>
                                    @*<RadzenText Text="@item?.OrdenEmbarque.Tonel?.Transportista?.Den" TextStyle="TextStyle.Body2" />*@
                                    @(item?.OrdenEmbarque.Tonel?.Transportista is not null ? item?.OrdenEmbarque.Tonel?.Transportista?.Den : "Sin Transportista asignado")
                                </td>
                                <td>
                                    @*<RadzenText Text="@item?.OrdenEmbarque.Tonel?.Den" TextStyle="TextStyle.Body2" />*@
                                    @(item?.OrdenEmbarque.Tonel is not null ? item?.OrdenEmbarque.Tonel.Den : "Sin Unidad asignada")
                                </td>
                                <td>
                                    @*<RadzenText Text="@item?.OrdenEmbarque.Chofer?.Den" TextStyle="TextStyle.Body2" />*@
                                    @(item?.OrdenEmbarque.Chofer is not null ? item?.OrdenEmbarque.Chofer.Den : "Sin Chofer asignado")
                                </td>
                                <td>
                                    <RadzenText Text="@item?.Estado.den" TextStyle="TextStyle.Body2" />
                                </td>
                            </tr>
                        }

                    }
                    else if (FoliosOrdenes?.Count == 0)
                    {
                        <tr>
                            <td colspan="12">
                                <p>No hay órdenes</p>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-12 row m-0">
            <div class="text-muted col-md-6 mt-2">
                <p>Total de registros: @ConteoTotal</p>
            </div>
            <div class="col-md-6 offset-md-4 mt-2">
                <PaginacionComponent PaginaActual="PaginaActual" PaginaSeleccionada="PaginasSeleccionadas" PaginasTotales="PaginasTotales" />
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="col-md-3 mt-3 mb-3">
            <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportExcel"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /><b>Exportar</b></button>
        </div>
    </div>
</div>
<style type="text/css">
/*    table {
        border-collapse: collapse;
        width: 100%;
        font-size: 12px;
        text-align: left;
        table-layout: fixed;
    }*/

    table, th, td {
        background-color: white;
    }

    .fila th {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 0;
        background-color: #f2f2f2;
    }

    .fila td {
        position: -webkit-sticky;
        position: sticky;
        text-align: center;
        top: 28px;
        background-color: #f2f2f2;
    }
    .ancho {
        width: @TotalWidth;
    }
    /*tr:hover {
        background-color: #FFF633;
    }

    tr:active {
        background-color: #FFF633;
    }

    .asignar {
        table-layout: auto;
        width: auto;
    }*/

    .sticky-column {
        position: sticky;
        left: 0;
        z-index: 1;
        background-color: white;
    }

    .sticky-column-header {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 2;
        background-color: white;
    }

    .sticky-column, .sticky-column + th, .sticky-column + td {
        min-width: 180px;
    }

    /*.table-container {
        overflow: auto;
        width: 100%;
        border: 1px solid #ccc;
        max-height: 400px;*/ /* Establece una altura máxima si es necesario */
    /*}

    th, td {
        padding: 8px;
        border: 1px solid #ccc;
    }*/

    .th-resizable {
        position: relative;
        cursor: col-resize;
    }

        .th-resizable::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 8px;  Ancho del área de redimensionamiento 
            background: transparent;
        }
</style>

@code {
    [Parameter] public string? folio { get; set; } = string.Empty;
    bool loadingFiltro = false;

    OrdenCierre OrdenCierre { get; set; } = new OrdenCierre();

    List<OrdenCierre>? cierres { get; set; } = new List<OrdenCierre>();
    List<OrdenCierre>? cierresD { get; set; } = new List<OrdenCierre>();
    private List<FolioDetalleDTO> FoliosOrdenes { get; set; } = new List<FolioDetalleDTO>();
    private List<FolioDetalleDTO> FoliosOrdenesExcel { get; set; } = new List<FolioDetalleDTO>();

    private int? FullesRestantes { get; set; } = 0;

    RadzenDataGrid<FolioDetalleDTO> grid { get; set; } = new RadzenDataGrid<FolioDetalleDTO>();

    private List<CodDenDTO> meses { get; set; } = new List<CodDenDTO>();
    private int mesSeleccionado { get; set; }

    private List<int> años { get; set; } = new List<int>();
    private int añoSeleccionado { get; set; }

    private List<DetalleCierreDTO> detalleCierres { get; set; } = new List<DetalleCierreDTO>();

    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    bool loadingExport = false;
    bool loading = false;
    bool isDetail = false;
    bool monthFilter = false;
    bool loadingBuscar = false;

    Dictionary<string, string> query = new Dictionary<string, string>();
    ParametrosBusquedaOrdenes busquedaOrdenes = new ParametrosBusquedaOrdenes();
    int PaginasTotales;
    int PaginaActual = 1;
    int ConteoTotal;

    int SelectedTab = 0;
    private short GrupoSeleccionadoFiltro = 0;
    private short GrupoSeleccionadoFiltroB = 0;
    private int ClienteSeleccionadoFiltro = 0;

    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;


    private List<string> Folios { get; set; } = new List<string>();
    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string> ProductList { get; set; } = new List<string>();

    private string DestinoSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    int width = 0;
    string TotalWidth = string.Empty;
    UsuarioInfo user { get; set; } = new UsuarioInfo();

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    bool isClosed = false;

    protected async override Task OnInitializedAsync()
    {
        //width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        var cm = await js.GetItemLocalStorage("CloseMenu");
        if (!string.IsNullOrEmpty(cm))
            isClosed = bool.Parse(cm);

        if (isClosed)
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
        else
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";
        var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.ToList();
        months.RemoveAt(months.IndexOf(months.Last()));
        var i = 1;
        foreach (var item in months)
        {

            meses.Add(new CodDenDTO { Cod = i, Den = item.ToString() });
            i++;
        }
        await GetYears();
        await CheckClient();
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(folio))
        {
            filtro.Folio = folio!;
            await GetFiltroCierres(true);
        }

    }
    <!--Aquí empieza el footer-->
    private async Task PaginasSeleccionadas(int pagina)
    {
        PaginaActual = pagina;
        busquedaOrdenes.pagina = PaginaActual;
        await LoadData();
    }
    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
    private async Task LoadData()
    {
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["producto"] = busquedaOrdenes.producto;
        queryStringObject["destino"] = busquedaOrdenes.destino;
        queryStringObject["transportista"] = busquedaOrdenes.transportista;
        queryStringObject["unidad"] = busquedaOrdenes.unidad;
        queryStringObject["chofer"] = busquedaOrdenes.chofer;
        queryStringObject["estado"] = busquedaOrdenes.estado;
        queryStringObject["pagina"] = busquedaOrdenes.pagina.ToString();
        queryStringObject["tamanopagina"] = busquedaOrdenes.tamanopagina.ToString();

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await GetOrders(uri);
    }

    private async Task MostrarOrdenFecha()
    {
        try
        {
            loading = true;
            query = new Dictionary<string, string>();
            query["DateInicio"] = busquedaOrdenes.DateInicio.ToString("MM/dd/yyyy") ?? string.Empty;
            query["DateFin"] = busquedaOrdenes.DateFin.ToString("MM/dd/yyyy") ?? string.Empty;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var response = await http.Get<List<FolioDetalleDTO>>($"api/pedido/filtrohist?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                PaginasTotales = int.Parse(response.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                ConteoTotal = int.Parse(response.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActual = int.Parse(response.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                FoliosOrdenes = response.Response;

            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetOrders(string uri)
    {
        try
        {
            loading = true;
            var response = await http.Get<List<FolioDetalleDTO>>($"api/pedido/detalle?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                PaginasTotales = int.Parse(response.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                ConteoTotal = int.Parse(response.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActual = int.Parse(response.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                FoliosOrdenes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ExportExcel()
    {
        try
        {
            var responseHttp = await http.Get<List<FolioDetalleDTO>?>($"api/pedido/Excel");
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                FoliosOrdenesExcel = responseHttp.Response!;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //Generacion de Excel
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("Órdenes");
                worksheet.Columns.Width = 49;
                worksheet.Columns.AutoFit();
                //Formación de Excel
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    FoliosOrdenesExcel
                  , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                var header = worksheet.Cells["A1:F1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await js.GuardarComo($"Órdenes_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetYears()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cierre/years");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetFiltroCierres(bool forFolio)
    {
        try
        {
            filtro.forFolio = forFolio;
            monthFilter = false;

            if (!forFolio)
            {
                if (mesSeleccionado != 0 && añoSeleccionado != 0)
                {
                    int fchFin = DateTime.DaysInMonth(Convert.ToInt32(mesSeleccionado), mesSeleccionado);
                    filtro.FchInicio = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, 1);
                    filtro.FchFin = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, fchFin).AddHours(11).AddMinutes(59).AddSeconds(59);
                    monthFilter = true;
                }
                else
                {
                    await Swal.FireAsync("Alerta", "Seleccione datos validos para filtrar.", SweetAlertIcon.Warning);
                    return;
                }
            }

            if (filtro != null)
            {
                filtro.forFolio = forFolio;
                var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
                if (response != null)
                {
                    if (response.Error)
                    {
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        cierres = response.Response;

                        if (cierres.Any(x => x.CodPed == 0))
                            isDetail = true;
                        else
                            isDetail = false;

                        if (isDetail && !monthFilter)
                        {
                            var responseD = await http.Get<List<OrdenCierre>>($"api/cierre/{filtro.Folio}/detalle");
                            if (responseD.Error)
                            {
                                var message = await responseD.ObtenerMensajeError();
                                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                            }
                            else
                            {
                                cierresD = responseD.Response;
                            }
                        }

                        var responseVolumen = await http.Post<CierreFiltroDTO, VolumenDisponibleDTO>($"api/cierre/volumen", filtro);
                        if (response.Error)
                        {
                            var message = await response.ObtenerMensajeError();
                            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        }
                        else
                        {
                            volumenDisponible = responseVolumen.Response;
                        }
                        ProductList = cierres?.DistinctBy(x => x.Producto?.Den).Select(x => x.Producto?.Den)!;
                        DestinoList = cierres?.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                        //StateHasChanged();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel(bool isDetail)
    {
        try
        {
            List<OrdenCierre> lista = new List<OrdenCierre>();

            if (isDetail)
                lista = cierresD;
            else
                lista = cierres;

            if (lista != null)
            {

                foreach (var item in lista!)
                {
                    if (item.Producto!.Den == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado)
                    && (item.Destino.Den == DestinoSeleccionado || string.IsNullOrEmpty(DestinoSeleccionado)))
                        detalleCierres.Add(new DetalleCierreDTO
                        {
                            OC = item.Folio,
                            FchCierre = item?.FchCierre?.ToString("dd/MM/yyyy"),
                            Destino = item?.Destino?.Den,
                            Producto = item?.Producto?.Den,
                            BOL = item?.OrdenEmbarque?.Orden?.BatchId.ToString(),
                            FolioReferencia = item?.OrdenEmbarque?.Folio.ToString(),
                            Observaciones = item?.Observaciones,
                            Precio = item?.Precio.ToString("N"),
                            Volumen = item?.OrdenEmbarque?.Orden is not null ? item?.OrdenEmbarque?.Orden?.Vol
                                                   : item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom.ToString())
                                                   : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom2.ToString())
                                                   : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom3.ToString())
                                                   : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? double.Parse(item?.OrdenEmbarque?.Tonel?.Capcom4.ToString())
                                                   : item?.Volumen
                                                            ,
                            Unidad = item?.OrdenEmbarque?.Tonel?.Veh,
                            Estatus = item?.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den,
                            FchLlegada = item?.FechaLlegada
                        });
                }


                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 60;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:L1"];
                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<DetalleCierreDTO>(detalleCierres, true);
                tablebody.Style.Font.Size = 14;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                if (isDetail)
                    await js.GuardarComo($"Estado_Detalle_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                else
                    await js.GuardarComo($"Estado_Resumen_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
                detalleCierres.Clear();
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetFoliosFiltro()
    {
        try
        {
            var response = await http.Post<CierreFiltroDTO, List<string>>($"api/cierre/folios/{user.CodCte}", fechas);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
                Folios = response.Response;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientesFiltro()
    {
        try
        {
            if (GrupoSeleccionadoFiltro != 0 && GrupoSeleccionadoFiltroB != GrupoSeleccionadoFiltro)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{GrupoSeleccionadoFiltro}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoFiltroB = GrupoSeleccionadoFiltro;
                    ClientesFiltro = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task CheckClient()
    {
        try
        {
            var response = await http.Get<UsuarioInfo>("api/cuentas/check/client");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                user = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task OpenModal()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosOrdenesComponent>("Folios de pedidos",
            new Dictionary<string, object>() { { "isStatus", true } },
            new DialogOptions()
            {
                Width = "90%",
                Height = "600px",
                Resizable = true,
                Draggable = false
            });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
