@page "/orden/{folio?}"
@page "/orden"

@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js

<AuthorizeView Roles="Admin, Administrador Sistema, Cliente Lectura">
    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical">

        <div class="col-12 d-flex justify-content-center mb-2 shadow-sm">
            <div class="col-12">
                <div class="col-12 card">
                    <div class="col-12 card-body">
                        <div class="col-12 row">
                            <div class="col-4 row">
                                <div class="col-6">
                                    <label class="form-label">Folio</label>
                                    <InputText class="form-control col-12" @bind-Value="filtro.Folio" />
                                </div>
                                <div class="col-6 d-flex">
                                    <div class="col-12 mt-auto">
                                        <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@(()=>GetFiltroCierres(true))">
                                            <i class="fa fa-solid fa-magnifying-glass"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-3">
                                <label class="form-label">Año</label>
                                <InputSelect @bind-Value="añoSeleccionado" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (años is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (años.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in años)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4">
                                <label class="form-label">Mes</label>
                                <InputSelect @bind-Value="mesSeleccionado" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (meses is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (meses.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in meses)
                                        {
                                            <option value="@item.Cod">@item.Den.ToUpper()</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-1 d-flex ">
                                <div class="col-12 mt-auto">
                                    <button class="col-12 btn gcom-bg-amarillo" @onclick="@(()=>GetFiltroCierres(false))">
                                        <i class="fa fa-solid fa-magnifying-glass"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="col-12 row mb-3">
                <div class="col-6 d-flex">
                    <b class="my-auto">
                        Fulles: @(Convert.ToDouble(cierres?.Count) / 2) | Fulles restantes: @(Convert.ToDouble(FullesRestantes) / 2)
                    </b>
                </div>
                <div class="col-6 d-flex justify-content-end">
                    <button class="btn gcom-bg-amarillo col-6" @onclick="@GenerateExcel">
                        <i class="fa-solid fa-file-excel fa"></i> Exportar
                        @if (loadingExport)
                        {
                            <SpinnerLoading></SpinnerLoading>
                        }
                    </button>
                </div>
            </div>
        </div>

        <RadzenDataGrid TItem="OrdenCierre" Data="@cierres" AllowColumnResize="true" AllowVirtualization="true"
                        GridLines="DataGridGridLines.Both" class="ancho" Style="height:500px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        IsLoading="loading" @ref="@grid" AllowSorting="true" AllowFiltering="true" AllowColumnPicking="true">
            <Columns>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Frozen="true" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="BOL" Property="OrdenEmbarque.Orden.BatchId" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="Destino.Den" FilterValue="DestinoSeleccionado">
                    <FilterTemplate Context="Destinos">
                        <RadzenDropDown Data="DestinoList" @bind-Value="DestinoSeleccionado" AllowClear="true"></RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div>
                            @data?.Destino?.Den
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Unidad" Property="OrdenEmbarque.Tonel.Placatracto" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto.Den">
                    <FilterTemplate Context="filter">
                        <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true"></RadzenDropDown>
                    </FilterTemplate>
                    <Template Context="data">
                        <div class="col-12 row">
                            <div class="col-1">
                                @if (data.Producto.Cod == 25 || data.Producto.Cod == 26 || data.Producto.Cod == 27)
                                {
                                    <div class="badge rounded-pill regular">&nbsp;</div>
                                }
                                else if (data.Producto.Cod == 11 || data.Producto.Cod == 12 || data.Producto.Cod == 116)
                                {
                                    <div class="badge rounded-pill regular-vdm">&nbsp;</div>
                                }
                                else if (data.Producto.Cod == 19 || data.Producto.Cod == 20 || data.Producto.Cod == 21)
                                {
                                    <div class="badge rounded-pill premium">&nbsp;</div>
                                }
                                else
                                {
                                    <div class="badge rounded-pill diesel">&nbsp;</div>
                                }
                            </div>
                            <div class="col-11">
                                @data.Producto?.Den
                            </div>
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Property="Precio" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Property="Volumen" Filterable="false" FormatString="{0:N2}" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Estado" Filterable="false">
                    <Template Context="item">
                        @(item.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de entrega" Property="FchLlegada" FormatString="{0:d}" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Observaciones" Property="Observaciones" Filterable="false" />
            </Columns>
        </RadzenDataGrid>

    </RadzenStack>
</AuthorizeView>
@code {
    [Parameter] public string? folio { get; set; } = string.Empty;

    OrdenCierre OrdenCierre { get; set; } = new OrdenCierre();

    List<OrdenCierre>? cierres { get; set; }

    private int? FullesRestantes { get; set; } = 0;

    RadzenDataGrid<OrdenCierre> grid { get; set; } = new RadzenDataGrid<OrdenCierre>();

    private List<CodDenDTO> meses { get; set; } = new List<CodDenDTO>();
    private int mesSeleccionado { get; set; }

    private List<int> años { get; set; } = new List<int>();
    private int añoSeleccionado { get; set; }

    private List<DetalleCierreDTO> detalleCierres { get; set; } = new List<DetalleCierreDTO>();

    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    bool loadingExport = false;
    bool loading = false;

    private string ProductoSeleccionado = string.Empty;
    private IEnumerable<string> ProductList { get; set; } = new List<string>();

    private string DestinoSeleccionado = string.Empty;
    private IEnumerable<string?> DestinoList { get; set; } = new List<string>();

    protected async override Task OnInitializedAsync()
    {
        var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames.ToList();
        months.RemoveAt(months.IndexOf(months.Last()));
        var i = 1;
        foreach (var item in months)
        {

            meses.Add(new CodDenDTO { Cod = i, Den = item.ToString() });
            i++;
        }
        await GetYears();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(folio))
        {
            filtro.Folio = folio!;
            await GetFiltroCierres(true);
        }

    }

    private async Task GetYears()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cierre/years");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                años = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetFolioCierres()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/{folio}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                cierres = response.Response;
                foreach (var item in cierres)
                    if (item.OrdenEmbarque?.Folio == null)
                        FullesRestantes++;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetFiltroCierres(bool forFolio)
    {
        try
        {
            filtro.forFolio = forFolio;

            if (!forFolio)
            {
                int fchFin = DateTime.DaysInMonth(Convert.ToInt32(mesSeleccionado), mesSeleccionado);
                filtro.FchInicio = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, 1);
                filtro.FchFin = new DateTime(Convert.ToInt32(añoSeleccionado), mesSeleccionado, fchFin).AddHours(11).AddMinutes(59).AddSeconds(59);
            }

            var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                cierres = response.Response;
                FullesRestantes = 0;
                foreach (var item in cierres)
                    if (item.OrdenEmbarque?.Folio == null)
                        FullesRestantes++;
                ProductList = cierres.DistinctBy(x => x.Producto.Den).Select(x => x.Producto.Den);
                DestinoList = cierres.DistinctBy(x => x.Destino?.Den).Select(x => x.Destino?.Den)!;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GenerateExcel()
    {
        try
        {
            if (cierres != null)
            {

                foreach (var item in cierres!)
                {
                    if (item.Producto!.Den == ProductoSeleccionado || string.IsNullOrEmpty(ProductoSeleccionado))
                        detalleCierres.Add(new DetalleCierreDTO
                        {
                            OC = item.Folio,
                            FchCierre = item?.FchCierre?.ToString("dd/MM/yyyy"),
                            Destino = item?.Destino?.Den,
                            Producto = item?.Producto?.Den,
                            BOL = item?.OrdenEmbarque?.Orden?.BatchId.ToString(),
                            Unidad = item?.OrdenEmbarque?.Tonel?.Veh,
                            Estatus = item?.OrdenEmbarque?.Orden != null ? item.OrdenEmbarque?.Orden?.Estado?.den : item?.OrdenEmbarque?.Estado?.den,
                            FchLlegada = item?.FechaLlegada
                        });
                }

                loadingExport = true;
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierre");
                ws.Columns.Width = 60;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:H1"];
                var tablebody = ws.Cells["A1:A1"].LoadFromCollection<DetalleCierreDTO>(detalleCierres, true);
                tablebody.Style.Font.Size = 14;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;
                header.Style.Font.Size = 14;

                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Detalle_{DateTime.Now.ToString()}.xlsx", excel.GetAsByteArray());
                loadingExport = false;
                detalleCierres.Clear();
            }
            else
            {
                loadingExport = false;
                await Swal.FireAsync("Alerta", "No hay datos que exportar.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
