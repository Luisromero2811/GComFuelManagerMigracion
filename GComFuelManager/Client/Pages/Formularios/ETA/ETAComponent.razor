@page "/ETA"
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager navigationManager
@using System.IO;
@using System.Text.Json;
@using GComFuelManager.Client.Helpers;
@using System.Globalization;
@inject TooltipService ts
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Suministros, Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo, Comprador")]


<h4><b>ETA</b></h4>
<!--Primer formulario para tiempo estimado de llegada del pedido-->
<div class="col-12 card shadow">
    <div class="card-body">
        <EditForm Model="Ordenes" class="row">
            <AuthorizeView Roles="Admin, Administrador Sistema, Coordinador, Capturista Recepcion Producto, Comprador" Context="Filter">
                <div class="row d-flex g-3">
                    <div class="row">
                        <div class="col-6">
                            <label>Número de Bol:</label>
                            <InputNumber class="form-control" @bind-Value="Ordenes.Bol" MaxLenght="20" />
                        </div>
                        <div class="col-1 mt-4">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@GetOrden">
                                <i class="fa-solid fa-magnifying-glass"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </AuthorizeView>
            <AuthorizeView Roles="Admin, Administrador Sistema, Coordinador" Context="Eta">
                <div class="row d-flex g-3">
                    <div class="row">
                        <div class="col-4">
                            <label>Fecha documentación:</label>
                            <RadzenDatePicker class="col-12" ShowTime="true" Culture="CultureInfo.CurrentCulture" ShowSeconds="true"
                                              @bind-Value="Ordenes.FchDoc"></RadzenDatePicker>
                        </div>
                        @*<div class="col-4">
                            <label>ETA:</label>
                            <RadzenDatePicker @bind-Value="time" ShowTime="true" TimeOnly="true" DateFormat="HHmm" class="col-12"/>
                            </div>*@
                        <div class="col-4">
                            <label>Fecha de llegada estimada:</label>
                            <RadzenDatePicker class="col-12" ShowTime="true" Culture="CultureInfo.CurrentCulture" ShowSeconds="true"
                                              @bind-Value="Ordenes.Fchlleest"></RadzenDatePicker>
                        </div>
                    </div>
                </div>
            </AuthorizeView>
            <div class="row d-flex g-3">
                <div class="row">
                    <AuthorizeView Roles="Admin, Administrador Sistema, Coordinador" Context="Trayectos">
                        <div class="col-4">
                            <label>En trayecto:</label>
                            <InputSelect @bind-Value="@Ordenes.Orden!.Codest" class="form-select" TValue="byte?">
                                <option value="20">NO</option>
                                <option value="26">SI</option>
                            </InputSelect>
                        </div>
                    </AuthorizeView>
                    <AuthorizeView Roles="Admin, Administrador Sistema, Coordinador, Capturista Recepcion Producto" Context="Equipo">
                        <div class="col-4">
                            <label>Equipo:</label>
                            <RadzenTextBox class="col-12" Disabled="true" @bind-Value="@Ordenes.Orden!.Tonel!.Tracto"></RadzenTextBox>
                        </div>
                    </AuthorizeView>
                </div>
            </div>



            <AuthorizeView Roles="Admin, Administrador Sistema, Capturista Recepcion Producto, Comprador" Context="EtaReal">
                <!--btn look-->
                <div class="row d-flex g-3">
                    <div class="row justify-content-end">
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <label>Fecha real de llegada a destino:</label>
                        <RadzenDatePicker class="col-12" ShowTime="true" Culture="CultureInfo.CurrentCulture" ShowSeconds="true"
                                          @bind-Value="Ordenes.Fchrealledes"></RadzenDatePicker>
                    </div>
                    <div class="col-6" @onmouseenter="@(args => ShowToolTips(infoIcons))" @ref="infoIcons">
                        <label>Cantidad de litros recibidos:</label><i class="fa-solid fa-circle-info fa-xs"></i>
                        <RadzenNumeric class="form-control" @bind-Value="Ordenes.Litent" TValue="double?" MaxLenght="30" Format="n" Culture=" CultureInfo.CurrentCulture"/>
                        @*<InputNumber @bind-Value="Ordenes.Litent" class="form-control" FormatString="N0"/>*@
                        <!--Format="#,0.00" Format="n2"-->
                    </div>
                </div>
                <div class="row g-3 mt-1 mb-2">
                    <div class="col-6">
                        <label>Observaciones</label>
                        <InputTextArea class="form-control" @bind-Value="Ordenes.Obs" MaxLenght="260" Placeholder="Máximo de 260 caracteres"></InputTextArea>
                    </div>
                </div>
            </AuthorizeView>
            <AuthorizeView Roles="Admin, Administrador Sistema, Capturista Recepcion Producto, Coordinador, Comprador" Context="Actions">
                <div class="row d-flex g-3">
                    <div class="row justify-content-end">
                        <div class="col-3 mt-3 mb-3" @onmouseenter="@(args => ShowToolTip(infoIcon))" @ref="infoIcon">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="SendOrdenEta">
                                <i class="fa-solid fa-floppy-disk"></i> <b>Guardar</b>
                            </button>
                        </div>
                    </div>
                </div>
            </AuthorizeView>
        </EditForm>
    </div>
</div>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Coordinador, Analista Suministros, Analista Credito , Auditor, Capturista Recepcion Producto, Ejecutivo de Cuenta Operativo" Context="Exportar">
    <!--Segundo formulario para exportación de ETA-->
    <div class="col-12 card shadow mt-3 mb-5">
        <div class="card-body">
            <EditForm Model="@ordenEmbarque">
                <div class="row g3 d-flex">
                    <div class="row">
                        <label><b>Reporte</b></label>
                        <div class="col-md-4" @onmouseenter="@(args => ShowToolsTips(infosIcon))" @ref="infosIcon">
                            <label>Fecha de inicio:</label><i class="fa-solid fa-circle-info fa-xs"></i>
                            <InputDate class="form-control col-12" @bind-Value="@fechas.DateInicio" />
                        </div>
                        <div class="col-md-4">
                            <label>Fecha final</label>
                            <InputDate class="form-control col-12" @bind-Value="@fechas.DateFin" />
                        </div>
                        <div class="col-md-4" @onmouseenter="@(args => ShowToolsTip(infossIcon))" @ref="infossIcon">
                            <label>Tipo de Venta (Solo Delivery)</label><i class="fa-solid fa-circle-info fa-xs"></i>
                            <InputSelect class="form-select" @bind-Value="@fechas.TipVenta">
                                <option>--Seleccione una opcion</option>
                                @if (TpVenta is null)
                                {
                                    <option disabled> Cargando ...</option>
                                }
                                else if (TpVenta.Count == 0)
                                {
                                    <option disabled> No hay tipos de venta</option>
                                }
                                else
                                {
                                    foreach (var item in TpVenta)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }

                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="row justify-content-end me-3 mt-3 mb-3">
                    <div class="col-3 mt-3 mb-3">
                        <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportExcel"><img src="img/sobresalir.png" class="img-fluid" style="width:16px; height:auto;" /><b>Exportar</b></button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

@code {

    //Element References
    ElementReference infossIcon;
    ElementReference infosIcon;
    ElementReference infoIcons;
    //Tooltips de reportes
    void ShowToolsTip(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "En caso de buscar ordenes de tipo Delivery, seleccione un rango de fechas y escoja una opción de venta", options);
    void ShowToolsTips(ElementReference elementReference, TooltipOptions optionss = null!) => ts.Open(elementReference, "En caso de buscar Ordenes con Tipo de Venta RACK, solo filtre entre un rango de fechas", optionss);
    void ShowToolTips(ElementReference elementReference, TooltipOptions option = null!) => ts.Open(elementReference, "Favor de de utilzar formato de separadores de miles. Ejemplo: 11.000,00 = Once mil", option);

    //Obtención de datos de la tabla Orden enlistados
    private Orden ordenEmbarque { get; set; } = new Orden();
    private List<EtaDTO> ordens { get; set; } = null!;
    private List<string> TpVenta { get; set; } = new List<string> { "Interno", "Externo" };

    Cliente cliente { get; set; } = new Cliente();
    //Instancia a modelo de OrdEmbDet
    OrdEmbDet Ordenes { get; set; } = new OrdEmbDet()
    {
        Orden = new Orden()
        {
            Estado = new Estado(),
            Tonel = new Tonel()
        }
    };
    //Instancia a DTO
    FechasF fechas = new FechasF();
    EtaDTO etaDto = new EtaDTO();

    ElementReference infoIcon;

    TimeOnly time;

    void ShowToolTip(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Este boton funciona simultaneamente para Editar como para Guardar el ETA Real", options);

    public async Task GetOrden()
    {
        try
        {
            //Tiempo Estimado de Arribo
            etaDto.Bol = Ordenes.Bol;
            var responseHttp = await repositorio.Post<EtaDTO, OrdEmbDet>($"api/Eta/Filtro", etaDto);
            if (responseHttp.Error)
            {
                Ordenes = null!;
                Ordenes = new OrdEmbDet() { Orden = new Orden() { Estado = new Estado(), Tonel = new Tonel() } };
                var respuestaHttp = await responseHttp.ObtenerMensajeError();

                await swal.FireAsync("Error", respuestaHttp + " " + "Debe ingresar un BOL Valido", SweetAlertIcon.Error);
            }
            else
            {
                Ordenes = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task SendOrdenEta()
    {
        try
        {

            if (Ordenes.Bol != 0 && Ordenes.Bol != null)
            {
                if (Ordenes?.Orden?.Codest != 0)
                {
                    Ordenes.Orden!.BatchId = Ordenes.Bol;

                    var responseHttp = await repositorio.Post<OrdEmbDet, OrdEmbDet>($"api/eta", Ordenes);
                    if (responseHttp.Error)
                    {
                        var respuestaHttp = await responseHttp.ObtenerMensajeError();
                        await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await GetOrden();
                        await swal.FireAsync("Exito", "La orden ha sido registrada con exito", SweetAlertIcon.Success);
                    }
                }
                else
                    await swal.FireAsync("Alerta", "Selecione un valor valido para En Trayecto.", SweetAlertIcon.Warning);
            }
            else
                await swal.FireAsync("Alerta", "Ingrese un BOL valido.", SweetAlertIcon.Warning);
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task ExportExcel()
    {
        try
        {
            var responseHttp = await repositorio.Post<FechasF, List<EtaDTO>?>($"api/Eta/Etareporte", fechas);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                ordens = responseHttp.Response;
                //Licencia para guardado de Excel
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                //Generacion de Excel
                var excel = new ExcelPackage();
                var worksheet = excel.Workbook.Worksheets.Add("ETA");
                worksheet.Columns.Width = 49;
                worksheet.Columns.AutoFit();
                //Formación de Excel
                var tablebody = worksheet.Cells["A1:A1"].LoadFromCollection(
                    ordens
                  , true);
                tablebody.Style.Font.Bold = true;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                var header = worksheet.Cells["A1:T1"];
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                //Guardar Excell
                await JS.GuardarComo($"ETA_{DateTime.Now.ToString("yyyyy-MM-dd hh:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

