@page "/autorizadores"
@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject TooltipService ts
@inject NotificationService ns
@inject AutorizadoresValidation validarAutorizador

<h3>Autorizadores</h3>

<div class="card">
    <div class="card-header">
        <b>Gestión de Autorizadores</b>
    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="@Autorizadores" class="form col-12" OnValidSubmit="@SaveAutorizador" Context="validacion">
                <FluentValidationValidator Validator="validarAutorizador" />
                <ValidationSummary />
                <div class="col-12 row">
                    <div class="col-4">
                        <label>Nombre del Autorizador</label>
                        <InputText @bind-Value="Autorizadores.Den" class="form-control" MaxLenght="80" />
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        <button class="col-12 btn gcom-bg-amarillo" type="submit">
                            <i class="fa fa-solid fa-plus"></i> Registrar autorizador
                        </button>
                    </div>
                </div>
            </EditForm>
            <hr />
            <div class="col-12 row">
                <h5>Relacionar Autorizadores - Unidades de Negocio</h5>
                <div class="col-4">
                    <label>Autorizadores:</label>
                    <DropDownFilter Listado="Autorizadoress" TListado="Autorizador" TValue="int" Seleccion_Multiple="true" FiltrarValor="Obtener_Autorizadores"
                                    Default_Placeholder="Seleccione un Autorizador">
                        <RenderValue>
                            <div>Autorizadores</div>
                        </RenderValue>
                        <Render>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Autorizadores_Seleccionados.Contains(context))" @onchange="args => { CheckGrupo(context, args?.Value); }" />
                                <label class="form-check-label" for="@context.Cod">
                                    @if (context is not null)
                                    {
                                        @context.Den
                                    }
                                    else
                                    {
                                        <p>Todos</p>
                                    }
                                </label>
                            </div>
                        </Render>
                    </DropDownFilter>
                </div>
                <div class="col-4">
                    <label>Unidades de Negocio:</label>
                    <DropDownFilter Listado="Terminales" TListado="Tad" TValue="Int16" Seleccion_Multiple="true" Default_Placeholder="Seleccione una unidad de negocio">
                        <RenderValue>
                            <div>Unidades de negocio</div>
                        </RenderValue>
                        <Render>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="@context.Cod" checked="@(Tads_Seleccionados.Contains(context))" @onchange="args => { CheckTads(context, args?.Value); }" />
                                <label class="form-check-label" for="@context.Cod">
                                    @if (context is not null)
                                    {
                                        @context.Den
                                    }
                                    else
                                    {
                                        <p>Todos</p>
                                    }
                                </label>
                            </div>
                        </Render>
                    </DropDownFilter>
                </div>
                <div class="col-4">
                    <label></label>
                    <button class="col-12 mt-auto btn gcom-bg-amarillo" type="submit" @onclick="@PostRelacion">
                        <i class="fa fa-solid fa-plus"></i> Relacionar Autorizadores-Unidad
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card mt-2" style="height: 500px; overflow: scroll;">
    <div class="card-header">
        <b>Gestión de Grupo Transportes - Unidades de negocio</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-12">
                <table class="table table-sm table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" checked="@(Autorizadoress.Any(i => Autorizadores_Seleccionados != null && Autorizadores_Seleccionados.Contains(i)))"
                                       @onchange="args => CheckItemAll(args?.Value)" />
                            </th>
                            <th>Autorizadores</th>
                            <th>Unidades de Negocio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Autorizadoress.Count > 0)
                        {
                            <Virtualize Items="Autorizadoress" TItem="Autorizador" Context="item">
                                <tr>
                                    <th>
                                        <input class="form-check-input" type="checkbox" value="" id="@item.Cod" checked="@(Autorizadores_Seleccionados.Contains(item))" @onchange="args => { CheckGrupo(item, args?.Value); }" />
                                    </th>
                                    <td>@item.Den</td>
                                    <td>
                                        @if (item.Terminales is not null)
                                        {
                                            @foreach (var items in item.Terminales)
                                            {
                                                <span class="badge rounded-pill gcom-bg-rojo me-2">
                                                    @items.Den

                                                    <button class="button-circle gcom-bg-amarillo" @onclick="@(()=>Borrar_Relacion(item, items))">
                                                        <i class="fa fa-solid fa-xmark"></i>
                                                    </button>

                                                </span>
                                            }
                                        }
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .button-circle { /* Green */
        border: none;
        color: white;
        padding: .40rem .60rem;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: .75rem;
        cursor: pointer;
        border-radius: 2rem;
    }
</style>

@code {
    Autorizador Autorizadores { get; set; } = new Autorizador();
    List<Autorizador> Autorizadoress { get; set; } = new();
    List<Autorizador> Autorizadores_Seleccionados { get; set; } = new();
    List<Tad> Tads_Seleccionados { get; set; } = new();
    List<Tad> Terminales { get; set; } = new List<Tad>();
    ClienteTadDTO clienteTadDTO { get; set; } = new ClienteTadDTO();
    Autorizadores_Tad autorizadores_Tad { get; set; } = new Autorizadores_Tad();

    protected override async Task OnInitializedAsync()
    {
        await Obtener_Terminales_Validas();
        await ObtenerAutorizadores();
        await Obtener_Autorizadores(string.Empty);
    }

    private async Task SaveAutorizador()
    {
        try
        {
            var responseHTTP = await repositorio.Post<Autorizador>("api/Autorizadores/save", Autorizadores);
            if (responseHTTP.Error)
            {
                var response = await responseHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", response, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Exito", $"Autorizador {Autorizadores.Den} creado con éxito", SweetAlertIcon.Success);
                await ObtenerAutorizadores();
                await Obtener_Autorizadores(string.Empty);
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task PostRelacion()
    {
        try
        {
            if (Tads_Seleccionados.Count != 0 && Autorizadores_Seleccionados.Count != 0)
            {
                clienteTadDTO.Tads = Tads_Seleccionados;
                clienteTadDTO.Autorizadors = Autorizadores_Seleccionados;
                var response = await repositorio.Post<ClienteTadDTO>($"api/Autorizadores/relacion", clienteTadDTO);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    await swal.FireAsync("Exito", $"Autorizador relacionado exitosamente", SweetAlertIcon.Success);
                    Autorizadoress = new();
                    Autorizadores_Seleccionados = new();
                    await ObtenerAutorizadores();
                }
            }
            else
            {
                await swal.FireAsync("Advertencia", "Debe de seleccionar una terminal y un Autorizador", SweetAlertIcon.Warning);
            }

        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Autorizadores(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["Den"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<Autorizador>>($"api/Autorizadores/filtraractivos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Autorizadoress = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerAutorizadores()
    {
        try
        {
            var response = await repositorio.Get<List<Autorizador>>("api/Autorizadores/gruposactivos");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Autorizadoress = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Terminales_Validas()
    {
        try
        {
            var response = await repositorio.Get<List<Tad>>("api/terminal/activasNOTXP");
            if (response.Error)
            {
                string? message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);

        }
    }

    private async Task Borrar_Relacion(Autorizador grupos, Tad tads)
    {
        try
        {
            autorizadores_Tad.Id_Terminal = tads.Cod;
            autorizadores_Tad.Id_Autorizador = grupos.Cod;
            var response = await repositorio.Post<Autorizadores_Tad>($"api/Autorizadores/borrar/relaciones", autorizadores_Tad);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Exito", "Relacion borrada con éxito", SweetAlertIcon.Success);
                await Obtener_Autorizadores(string.Empty);

            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckTads(Tad terminal, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Add(terminal);
            }
            else
            {
                if (Tads_Seleccionados.Contains(terminal))
                    Tads_Seleccionados.Remove(terminal);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckGrupo(Autorizador autorizador, object check)
    {
        try
        {
            if ((bool)check)
            {
                if (!Autorizadores_Seleccionados.Contains(autorizador))
                    Autorizadores_Seleccionados.Add(autorizador);
            }
            else
            {
                if (Autorizadores_Seleccionados.Contains(autorizador))
                    Autorizadores_Seleccionados.Remove(autorizador);
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

    private async Task CheckItemAll(object check)
    {
        try
        {
            if ((bool)check)
                Autorizadores_Seleccionados = Autorizadoress;
            else
                Autorizadores_Seleccionados = new();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }

}

