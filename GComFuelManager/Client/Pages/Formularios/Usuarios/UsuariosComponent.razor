@page "/usuarios"

@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia")]

<AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="Usuarios">
    <h4><b>Usuarios</b></h4>
    <!--Maquetacion formulario de usuarios-->
    <div class="col-12 card shadow p-2">
        <div class="card-body g-3">
            <EditForm Model="@users">
                <div class="row d-flex g-3 p-2">
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Nombre Completo:</label>
                            <InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Nombre" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Nombre Usuario:</label>
                            <InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.UserName" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Contraseña</label>
                            <InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Password" />
                            <div>
                                <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Filled" Shade="Shade.Lighter" Size="AlertSize.ExtraSmall" AllowClose="true">
                                    Mínimo 8 y máximo 10 caracteres, al menos una letra mayúscula, una minúscula, un número y un carácter especial. Ej: Angel2023+
                                </RadzenAlert>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row p-2">
                    <div class="col-12">
                        <label>Roles:</label>
                        <!--Selector multiple de Radzen-->
                        <RadzenDropDown @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Roles" Data="Roles" TextProperty="NombreRol" ValueProperty="NombreRol"
                                        Multiple=true AllowClear=true Placeholder="Seleccione los roles" Chips=true class="col-12">
                        </RadzenDropDown>
                    </div>
                </div>

                <div class="col-12 d-flex justify-content-center mt-2 p-2">
                    <div class="col-6 row">
                        <div class="col-6">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@PostUsers"><i class="fa-solid fa-user-plus"></i> <b>Agregar</b></button>
                        </div>
                        <div class="col-6">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@EditUser"><i class="fa-solid fa-floppy-disk"></i> <b>Guardar Cambios</b></button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia">
    <!--Maquetación de Tabla con Radzen-->
    <div class="col-12 d-flex justify-content-center">
        <RadzenDataGrid TItem="UsuarioInfo" Data="@Usuarios" AllowColumnResize="true" AllowVirtualization="true" SelectionMode="DataGridSelectionMode.Single"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:500px;" @bind-Value="@usuarioSeleccionado" ColumnResized="@(()=>grid.Reset())"
                        IsLoading="@loadingEdit" Density="Density.Default" @ref="@grid" AllowColumnPicking="true" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Nombre" Property="Nombre" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Usuario" Property="UserName" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Contraseña" Property="Password" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Roles" Width="200px" MinWidth="200px">
                    <Template Context="data">
                        @foreach (var i in data.Roles)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Light">
                                @i
                            </RadzenBadge>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="Actions">
                    <RadzenDataGridColumn TItem="UsuarioInfo" Title="Activar/Desactivar" Width="140px" MinWidth="100px">
                        <Template Context="data">
                            <div class="col-12">
                                <div class="form-check form-switch m-2">
                                    <input class="form-check-input" type="checkbox" role="switch" id="@data.UserCod" checked="@data.Activo"
                                           @onchange="@((ChangeEventArgs e) => ActivateUser(data.UserCod, e, data.Nombre))">
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>



@code {
    UsuarioInfo info = new UsuarioInfo();

    bool cargando = false;
    //Listas
    private UsuarioInfo users { get; set; } = new UsuarioInfo();
    private List<UsuarioInfo> Usuarios { get; set; } = new List<UsuarioInfo>();

    private List<RolDTO> Roles { get; set; } = null!;
    private List<string> RolesSelectDTO = new List<string>();
    //Usuario seleccionado
    private IList<UsuarioInfo> usuarioSeleccionado { get; set; } = new List<UsuarioInfo> { new UsuarioInfo() };
    //RadzenDataGrid
    private RadzenDataGrid<UsuarioInfo>? grid = new RadzenDataGrid<UsuarioInfo>();

    //loadings
    bool loadingEdit = false;

    //Ciclo de vida de inicio del componente
    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
        await GetUsers();
    }
    //Obtención de roles
    public async Task GetRoles()
    {
        //Variable donde guardamos la obtención de los roles
        var respuestaHTTP = await repositorio.Get<List<RolDTO>>("api/usuarios/roles");

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Roles = respuestaHTTP.Response;
        }
    }
    //Obtención de usuarios en lista
    public async Task GetUsers()
    {
        //Variable donde guardamos la obtención de los usuarios
        var respuestaHTTP = await repositorio.Get<List<UsuarioInfo>>("api/usuarios/list");

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Usuarios = respuestaHTTP.Response;
        }
    }
    //Creación de usuarios nuevos
    public async Task PostUsers()
    {
        //Petición hacía controlador donde creamos el usuario
        var respuestaHTTP = await repositorio.Post<UsuarioInfo, UsuarioInfo>("api/usuarios/crear", usuarioSeleccionado.FirstOrDefault()!);
        if (users.Nombre != null && users.UserName != null && users.Password != null)
        {
            if (respuestaHTTP.Error)
            {
                var responseHTTP = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", "Verifique que el Nombre de Usuario o Contraseña cumpla con los requisitos", SweetAlertIcon.Error);
            }
            else
            {
                //Formamos el POST para agregar al nuevo usuario
                if (respuestaHTTP.Response is not null)
                {

                    await swal.FireAsync("Éxito", "Usuario creado correctamente", SweetAlertIcon.Success);
                    //Hacer un reload de la tabla
                    Usuarios.Add(respuestaHTTP.Response);
                    grid?.Reload();
                    await GetUsers();

                }
            }
        }
        else
        {
            await swal.FireAsync("Advertencia", "Verifique que todos los campos esten rellenados por favor.", SweetAlertIcon.Warning);
        }

    }
    //Edición del usuario
    public async Task EditUser()
    {
        try
        {
            if (usuarioSeleccionado.Count == 0)
            {
                await swal.FireAsync("Advertencia", "Seleccione a un usuario para editar", SweetAlertIcon.Warning);
            }
            else
            {
                var responseHttp = await repositorio.Put<UsuarioInfo>($"api/usuarios/editar", usuarioSeleccionado.FirstOrDefault()!);

                if (responseHttp.Error)
                {
                    var respuestaHttp = await responseHttp.ObtenerMensajeError();
                    await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
                }
                else
                {
                    grid?.Reload();
                    await swal.FireAsync("Exito", "El usuario ha sido modificado", SweetAlertIcon.Success);
                    await GetUsers();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
    //Función asincrona para activar al usuario o desactivarlo.
    //Dentro de los parametros a asignar vamos a trabajar con el usuario que se va a modificar y un cambio evento que se encarga de modificar el dato
    public async Task ActivateUser(int code, ChangeEventArgs act, string name)
    {
        try
        {
            //Variable booleana ligada al parametro de cambio de evento.
            UsuarioInfo usuarioInfo = new UsuarioInfo() { UserCod = code, Activo = (bool)act.Value, Nombre = name };
            //Petición de tipo PUT recibiendo un valor booleano, mandando el cod del usuario y el cambio de estado activo
            var responseHttp = await repositorio.Put<UsuarioInfo>($"api/usuarios/activar", usuarioInfo);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                //Cambio en la grid
                grid?.Reload();
                if (usuarioInfo.Activo)
                {
                    await Alertas($"El usuario: {usuarioInfo.Nombre} ha sido activado", SweetAlertIcon.Info);
                }
                else
                {
                    await Alertas($"El usuario: {usuarioInfo.Nombre} ha sido desactivado", SweetAlertIcon.Info);
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    //Función privada para creación de alertas personalizadas
    private async Task Alertas(string message, SweetAlertIcon icon)
    {
        await swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            TimerProgressBar = true,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = message });
    }
}

