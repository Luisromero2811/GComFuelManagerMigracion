@page "/usuarios"

@inject IRepositorio repositorio
@inject SweetAlertService swal
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia")]
@inject TooltipService ts

<AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="Usuarios">
    <h4><b>Usuarios</b></h4>
    <!--Maquetacion formulario de usuarios-->
    <div class="col-12 card shadow p-2 mb-4">
        <div class="card-body g-3">
            <EditForm Model="@users">
                <div class="col-12 row d-flex g-3 p-2">
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <div class="col-12 row p-0">
                                <label>Nombre Completo:</label>
                            </div>
                            <div class="mt-2">
                                <InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Nombre" />
                            </div>

                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowToolsTip(infosIcon))" @ref="infosIcon">
                                <label class="form-label">
                                    Nombre Usuario: <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                            <InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.UserName" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowToolTip(infoIcon))" @ref="infoIcon">
                                <label class="form-label">
                                    Contraseña <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                            @*<InputText class="form-control" @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Password" />*@

                            <RadzenPassword @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Password" Visible="@passwordView" />
                            <RadzenTextBox @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Password" Visible="@(passwordView == false)" />
                            <RadzenCheckBox @bind-Value="@passwordView" />
                        </div>
                    </div>
                </div>
                <div class="col-12 row">
                    <div class="col-4 d-flex">
                        <div class="col-12 my-auto">
                            <RadzenCheckBox @bind-Value="@usuarioSeleccionado.FirstOrDefault()!.IsClient" Name="CheckBox1" class="mx-3" />
                            <RadzenLabel Text="Es Cliente" Component="CheckBox1" />
                        </div>
                    </div>
                    @if (usuarioSeleccionado.FirstOrDefault()!.IsClient)
                    {
                        <div class="col-4">
                            <div class="col-12">
                                <label class="form-label">Grupo</label>
                                <InputSelect @bind-Value="usuarioSeleccionado.FirstOrDefault()!.CodGru" class="form-select" onchange="@GetClientes()">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Grupos is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Grupos.Count == 0)
                                    {
                                        <option disabled> No hay grupos</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Grupos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="col-12">
                                <label class="form-label">Cliente</label>
                                <InputSelect @bind-Value="usuarioSeleccionado.FirstOrDefault()!.CodCte" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Clientes is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Clientes.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Clientes)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-12 row p-2">
                    <div class="col-12">
                        <label>Roles:</label>
                        <!--Selector multiple de Radzen-->
                        <RadzenDropDown @bind-Value="usuarioSeleccionado.FirstOrDefault()!.Roles" Data="Roles" TextProperty="NombreRol" ValueProperty="NombreRol"
                                        Multiple=true AllowClear=true Placeholder="Seleccione los roles" Chips=true class="col-12">
                        </RadzenDropDown>
                    </div>
                </div>

                <div class="col-12 d-flex justify-content-center mt-2 p-2">
                    <div class="col-6 row">
                        <div class="col-6">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@PostUsers"><i class="fa-solid fa-user-plus"></i> <b>Agregar</b></button>
                        </div>
                        <div class="col-6">
                            <button class="btn gcom-bg-amarillo col-12" @onclick="@EditUser"><i class="fa-solid fa-floppy-disk"></i> <b>Guardar Cambios</b></button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios, Direccion, Gerencia">
    <div class="row justify-content-end mt-4 me-4 mb-3">
        <div class="gcom-bg-amarillo d-flex justify-content-center text-wrap" style="width: 7rem;">
            <b>Password: @displayedPassword</b>
        </div>
    </div><!--class="rz-my-12 ancho"-->
    <!--Maquetación de Tabla con Radzen-->
    <div class="col-12 d-flex justify-content-center mb-2">
        <RadzenDataGrid TItem="UsuarioInfo" Data="@Usuarios" AllowColumnResize="true" AllowVirtualization="true" SelectionMode="DataGridSelectionMode.Single"
                        GridLines="DataGridGridLines.Both" Style="height:500px;" @bind-Value="@usuarioSeleccionado" ColumnResized="@(()=>grid.Reset())"
                        IsLoading="@loadingEdit" Density="Density.Default" @ref="@grid" AllowColumnPicking="true" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Nombre" Property="Nombre" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Usuario" Property="UserName" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Contraseña" Property="Password" Width="200px" MinWidth="200px">
                    <Template Context="user">
                        <div class="d-flex align-items-center">
                            @if (usuarioSeleccionado.Count == 1)
                            {
                                <button type="button" class="btn gcom-bg-amarillo col-12" @onclick="@(() => ShowPassword(user.Password))" id="liveToastBtn"><i class="fa fa-solid fa-eye"></i> <b>Mostrar Contraseña</b></button>
                            }
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UsuarioInfo" Title="Roles" Width="200px" MinWidth="200px">
                    <Template Context="data">
                        @foreach (var i in data.Roles)
                        {
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="Light">
                                @i
                            </RadzenBadge>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <AuthorizeView Roles="Admin, Administrador Sistema, Administrador de Usuarios" Context="Actions">
                    <RadzenDataGridColumn TItem="UsuarioInfo" Title="Activar/Desactivar" Width="140px" MinWidth="100px">
                        <Template Context="data">
                            <div class="col-12">
                                <div class="form-check form-switch m-2">
                                    <input class="form-check-input" type="checkbox" role="switch" id="@data.UserCod" checked="@data.Activo"
                                           @onchange="@((ChangeEventArgs e) => ActivateUser(data.UserCod, e, data.Nombre))">
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </AuthorizeView>
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>

@code {
    UsuarioInfo info = new UsuarioInfo();

    bool cargando = false;
    bool passwordView = true;


    private string displayedPassword = null!;
    private void ShowPassword(string password)
    {
        displayedPassword = password;
    }

    //Listas
    private UsuarioInfo users { get; set; } = new UsuarioInfo();
    private List<UsuarioInfo> Usuarios { get; set; } = new List<UsuarioInfo>();

    private List<RolDTO> Roles { get; set; } = null!;
    private List<string> RolesSelectDTO = new List<string>();

    private List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    private Cliente Cliente { get; set; } = new Cliente();

    private int? clienteSeleccioado { get; set; }

    private List<CodDenDTO> Grupos { get; set; } = null!;
    private Int16? GrupoSeleccionadoB = 0;

    //Usuario seleccionado
    private IList<UsuarioInfo> usuarioSeleccionado { get; set; } = new List<UsuarioInfo> { new UsuarioInfo() };
    //RadzenDataGrid
    private RadzenDataGrid<UsuarioInfo>? grid = new RadzenDataGrid<UsuarioInfo>();

    //loadings
    bool loadingEdit = false;

    ElementReference infoIcon;
    ElementReference infosIcon;
    //Ciclo de vida de inicio del componente
    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
        await GetUsers();
        await GetGrupos();
    }

    void ShowToolTip(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Mínimo 8 y máximo 10 caracteres, al menos una letra mayúscula, una minúscula, un número y un carácter especial. Ej: Angel2023+", options);
    void ShowToolsTip(ElementReference elementReference, TooltipService optionss = null!) => ts.Open(elementReference, "Mínimo de 8 y máximo de 10 caracteres, sin usar letra Ñ");

    private string passwordType = "password";

    private void TogglePasswordVisibility(UsuarioInfo user)
    {
        user.ShowPassword = !user.ShowPassword;
        passwordType = user.ShowPassword ? "text" : "password";
    }

    //Obtención de roles
    public async Task GetRoles()
    {
        //Variable donde guardamos la obtención de los roles
        var respuestaHTTP = await repositorio.Get<List<RolDTO>>("api/usuarios/roles");

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Roles = respuestaHTTP.Response;
        }
    }
    //Obtención de usuarios en lista
    public async Task GetUsers()
    {
        //Variable donde guardamos la obtención de los usuarios
        var respuestaHTTP = await repositorio.Get<List<UsuarioInfo>>("api/usuarios/list");

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            Usuarios = respuestaHTTP.Response;
        }
    }
    //Creación de usuarios nuevos
    public async Task PostUsers()
    {
        //Petición hacía controlador donde creamos el usuario
        var respuestaHTTP = await repositorio.Post<UsuarioInfo, UsuarioInfo>("api/usuarios/crear", usuarioSeleccionado.FirstOrDefault()!);
        if (users.Nombre != null && users.UserName != null && users.Password != null)
        {
            if (respuestaHTTP.Error)
            {
                var responseHTTP = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", "Verifique que el Nombre de Usuario o Contraseña cumpla con los requisitos", SweetAlertIcon.Error);
            }
            else
            {
                //Formamos el POST para agregar al nuevo usuario
                if (respuestaHTTP.Response is not null)
                {

                    await swal.FireAsync("Éxito", "Usuario creado correctamente", SweetAlertIcon.Success);
                    //Hacer un reload de la tabla
                    Usuarios.Add(respuestaHTTP.Response);
                    grid?.Reload();
                    await GetUsers();

                }
            }
        }
        else
        {
            await swal.FireAsync("Advertencia", "Verifique que todos los campos esten rellenados por favor.", SweetAlertIcon.Warning);
        }

    }
    //Edición del usuario
    public async Task EditUser()
    {
        try
        {
            if (usuarioSeleccionado.Count == 0)
            {
                await swal.FireAsync("Advertencia", "Seleccione a un usuario para editar", SweetAlertIcon.Warning);
            }
            else
            {
                var responseHttp = await repositorio.Put<UsuarioInfo>($"api/usuarios/editar", usuarioSeleccionado.FirstOrDefault()!);

                if (responseHttp.Error)
                {
                    var respuestaHttp = await responseHttp.ObtenerMensajeError();
                    await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
                }
                else
                {
                    grid?.Reload();
                    await swal.FireAsync("Exito", "El usuario ha sido modificado", SweetAlertIcon.Success);
                    await GetUsers();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
    //Función asincrona para activar al usuario o desactivarlo.
    //Dentro de los parametros a asignar vamos a trabajar con el usuario que se va a modificar y un cambio evento que se encarga de modificar el dato
    public async Task ActivateUser(int code, ChangeEventArgs act, string name)
    {
        try
        {
            //Variable booleana ligada al parametro de cambio de evento.
            UsuarioInfo usuarioInfo = new UsuarioInfo() { UserCod = code, Activo = (bool)act.Value, Nombre = name };
            //Petición de tipo PUT recibiendo un valor booleano, mandando el cod del usuario y el cambio de estado activo
            var responseHttp = await repositorio.Put<UsuarioInfo>($"api/usuarios/activar", usuarioInfo);
            if (responseHttp.Error)
            {
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                //Cambio en la grid
                grid?.Reload();
                if (usuarioInfo.Activo)
                {
                    await Alertas($"El usuario: {usuarioInfo.Nombre} ha sido activado", SweetAlertIcon.Info);
                }
                else
                {
                    await Alertas($"El usuario: {usuarioInfo.Nombre} ha sido desactivado", SweetAlertIcon.Info);
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    //Función privada para creación de alertas personalizadas
    private async Task Alertas(string message, SweetAlertIcon icon)
    {
        await swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            TimerProgressBar = true,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = message });
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<List<CodDenDTO>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (usuarioSeleccionado.FirstOrDefault()!.CodGru != null && usuarioSeleccionado.FirstOrDefault()!.CodGru != GrupoSeleccionadoB)
            {
                var response = await repositorio.Get<List<CodDenDTO>>($"api/cliente/{usuarioSeleccionado.FirstOrDefault()!.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoB = usuarioSeleccionado.FirstOrDefault()!.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

}

