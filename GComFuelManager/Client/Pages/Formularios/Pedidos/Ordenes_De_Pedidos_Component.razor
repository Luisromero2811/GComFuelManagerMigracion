@page "/ordenes/pedido"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject TooltipService ts
@inject IJSRuntime js
@inject PedidoOrdenValidation validation
@inject DialogService ds

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador")]

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador">
    <div class="col-12 card shadow-sm mb-3">
        <div class="col-12 card-body">
            <div class="col-12 mb-1 row">
                <div class="col-12 row">
                    <div class="col-3">
                        <label>Folio</label>
                        <input class="form-control col-12 form-control-sm" @bind="@Folio_Seleccionado" maxlength="30" />
                    </div>
                    <div class="col-9 d-flex row mb-1">
                        <div class="col-2 mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo btn-sm">
                                <i class="fa fa-solid fa-magnifying-glass"></i>
                            </button>
                        </div>
                        <div class="col-6 mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo btn-sm" @onclick="@OpenModal">
                                <i class="fa fa-solid fa-magnifying-glass"></i>
                                Ver Folios de pedidos
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>

@Folio_Seleccionado

@if (string.IsNullOrEmpty(Folio_Seleccionado))
{
    <AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador">
        <div class="col-12" style="resize:both;">
            <div class="ancho">
                <Tabla_De_Folios_Activos_Vigentes Cambiar_Folio="@ChangeFolio" />
            </div>
        </div>
    </AuthorizeView>
}
else
{
    <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador" Context="Create">
        <div class="col-12">
            <CrearPedidoForm Folio_Seleccionado="@Folio_Seleccionado" CancelCreation="ChangeFolio"/>
        </div>
    </AuthorizeView>
}
<style type="text/css">
    .ancho {
        max-width:contain;
    }
</style>
@code {

    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;
    private bool show = false;
    int count = 0;


    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
    private IJSObjectReference importedJs;

    private string Folio_Seleccionado = string.Empty;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            var cm = await js.GetItemLocalStorage("CloseMenu");
            if (!string.IsNullOrEmpty(cm))
                isClose = bool.Parse(cm);

            if (isClose)
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
            else
                width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

            if (width < 0)
                width = 500;
            TotalWidth = $"{width}px";
            // await js.InvokeVoidAsync("columnSize.SetTable","miTabla", DotNetObjectReference.Create(this));
            importedJs = await js.InvokeAsync<IJSObjectReference>("import", "./js/ColumnsSize.js");

            // await LoadStateAsync();
            // StateHasChanged();
        }
    }

    void ChangeFolio(string Folio)
    {
        Folio_Seleccionado = Folio;
    }

    public async Task GetFoliosFiltro()
    {
        try
        {
            var response = await http.Post<CierreFiltroDTO, List<string>>($"api/cierre/folios", fechas);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task OpenModal()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosPedidosComponent>("Folios de pedidos", options: new DialogOptions()
                {
                    Width = "90%",
                    Height = "600px",
                    Resizable = true,
                    Draggable = false
                });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
