@page "/confirm-ordenes"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject NotificationService ns

<h3>Confirmar orden de clientes</h3>

<div class="col-12 d-flex justify-content-center">
    <div class="col-10 shadow-sm card">
        <div class="col-12 card-body">
            <div class="col-12">
                <label><b>Filtro entre fechas:</b></label>
                <div class="col-12 row">
                    <div class="col-4 mb-3">
                        <label>Del:</label>
                        <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateInicio" />
                    </div>
                    <div class="col-4 mb-3">
                        <label>A:</label>
                        <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy-MM-dd hh:mm:ss" @bind-Value="@fechas.DateFin" />
                    </div>
                    <div class="col-4 d-flex mt-1">
                        <button class="btn gcom-bg-amarillo col-12 my-auto" @onclick="@MostrarOrdenFecha">
                            <i class="fa fa-solid fa-eye"></i> <b>Mostrar ordenes</b>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<RadzenDataGrid TItem="OrdenEmbarque" Data="@OrdenEmbarques" AllowColumnResize="true" AllowVirtualization="false" SelectionMode="DataGridSelectionMode.Multiple" AllowPickAllColumns="true"
                GridLines="DataGridGridLines.Both" class="rz-my-6 ancho" Style="height:600px;" @bind-Value="OrdenesSeleccionadas" AllowRowSelectOnRowClick="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                IsLoading="loading" Density="Density.Default" @ref="@grid" AllowSorting="true" AllowColumnPicking="true" AllowFiltering="true" Culture="CultureInfo.CurrentCulture"
@bind-Settings="@Settings" AllowGrouping="true" HideGroupedColumn="true">
    <Columns>
        <AuthorizeView Roles="Admin, Administrador Usuario, Programador" Context="EdicionUnidades">
            <RadzenDataGridColumn TItem="OrdenEmbarque" Width="60px" Sortable="false" Filterable="false" OrderIndex="1" Frozen="true">
                <HeaderTemplate>
                    <RadzenCheckBox TriState="false" TValue="bool" Value="@(OrdenEmbarques.Any(i => OrdenesSeleccionadas!= null && OrdenesSeleccionadas.Contains(i)))"
                                    Change="@(args => OrdenesSeleccionadas = args ? OrdenEmbarques.ToList() : new List<OrdenEmbarque>())" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TriState="false" Value="@(OrdenesSeleccionadas.Contains(data))"
                                    TValue="bool" Change="@((bool args) => ToggleCheck(args, data))" />
                </Template>
            </RadzenDataGridColumn>
        </AuthorizeView>
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Folio" Property="OrdenCierre.Folio" Width="80px" Filterable="false" OrderIndex="4" Frozen="true" />
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Cliente" Property="Destino.Cliente.Den" Width="200px" OrderIndex="5" Frozen="true">
            <Template Context="data">
                <div>
                    @data.Destino?.Cliente?.Den
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Destino" Property="Destino.Den" Width="220px" OrderIndex="6">
            <Template Context="data">
                <div>
                    @data?.Destino?.Den
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Producto" Property="Producto.Den" Width="200px" OrderIndex="7">
            <Template Context="data">
                <div>
                    @data?.Producto?.Den
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Volumen" Width="100px" FormatString="{0:N2}" Filterable="false" OrderIndex="8">
            <Template Context="data">
                <div class="col-12">
                    @string.Format("{0:N2}",
                    data?.Orden is not null ? data?.Orden?.Vol :
                    data?.Compartment == 1 && data.Tonel is not null ? data?.Tonel?.Capcom
                    : data?.Compartment == 2 && data.Tonel is not null ? data?.Tonel?.Capcom2
                    : data?.Compartment == 3 && data.Tonel is not null ? data?.Tonel?.Capcom3
                    : data?.Compartment == 4 && data.Tonel is not null ? data?.Tonel?.Capcom4
                    : data?.Vol
                    )
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Fecha de carga" Property="Fchcar" FormatString="{0:d}" Filterable="false" Width="160px" OrderIndex="9" Sortable="false" />
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Bin" Property="Bin" Filterable="false" Width="110px" OrderIndex="14" />
        <RadzenDataGridColumn TItem="OrdenEmbarque" Title="Estatus" Property="Estado.den" Filterable="false" Width="120px" OrderIndex="15" />
    </Columns>
</RadzenDataGrid>
<div class="card col-12 shadow-sm">
    <div class="col-12 row card-body">
        <div class="col-3">
            <button class="btn col-12 gcom-bg-amarillo" @onclick="@ConfirmPedido">
                <i class="fa fa-solid fa-check"></i>
                <b>Confirmar Ordenes</b>
                @if (loadingConfirm)
                {
                    <SpinnerLoading></SpinnerLoading>
                }
            </button>
        </div>
    </div>
</div>
<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>
@code {

    OrdenEmbarque OrdenEmbarque { get; set; } = new OrdenEmbarque();
    IList<OrdenEmbarque> OrdenEmbarques { get; set; } = new List<OrdenEmbarque>();
    IList<OrdenEmbarque> OrdenesSeleccionadas { get; set; } = new List<OrdenEmbarque>();

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    bool loading = false;
    bool loadingConfirm = false;

    private RadzenDataGrid<OrdenEmbarque>? grid = new RadzenDataGrid<OrdenEmbarque>();

    int width = 0;
    string TotalWidth = string.Empty;

    FechasF fechas = new FechasF();

    protected override async Task OnInitializedAsync()
    {
        width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";
        await LoadStateAsync();
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingConfirmPedido", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void ToggleCheck(bool args, OrdenEmbarque orden)
    {
        try
        {
            if (args)
                OrdenesSeleccionadas.Add(orden);
            else
                OrdenesSeleccionadas.Remove(orden);

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task MostrarOrdenFecha()
    {
        try
        {
            loading = true;
            StateHasChanged();

            var responseHttp = await http.Post<FechasF, IList<OrdenEmbarque>>($"api/pedido/filtrar/pendientes", fechas);

            if (responseHttp.Error)
            {
                loading = false;
                var respuestaHttp = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", respuestaHttp, SweetAlertIcon.Error);
            }
            else
            {
                loading = false;
                OrdenEmbarques = responseHttp.Response;
                OrdenesSeleccionadas = new List<OrdenEmbarque>();
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingConfirmPedido");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (OrdenesSeleccionadas.Count != 0)
            {
                var response = await http.Post<IList<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", OrdenesSeleccionadas);
                if (response.Error)
                {
                    loadingConfirm = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingConfirm = false;

                    ns.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Enviando correos",
                            Detail = "Se estan enviando los correos de autorizacion. Permanesca en esta pantalla hasta terminar el proceso.",
                            Duration = 10000
                        });
                    var responseEmail = await http.Post<IList<OrdenEmbarque>>("api/email/confirmorden", OrdenesSeleccionadas);
                    if (responseEmail.Error)
                    {
                        loading = false;
                        var message = await responseEmail.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loading = false;
                        await Swal.FireAsync("Exito", "Correos enviados", SweetAlertIcon.Success);
                    }

                    //await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                    ClearGridData();
                }
            }
            else
            {
                loadingConfirm = false;
                await Swal.FireAsync("Advertencia", "Debe tener ordenes para poder confirmarlas", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void ClearGridData()
    {
        foreach (var item in OrdenesSeleccionadas)
        {
            OrdenEmbarques.Remove(item);
        }
        OrdenesSeleccionadas = new List<OrdenEmbarque>();
        StateHasChanged();
    }
}
