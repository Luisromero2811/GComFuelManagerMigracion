@page "/folios/cierres"
@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject DialogService ds
@inject IJSRuntime js

<div class="col-12 row">
    <div class="col-8">
        <label><b>Filtro de folios de cierres</b></label>
    </div>
</div>

<div class="col-12 row mb-1">
    <div class="col-2">
        <div class="col-12">
            <label>Grupo</label>
            <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="fechas.codGru"
                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowVirtualization="true" Change="@GetClientesFiltro" AllowClear="true" />
        </div>
    </div>
    <div class="col-2">
        <div class="col-12">
            <label>Cliente</label>
            <RadzenDropDown Data="ClientesFiltro" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="fechas.codCte"
                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowVirtualization="true" AllowClear="true" />
        </div>
    </div>
    <div class="col-2">
        <label>Del:</label>
        <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value="fechas.FchInicio" @bind-Value:format="yyyy-MM-dd" />
    </div>
    <div class="col-2">
        <label>Al:</label>
        <InputDate class="form-control col-12" Type="InputDateType.DateTimeLocal" @bind-Value="fechas.FchFin" @bind-Value:format="yyyy-MM-dd" />
    </div>
    <div class="col-2">
        <div class="mt-auto">
            <label></label>
            <button class="col-12 btn gcom-bg-amarillo" @onclick="@MostrarCierres">
                <i class="fa fa-solid fa-magnifying-glass"></i> Buscar
            </button>
        </div>
    </div>
    <div class="col-2">
        <div class="mt-auto">
            <label></label>
            <button class="btn gcom-bg-amarillo col-12" @onclick="@ExportarCierre">
                <i class="fa fa-solid fa-file-excel"></i>
                <b>Exportar Cierres</b>
            </button>
        </div>
    </div>
</div>

<RadzenDataGrid TItem="FolioCierreDTO" Data="@Folios" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                GridLines="DataGridGridLines.Both" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                IsLoading="loading" @ref="grid" AllowSorting="true" AllowFiltering="true" AllowColumnPicking="true" Density="Density.Compact">
    <Columns>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Fecha de Cierre" Property="FchCierre" FormatString="{0:d}" Filterable="false" Width="140px" OrderIndex="1" />
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Folio de Cierres" Property="Folio" Filterable="false" Width="190px" OrderIndex="2" />
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Grupo" Filterable="false" OrderIndex="3">
            <Template Context="data">
                @(data.Grupo is not null ? data.Grupo.Den : "Sin Grupo asignado")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Cliente" Filterable="false" OrderIndex="4">
            <Template Context="data">
                @(data.cliente is not null ? data.cliente.Den : "Sin cliente asignado")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Destino" Filterable="false" OrderIndex="5">
            <Template Context="data">
                @(data.destino is not null ? data.destino.Den : "Sin destino asignado")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Producto" Filterable="false" OrderIndex="6">
            <Template Context="data">
                <div class="col-12 row">
                    <div class="col-1">
                        @if (data.Producto != null)
                        {
                            @if (data.Producto.Cod == 25 || data.Producto.Cod == 26 || data.Producto.Cod == 27)
                            {
                                <div class="badge rounded-pill regular">&nbsp;</div>
                            }
                            else if (data.Producto.Cod == 11 || data.Producto.Cod == 12 || data.Producto.Cod == 116)
                            {
                                <div class="badge rounded-pill regular-vdm">&nbsp;</div>
                            }
                            else if (data.Producto.Cod == 19 || data.Producto.Cod == 20 || data.Producto.Cod == 21)
                            {
                                <div class="badge rounded-pill premium">&nbsp;</div>
                            }
                            else
                            {
                                <div class="badge rounded-pill diesel">&nbsp;</div>
                            }
                        }
                    </div>
                    <div class="col-11">
                        @data.Producto?.Den
                    </div>
                </div>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Estado" Filterable="false" OrderIndex="7">
            <Template Context="data">
                @(data.Activa == false ? "Cerrada" : data.ordenEmbarque?.Orden != null ? data.ordenEmbarque?.Orden?.Estado?.den
                    : data?.ordenEmbarque?.Estado != null ? data?.ordenEmbarque?.Estado?.den : "Activa")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Observaciones" Property="Observaciones" Filterable="false" Width="160px" />
        <RadzenDataGridColumn TItem="FolioCierreDTO" Title="Volumen" Width="110px" FormatString="{0:N2}" Filterable="false">
            <Template Context="item">
                <div class="col-12">
                    @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                    item?.ordenEmbarque?.Orden is not null ? item?.ordenEmbarque?.Orden?.Vol :
                    item?.ordenEmbarque?.Compartment == 1 && item.ordenEmbarque?.Tonel is not null ? item?.ordenEmbarque?.Tonel?.Capcom
                    : item?.ordenEmbarque?.Compartment == 2 && item.ordenEmbarque?.Tonel is not null ? item?.ordenEmbarque?.Tonel?.Capcom2
                    : item?.ordenEmbarque?.Compartment == 3 && item.ordenEmbarque?.Tonel is not null ? item?.ordenEmbarque?.Tonel?.Capcom3
                    : item?.ordenEmbarque?.Compartment == 4 && item.ordenEmbarque?.Tonel is not null ? item?.ordenEmbarque?.Tonel?.Capcom4
                    : item?.Volumen
                    )
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code{
    bool loading = false;
    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    CierreDiarioDTO fechas { get; set; } = new CierreDiarioDTO();
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;
    private short? GrupoSeleccionadoFiltroB = 0;
    private List<FolioCierreDTO> FoliosFiltrados { get; set; } = new List<FolioCierreDTO>();
    private List<FolioCierreDTO> Folios { get; set; } = new List<FolioCierreDTO>();
    RadzenDataGrid<FolioCierreDTO> grid { get; set; } = new RadzenDataGrid<FolioCierreDTO>();

    protected override async Task OnInitializedAsync()
    {
        await GetGrupos();
    }

    private async Task GetGrupos()
    {
        try
        {
            var response = await repositorio.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message);
            throw e;
        }
    }

    private async Task GetClientesFiltro()
    {
        try
        {
            if (fechas.codGru != null && GrupoSeleccionadoFiltroB != fechas.codGru)
            {
                var response = await repositorio.Get<List<CodDenDTO>>($"api/cliente/{fechas.codGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoFiltroB = fechas.codGru;
                    ClientesFiltro = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task MostrarCierres()
    {
        try
        {
            var responseHttp = await repositorio.Post<CierreDiarioDTO, List<FolioCierreDTO>>("api/cierre/cierrecompleto", fechas);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Folios = responseHttp.Response;
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
    private async Task ExportarCierre()
    {
        try
        {
            if (Folios != null)
            {
                ExcelPackage.LicenseContext = LicenseContext.Commercial;
                var excel = new ExcelPackage();
                var ws = excel.Workbook.Worksheets.Add("Cierres");
                ws.Columns.Width = 70;
                ws.Columns.AutoFit();

                var header = ws.Cells["A1:I1"];
                var tablebody = ws.Cells["A1:I1"].LoadFromCollection(Folios, true);
                tablebody.Style.Font.Size = 14;
                tablebody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                tablebody.Style.Font.Bold = true;

                header.Style.Font.Size = 14;
                header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                header.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                header.Style.Font.Bold = true;

                await js.GuardarComo($"Cierres_{DateTime.Now.ToString("yyyy-MM-dddd HH:mm:ss")}.xlsx", excel.GetAsByteArray());
            }
            else
            {
                await Swal.FireAsync("Alerta", "Deberá tener datos filtrados para exportar", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}

<!--Filtraremos por grupo-cliente, solo grupo y fechas-->
<!--Fecha de cierre, folio de pedido, grupo, cliente, destino, producto, estado y acciones-->