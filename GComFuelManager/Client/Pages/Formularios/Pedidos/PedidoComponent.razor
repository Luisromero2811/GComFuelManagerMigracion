@page "/pedidos"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador")]

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Comprador">
    <NavigationLock OnBeforeInternalNavigation="OnPreventInternalNavigation"></NavigationLock>
    <h4><b>Pedidos</b></h4>
    <div class="col-12 card shadow-sm mb-3">
        <div class="col-12 card-body">
            <div class="col-12 px-4 mb-3">
                <div class="col-4 row">
                    <div class="col-10">
                        <label class="form-label">Folio</label>
                        <InputText class="form-control col-12" @bind-Value="folio" />
                    </div>
                    <div class="col-2 d-flex">
                        <div class="col-12 mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo px-0" @onclick="@GetPedidoFolio">
                                <i class="fa fa-solid fa-magnifying-glass"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
@*@if (isEditing)
    {
        <EditPedidoForm Terminales="Terminales" Productos="Productos" Cantidades="Cantidades" ordenEmbarque="ordenEmbarque" CancelPedido="changeEdit"
                    Estacion="Destino" SavePedido="EditPedido" />
    }
    else
    {
    }*@

<CrearPedidoForm http="http" Swal="Swal" ordenEmbarque="ordenCierre" ConfirmPedido="ConfirmPedido" SavePedido="EditPedido"
                 Terminales="Terminales" Grupos="Grupos" Productos="Productos" Cantidades="Cantidades"
                 isEdit="isEditing" IsDifferentVol="IsDifferentVol"/>
<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Comprador">
    <div class="col-12 d-flex justify-content-center">
        <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;"
                        IsLoading="loading" @ref="@gridOC" AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" Width="200px" MinWidth="200px" Visible="true">
                    <Template Context="item">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Comprador" Context="Acciones">
                            <div class="col-12 row">
                                <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador" Context="Cancelar">
                                    <div class="col">
                                        <button class="btn btn-danger col-12" @onclick="@(()=>CancelPedido(item))"><i class="fa fa-solid fa-ban"></i></button>
                                    </div>
                                </AuthorizeView>
                                <div class="col">
                                    <button class="btn btn-primary col-12" @onclick="@(()=>SetEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                </div>
                            </div>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Bin" Property="OrdenEmbarque.Bin" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Terminal" Property="OrdenEmbarque.Tad.Den" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="OrdenEmbarque.Destino.Den" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="OrdenEmbarque.Producto.Den" Width="200px" MinWidth="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="200px" MinWidth="200px" Property="OrdenEmbarque.Vol" FormatString="{0:N2}"/>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Width="200px" MinWidth="200px" Property="OrdenEmbarque.Pre" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de carga" Property="OrdenEmbarque.Fchcar" FormatString="{0:d}" Width="200px" MinWidth="200px" />
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
<style type="text/css" media="screen and (min-width:1200px)">
    .ancho {
        width: 1100px;
    }
</style>

<style type="text/css" media="screen and (min-width:1500px)">
    .ancho {
        width: 1500px;
    }
</style>
<style type="text/css" media="screen and (min-width:1100px)">
    .ancho {
        width: 1000px;
    }
</style>
@code {
    //grid
    private RadzenDataGrid<OrdenEmbarque>? grid = new RadzenDataGrid<OrdenEmbarque>();
    private RadzenDataGrid<OrdenCierre> gridOC = new RadzenDataGrid<OrdenCierre>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    private List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };

    //listas
    private List<CodDenDTO> Terminales { get; set; } = null!;
    private List<CodDenDTO> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<CodDenDTO> Productos { get; set; } = null!;
    private IEnumerable<CodDenDTO> Destino { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;

    private DateTime FechaCarga = DateTime.MinValue;
    private float Precio = 0;

    private string folio { get; set; } = string.Empty;
    //loadings
    bool loadingAgregar = false;
    bool loadingConfirm = false;
    bool loading = false;
    bool IsDifferentVol = false;
    //editmodel
    private bool isEditing = false;

    //ordenesPendientes
    private List<int> ordenPendientes = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        await GetTerminales();
        await GetGrupos();
        //await GetClientes();
        await GetCantidades();
        await GetProductos();
        await GetEstaciones();
        //await GetOrdenesPendientes();
    }

    private void changeEdit()
    {
        ordenEmbarque = new OrdenEmbarque();
        if (!Cantidades.Any(x => x == ordenCierre.Volumen))
            IsDifferentVol = true;
        else
            IsDifferentVol = false;
        isEditing = !isEditing;
    }

    public async Task GetPedidoFolio()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/{folio}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordenCierres = response.Response;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetEstaciones()
    {
        try
        {
            var response = await http.Get<IEnumerable<CodDenDTO>>("api/destino");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>($"api/clientes");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Clientes = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¿Desea cancelar la orden?"
            });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseOC = await http.Delete($"api/cierre/{orden.Cod}/cancel");
                if (responseOC.Error)
                {
                    var responseHttp = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var response = await http.Delete($"api/pedido/{orden.OrdenEmbarque.Cod}/cancel");
                    if (response.Error)
                    {
                        var responseHttp = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await Swal.FireAsync("Pedido cancelado", $"El pedido ha sido cancelado.", SweetAlertIcon.Info);
                        //ordenPendientes.Remove(orden.Cod);
                        //await js.SetItemLocalStorage("EXPIRACIONPEDIDO", DateTime.Today.Date.AddDays(1).ToString());
                        //await js.SetItemLocalStorage("PEDIDO", JsonConvert.SerializeObject(ordenPendientes));
                        //await GetOrdenesPendientes();
                        await GetPedidoFolio();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetOrdenesPendientes()
    {
        try
        {
            List<int>? ordenesPendientes = new List<int>();
            try
            {
                if (await js.GetItemLocalStorage("PEDIDO") != null)
                {
                    ordenesPendientes = JsonConvert.DeserializeObject<List<int>>(await js.GetItemLocalStorage("PEDIDO"));
                    ordens = null!;
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            }

            DateTime expiration;
            if (DateTime.TryParse(await js.GetItemLocalStorage("EXPIRACIONPEDIDO"), out expiration))
            {
                if (DateTime.Today.Date < expiration)
                {
                    var response = await http.Post<List<int>, List<OrdenEmbarque>>("api/pedido/list", ordenesPendientes);

                    if (response.Error)
                    {
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        ordens = response.Response;
                        ordenPendientes = ordenesPendientes;
                    }
                }
                else
                {
                    try
                    {
                        foreach (var item in ordenesPendientes)
                        {
                            var response = await http.Delete($"api/pedido/{item}/cancel");
                            if (response.Error)
                            {
                                var message = await response.ObtenerMensajeError();
                                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                            }
                        }
                        ordens = new List<OrdenEmbarque>();
                        await js.RemoveItemLocalStorage("PEDIDO");
                        await js.RemoveItemLocalStorage("EXPIRACIONPEDIDO");
                    }
                    catch (Exception e)
                    {
                        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
                        throw e;
                    }
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task OnPreventInternalNavigation(LocationChangingContext context)
    {
        if (ordens.Count == 0)
        {
            return;
        }

        var confirm = await Swal.FireAsync(new SweetAlertOptions
        {
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Aceptar",
            CancelButtonText = "Cancelar",
            Text = "Tiene ordenes pendientes por confirmar, ¿Seguro que quiere salir?"
        });

        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await js.SetItemLocalStorage("PEDIDO", JsonConvert.SerializeObject(ordenPendientes));
            await js.SetItemLocalStorage("EXPIRACIONPEDIDO", DateTime.Today.Date.AddDays(1).ToString());
            return;
        }

        context.PreventNavigation();
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
                Console.WriteLine(JsonConvert.SerializeObject(Grupos));
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SavePedido()
    {
        loadingAgregar = true;
        try
        {
            if (ordens?.Count < 8 || ordens is null)
            {
                if (ordenEmbarque.Codtad != 0 && ordenEmbarque.Codprd != 0 && ordenEmbarque.Coddes != 0 && ordenEmbarque.Vol != 0)
                {
                    ordenEmbarque.Codest = 9;
                    ordenEmbarque.Fchpet = DateTime.Now;
                    var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                    if (response.Error)
                    {
                        loadingAgregar = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingAgregar = false;
                        if (response.Response is not null)
                        {
                            ordens.Add(response.Response);
                            ordenPendientes.Add(response.Response.Cod);
                            await js.SetItemLocalStorage("EXPIRACIONPEDIDO", DateTime.Today.Date.AddDays(1).ToString());
                            await js.SetItemLocalStorage("PEDIDO", JsonConvert.SerializeObject(ordenPendientes));
                        }
                    }
                }
                else
                {
                    await Swal.FireAsync("Advertencia", "Revise que no falte ningun campo en el formulario por llenar.", SweetAlertIcon.Warning);
                    loadingAgregar = false;
                }
            }
            else
            {
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "El limite de pedidos ha sido alcanzado", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (ordenCierres.Count != 0)
            {
                foreach (var item in ordenCierres)
                    if(item.OrdenEmbarque!.CodordCom == null)
                        ordens.Add(item.OrdenEmbarque!);

                var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
                if (response.Error)
                {
                    loadingConfirm = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingConfirm = false;
                    await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                    ordens = new List<OrdenEmbarque>();
                    //await js.RemoveItemLocalStorage("PEDIDO");
                    //await js.RemoveItemLocalStorage("EXPIRACIONPEDIDO");
                    ordenPendientes = new List<int>();
                }
            }
            else
            {
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "Debe tener ordenes para poder confirmarlas", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task EditPedido()
    {
        loadingAgregar = true;
        try
        {
            ordenEmbarque = ordenCierre.OrdenEmbarque;
            ordenEmbarque.Destino = null;

            ordenCierre.CodPrd = ordenCierre.OrdenEmbarque.Codprd;
            ordenCierre.CodDes = ordenCierre.OrdenEmbarque.Coddes;
            ordenCierre.Volumen = Convert.ToInt32(ordenCierre.OrdenEmbarque.Vol);

            var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
            if (responseOC.Error)
            {
                loadingAgregar = false;
                string? message = await responseOC.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido/update", ordenCierre.OrdenEmbarque);
                if (response.Error)
                {
                    loadingAgregar = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingAgregar = false;
                    changeEdit();
                    await GetPedidoFolio();
                }
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private void SetEdit(OrdenCierre orden)
    {
        isEditing = true;
        //ordenEmbarque = orden;
        ordenCierre = orden;
        StateHasChanged();
    }
}
