@page "/pedidos"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject TooltipService ts
@inject IJSRuntime js
@inject AuthenticationStateProvider auth
@inject PedidoOrdenValidation validation
@inject DialogService ds
@inject NotificationService ms

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador, Comprador")]


<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador, Comprador" Context="Create">
    <div class="col-12 card shadow">
        <div class="card-body">
            <div class="col-12 row">
                <div class="col row d-flex justify-content-start">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenText Text="Precio automatico" />
                        <RadzenSwitch @bind-Value="@ordenCierre.Precio_Manual" Change="@(() => ChangePrecioType())" />
                    </RadzenStack>
                </div>
            </div>
            <EditForm Model="@ordenCierre" class="form col-12" OnValidSubmit="@GetFolio">
                @*<DataAnnotationsValidator />*@
                <FluentValidationValidator Validator="validation" />
                <ValidationSummary />
                <div class="row col-12 g-3 mb-3 px-4">
                    <div class="col-md-4 col-sm-6 mb-1">
                        <div class="col-12">
                            <label>Destino (Estación)</label>
                            <RadzenDropDown Data="Estaciones" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@GetPrecios"
                                            AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-6 mb-1">
                        <div class="col-12">
                            <label>Producto</label>
                            @if (ordenCierre.Precio_Manual)
                            {
                                <RadzenDropDown Data="Precios" class="col-12" TextProperty="Producto.Den" ValueProperty="Producto.Cod" @bind-Value="ordenCierre.CodPrd"
                                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@ChangeProducto"
                                                AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen">
                                    <Template Context="data">
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                            <RadzenBadge Variant="Variant.Outlined" Text="@((data as Precio)?.FchDia.ToShortDateString())" />
                                        </RadzenText>
                                    </Template>
                                    <ValueTemplate Context="data">
                                        <RadzenText TextStyle="TextStyle.Body2">
                                            @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                        </RadzenText>
                                    </ValueTemplate>
                                </RadzenDropDown>
                            }
                            else
                            {
                                <InputSelect @bind-Value="ordenCierre.CodPrd" class="form-select form-select-sm">
                                    <option>-- Selecciona una Opcion --</option>
                                    @if (Productos is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Productos.Count == 0)
                                    {
                                        <option disabled> No hay productos </option>
                                    }
                                    else
                                    {
                                        foreach (var item in Productos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            }

                        </div>
                    </div>
                    @if (!ordenCierre.IsDifferentVol)
                    {
                        <div class="col-md-2 col-sm-6 mb-1">
                            <div class="col-12">
                                <label class="form-label">Volumen</label>
                                <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select" disabled="@(isFolio && !ordenCierre.IsCierreVolumen)">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Cantidades is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Cantidades.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Cantidades)
                                        {
                                            <option value="@item">@item.ToString("N2")</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }

                    @if (ordenCierre.IsDifferentVol)
                    {
                        <div class="col-md-2 col-sm-6 mb-1">
                            <div class="col-12">
                                <label class="form-label">Volumen</label>
                                <InputNumber class="form-control col-12" @bind-Value="ordenCierre.Volumen" disabled="@(isFolio  && !ordenCierre.IsCierreVolumen)" MaxLength="10" />
                            </div>
                        </div>
                    }

                    <div class="col-md-2 col-sm-6 d-flex">
                        <div class="col-12 my-auto d-flex">
                            <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentVol Name="CheckBox1" class="me-2" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipVolumen(infoIconVolumen))" @ref="infoIconVolumen">
                                <label class="form-label" for="CheckBox1">
                                    Volumen Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4 col-sm-6 mb-1">
                        <div class="col-12">
                            <label>Fecha de carga en terminal</label>
                            <InputDate class="col-3 form-control" TValue="DateTime?" @bind-Value="@ordenCierre.FchCar"></InputDate>
                        </div>
                    </div>

                    <div class="col-md-4 col-sm-6 mb-1">
                        <div class="col-12">
                            <label>Fecha deseada de recepción</label>
                            <InputDate class="col-3 form-control" TValue="DateTime?" @bind-Value="@ordenCierre.FchLlegada"></InputDate>
                        </div>
                    </div>
                    @if (!ordenCierre.IsDifferentTurn)
                    {
                        <div class="col-md-2 col-sm-2 mb-1">
                            <div class="col-12">
                                <label>Turno</label>
                                <InputSelect @bind-Value="ordenCierre.Turno" class="form-select">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Turnos is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Turnos.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Turnos)
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }
                    @if (ordenCierre.IsDifferentTurn)
                    {
                        <div class="col-md-2 col-sm-2 mb-1">
                            <div class="col-12">
                                <label class="form-label">Turno</label>
                                <InputText class="form-control col-12" @bind-Value="ordenCierre.Turno" MaxLength="30" />
                            </div>
                        </div>
                    }
                    <div class="col-md-2 col-sm-2 d-flex">
                        <div class="col-12 my-auto d-flex">
                            <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentTurn Name="CheckBox2" class="me-2" />
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipTurno(infoIconVolumen))" @ref="infoIconVolumen">
                                <label class="form-label" for="CheckBox2">
                                    Turno Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    @if (ordenCierre.Precio_Manual)
                    {
                        <div class="col-md-4 col-sm-6 mb-1">
                            <div class="col-12">
                                <label>Precio</label>
                                <InputNumber class="form-control col-12" TValue="double" @bind-Value="@ordenCierre.Precio" disabled="true"></InputNumber>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-4 col-sm-6 mb-1">
                            <div class="col-12">
                                <label>
                                    Precio <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                                <input type="number" step="0.0001" class="form-control form-control-sm col-12" @bind="@ordenCierre.Precio" />
                            </div>
                        </div>
                    }

                    @*@if (!isFolio || ordenCierre.IsCierreVolumen)
                        {
                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label @onmouseenter="@(args => ShowTooltip(infoFolio))" @ref="infoFolio">
                                        Folio <i class="fa-solid fa-circle-info fa-xs"></i>
                                    </label>
                                    <div class="col-12">
                                        <RadzenTextBox class="form-control col-12 disabled" @bind-Value="ordenCierre.Folio" Disabled="true" />
                                    </div>
                                </div>
                            </div>
                        }*@
                </div>
                <div class="col-12 d-flex justify-content-center mt-2">
                    @if (isEditing)
                    {
                        <div class="col-md-4 col-sm-6 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="button" @onclick="@EditPedido">
                                <i class="fa fa-solid fa-plus"></i>
                                <b>Guardar Cambio</b>
                                @if (loadingAgregar)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                        <div class="col-md-4 col-sm-6 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="button" @onclick="@CancelEdit">
                                <i class="fa fa-solid fa-xmark"></i>
                                <b>Cancelar Cambio</b>
                            </button>
                        </div>
                    }
                    @if (!isEditing)
                    {
                        @if (!isFolio || ordenCierre.IsCierreVolumen)
                        {
                            <div class="col-md-3 col-sm-6 mx-2">
                                <button class="btn gcom-bg-amarillo col-12" type="submit">
                                    <i class="fa fa-solid fa-check"></i>
                                    <b>Crear orden</b>
                                    @if (loadingConfirm)
                                    {
                                        <SpinnerLoading></SpinnerLoading>
                                    }
                                </button>
                            </div>
                        }
                    }
                    <div class="col-md-3 col-sm-6 mx-2">
                        <button class="btn gcom-bg-amarillo col-12" type="button" @onclick="@SendEmail">
                            <i class="fa fa-solid fa-envelope"></i>
                            <b>Enviar órdenes</b>
                            @if (loadingSend)
                            {
                                <SpinnerLoading></SpinnerLoading>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador, Comprador">
    <div class="col-12 d-flex ancho-tabla justify-content-center row table-responsive card ms-1 mt-3">
        <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho-tabla" Style="height:600px;" ColumnWidth="200px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Settings="@Settings"
                        IsLoading="loading" @ref="@gridOC" AllowSorting="true" AllowFiltering="true" Culture="CultureInfo.CurrentCulture" PageSizeOptions="@pageSizeOptions">
            <Columns>
                @*<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador, Comprador" Context="Acciones">
                    <Authorized>*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" Filterable="false" Width="170px" OrderIndex="1">
                    <Template Context="item">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador, Comprador" Context="Acciones">
                            <Authorized>
                                <div class="col-12 row">
                                    @if (item.OrdenEmbarque!.CodordCom is null)
                                    {
                                        <div class="col">
                                            <button class="btn btn-primary col-12" @onclick="@(()=>SetEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-danger col-12" @onclick="@(()=>CancelPedido(item))"><i class="fa fa-solid fa-cancel"></i></button>
                                        </div>
                                    }
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
                @*</Authorized>
                    </AuthorizeView>*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Width="110px" OrderIndex="2" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Bin" Property="OrdenEmbarque.Bin" Width="100px" OrderIndex="3" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Terminal" Property="OrdenEmbarque.Tad.Den" Width="140px" OrderIndex="4" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino (Estación)" Property="OrdenEmbarque.Destino.Den" Width="300px" OrderIndex="5" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="OrdenEmbarque.Producto.Den" Width="280px" OrderIndex="6" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="130px" FormatString="{0:N2}" Filterable="false" OrderIndex="7">

                    <Template Context="item">
                        <div class="col-12">
                            @string.Format("{0:N2}",
                            item?.OrdenEmbarque?.Orden is not null ? item?.OrdenEmbarque?.Orden?.Vol :
                            item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom
                            : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom2
                            : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom3
                            : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom4
                            : item?.Volumen
                            )
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Width="140px" Property="OrdenEmbarque.Pre" OrderIndex="8" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de carga" Property="OrdenEmbarque.Fchcar" FormatString="{0:d}" Width="180px" OrderIndex="9" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Estado" Property="OrdenEmbarque.Estado.den" Width="100px" OrderIndex="10" Filterable="false" />
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    public List<string> Turnos { get; set; } = new List<string>() { "11:00 pm - 7:00 am", "7:00 am - 3:00 pm", "3:00 pm - 11:00 pm" };

    //grid
    private RadzenDataGrid<OrdenCierre> gridOC = new RadzenDataGrid<OrdenCierre>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    private List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };
    private VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    //listas
    private List<Tad> Terminales { get; set; } = null!;
    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<Precio> Precios { get; set; } = null!;
    private List<Producto> Productos { get; set; } = null!;
    private List<Precio> ProductosDisponibles { get; set; } = null!;
    private IEnumerable<CodDenDTO> Destino { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;
    private List<string> Folios { get; set; } = new List<string>();

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
    Dictionary<string, string> queryStringObjectFolios = new Dictionary<string, string>();

    private DateTime FechaCarga = DateTime.MinValue;
    private float Precio = 0;

    private string folio { get; set; } = string.Empty;

    bool loadingAgregar = false;
    bool loadingConfirm = false;
    bool loading = false;
    bool IsDifferentVol = false;
    bool isFolio = false;
    bool isEditing = false;
    bool IsCierreVolumen = false;
    bool SendOrden = false;
    bool loadingSend = false;

    private byte? CodProductoSeleccionado = 0;
    private int? DestinoSeleccionado = 0;
    private Int16? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;
    private short GrupoSeleccionadoFiltro = 0;
    private short GrupoSeleccionadoFiltroB = 0;
    private int ClienteSeleccionadoFiltro = 0;

    private Cliente Cliente { get; set; } = new Cliente();
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;

    private List<int> ordenPendientes = new List<int>();

    ElementReference infoIconVolumen;
    ElementReference infoFolio;

    private ClaimsPrincipal User { get; set; } = null!;
    int width = 0;
    string TotalWidth = string.Empty;

    int count = 0;

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();
    UsuarioInfo user { get; set; } = new UsuarioInfo();

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    bool isClose = false;

    protected override async Task OnInitializedAsync()
    {
        await GetFolios();
        await GetTerminales();
        await GetDestinosComprador();
        //await GetGrupos();
        await GetCantidades();

        //width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        var cm = await js.GetItemLocalStorage("CloseMenu");
        if (!string.IsNullOrEmpty(cm))
            isClose = bool.Parse(cm);

        if (isClose)
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
        else
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";

        var authState = await auth.GetAuthenticationStateAsync();
        if (authState is not null)
            User = authState.User;

        await CheckClient();
        ordenCierre.CodGru = user.CodGru;
        ordenCierre.CodCte = user.CodCte;
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private void ClearGridData()
    {
        count = 0;
        ordenCierres = new List<OrdenCierre>();
        ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
        isEditing = false;
        ordenCierre.IsCierreVolumen = false;
        isFolio = false;
    }

    void ShowTooltipVolumen(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introduzca una cantidad diferente.", options);
    void ShowTooltipTurno(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introduzca un turno de forma manual.", options);
    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null!) =>
    ts.Open(elementReference, "El Folio se llenara automaticamente al crear el pedido.", options);

    private void changeEdit()
    {
        if (!Cantidades.Any(x => x == ordenCierre.Volumen))
            ordenCierre.IsDifferentVol = true;
        else
            ordenCierre.IsDifferentVol = false;
        isEditing = !isEditing;
    }

    public async Task GetFolios()
    {
        try
        {
            var response = await http.Get<List<string>>($"api/cierre/folios");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Folios = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetPedidoFolio()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/filtrar");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordenCierres = response.Response;
                ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };
                isFolio = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "¿Desea cancelar la orden?"
            });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseOC = await http.Delete($"api/cierre/{orden.Cod}/cancel");
                if (responseOC.Error)
                {
                    var responseHttp = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var response = await http.Delete($"api/pedido/{orden.OrdenEmbarque.Cod}/cancel");
                    if (response.Error)
                    {
                        var responseHttp = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await Swal.FireAsync("Orden cancelada", $"La orden ha sido cancelada.", SweetAlertIcon.Info);
                        ordenCierres.Remove(orden);
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<Tad>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (ordenCierres.Count != 0)
            {
                ordens = new List<OrdenEmbarque>();
                foreach (var item in ordenCierres)
                    if (item.OrdenEmbarque!.CodordCom == null && item.OrdenEmbarque.Codtad != 0)
                        ordens.Add(item.OrdenEmbarque!);

                if (ordens.Count > 0)
                {
                    var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
                    if (response.Error)
                    {
                        loadingConfirm = false;
                        string? message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingConfirm = false;
                        await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                        ClearGridData();
                    }
                }
                else
                {
                    loadingAgregar = false;
                    loadingConfirm = false;

                    await Swal.FireAsync("Sin ordenes", "No tiene ordenes para confirmar", SweetAlertIcon.Info);
                }
            }
            else
            {
                loadingConfirm = false;
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "Debe tener ordenes para poder confirmarlas", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task EditPedido()
    {
        loadingAgregar = true;
        try
        {
            var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
            if (responseOC.Error)
            {
                loadingAgregar = false;
                string? message = await responseOC.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido/update", ordenCierre.OrdenEmbarque);
                if (response.Error)
                {
                    loadingAgregar = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingAgregar = false;
                    CancelEdit();
                    await GetFiltroCierres();
                }
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void SetEdit(OrdenCierre? orden)
    {
        try
        {
            ordenCierre = orden;

            await GetClientes();
            //await GetEstaciones();
            await GetPrecios();

            if (!Cantidades.Any(x => x == ordenCierre.Volumen))
                ordenCierre.IsDifferentVol = true;
            else
                ordenCierre.IsDifferentVol = false;
            isEditing = true;

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(JsonConvert.SerializeObject(e));
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetDestinosComprador()
    {
        try
        {
            var responseHttp = await http.Get<List<CodDenDTO>>($"api/destino/comprador");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Estaciones = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (ordenCierre.CodGru != null && GrupoSeleccionado != ordenCierre.CodGru)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{ordenCierre.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = ordenCierre.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetFiltroCierres()
    {
        try
        {
            isFolio = true;

            if (filtro != null)
            {
                filtro.forFolio = true;
                if (!string.IsNullOrEmpty(filtro.Folio))
                {
                    var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
                    if (response.Error)
                    {
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        if (response.Response.Count > 0)
                        {
                            if (response.Response.FirstOrDefault()!.CodPed == 0)
                            {
                                ordenCierre.IsCierreVolumen = true;

                                filtro.forFolio = true;
                                ordenCierre.CodDes = response.Response.FirstOrDefault().CodDes;
                                //await GetEstaciones();
                                await GetDestinosComprador();
                                ordenCierre.CodPrd = response.Response.FirstOrDefault().CodPrd;
                                await GetPrecios();
                                ordenCierre.Precio = response.Response.FirstOrDefault().Precio;
                                var responseDetalle = await http.Get<List<OrdenCierre>>($"api/cierre/{filtro.Folio}/detalle");
                                if (responseDetalle.Error)
                                {
                                    var message = await responseDetalle.ObtenerMensajeError();
                                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                                }
                                else
                                {
                                    var responseVolumen = await http.Post<CierreFiltroDTO, VolumenDisponibleDTO>($"api/cierre/volumen", filtro);
                                    if (response.Error)
                                    {
                                        var message = await response.ObtenerMensajeError();
                                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                                    }
                                    else
                                    {
                                        volumenDisponible = responseVolumen.Response;
                                        ordenCierres = responseDetalle.Response;
                                        count = 0;
                                    }
                                }
                            }
                            else
                            {
                                ordenCierre.IsCierreVolumen = false;
                                ordenCierres = response.Response;
                            }
                        }
                    }
                }
                else
                {
                    await Swal.FireAsync("Alerta", "Introduzca un valor valido para el folio.", SweetAlertIcon.Warning);
                    return;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetFolio()
    {
        try
        {
            if (ordenCierre.FchCar == DateTime.Today)
            {
                await Swal.FireAsync("Error", "La fecha no debe de ser la misma del dia.", SweetAlertIcon.Error);
                return;
            }

            var response = await http.Get<Cliente>($"api/clientes/one");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                //if (string.IsNullOrEmpty(ordenCierre.Folio))
                //{
                //    Cliente = response.Response;
                //    Cliente.Consecutivo = Cliente.Consecutivo != null ? Cliente.Consecutivo + 1 : 1;
                //    var userCod = User.Identity?.Name?.Substring(0, 3);
                //    var guid = Guid.NewGuid().ToString().Split("-");
                //    ordenCierre.Folio = $"O-{userCod}{Cliente.Consecutivo}-{guid[0]}";
                //}

                await PutClientes();
                await CreateCierre();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PutClientes()
    {
        try
        {
            var response = await http.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeProducto()
    {
        try
        {
            if (ordenCierre.CodPrd != null && CodProductoSeleccionado != ordenCierre.CodPrd)
            {
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                //StateHasChanged();
            }
            //CodProductoSeleccionado = ordenCierre.CodPrd;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetPrecios()
    {
        try
        {

            ZonaCliente zonaCliente = new ZonaCliente();
            zonaCliente.DesCod = ordenCierre.CodDes;
            zonaCliente.CteCod = ordenCierre.CodCte;
            var precioFolio = isFolio ? filtro.Folio : string.Empty;
            var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos/{precioFolio}", zonaCliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Precios = response.Response;
                DestinoSeleccionado = ordenCierre.CodDes;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CreateCierre()
    {
        try
        {
            //var responseBIN = await http.Get<int>("api/pedido/binNumber");
            //if (responseBIN.Error)
            //{
            //    var message = await responseBIN.ObtenerMensajeError();
            //    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            //}
            //else
            //{
            //    var bin = responseBIN.Response;
            //    OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
            //    {
            //        Codest = 9,
            //        Codtad = ordenCierre.CodTad,
            //        Codprd = ordenCierre.CodPrd,
            //        Pre = ordenCierre.Precio,
            //        Vol = ordenCierre.Volumen,
            //        Coddes = ordenCierre.CodDes,
            //        Fchpet = DateTime.Now,
            //        Fchcar = ordenCierre.FchCar,
            //        Bin = count == 0 ? ++bin : count % 2 == 0 ? ++bin : bin
            //    };

            //var response = await http.Post<OrdenEmbarque, OrdenEmbarque>($"api/pedido/cierre/{filtro.Folio}", ordenEmbarque);
            //if (response.Error)
            //{
            //    var message = await response.ObtenerMensajeError();
            //    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            //}
            //else
            //{
            //    ordenCierre.CodPed = response.Response.Cod;
            SendOrden = true;
            if (!string.IsNullOrEmpty(ordenCierre.Folio_Perteneciente))
            {
                queryStringObject["folio"] = ordenCierre.Folio_Perteneciente;

                var DefaultValues = new List<string>() { "false", "", "0" };
                var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

                var responseVerify = await http.Get<bool>($"api/cierre/caducidad/verify?{uri}");
                if (responseVerify.Error)
                {
                    var message = await responseVerify.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    SendOrden = false;
                    return;
                }

            }
            foreach (var item in Precios)
            {
                if (item.PrecioOverDate)
                    if (ordenCierre.Precio == item.Pre)
                        ordenCierre.PrecioOverDate = true;

                if (ordenCierre.Precio == item.Pre)
                    ordenCierre.ID_Moneda = item.ID_Moneda;
            }

            var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/pedido/create/all", ordenCierre);
            if (responseOC.Error)
            {
                var message = await responseOC.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var orden = responseOC.Response;
                // orden.OrdenEmbarque = response.Response;

                OrdenPedido ordenPedido = new OrdenPedido();
                ordenPedido.CodPed = ordenCierre.CodPed;
                ordenPedido.Folio = filtro.Folio;

                var responseOP = await http.Post<OrdenPedido>($"api/pedido/orden/add", ordenPedido);
                if (responseOP.Error)
                {
                    var message = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierres.Add(responseOC.Response);
                    await gridOC.Reload();
                    count++;
                }
            }
            //  }
            // }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmail()
    {
        try
        {
            ms.Notify(new NotificationMessage()
            {
                Summary = "Enviando correo",
                Detail = "Se esta enviando el correo de notificación para validación de las órdenes, por favor, espere en esta pantalla hasta terminar el proceso",
                Duration = 10000,
                Severity = NotificationSeverity.Info
            });
            if (ordenCierres.Count > 0)
            {
                //if (ordenCierres.DistinctBy(x => x.Folio).Count() == 1)
                //{
                loadingSend = true;

                var response = await http.Post<List<OrdenCierre>>("api/email/validacionorden", ordenCierres);
                if (response.Error)
                {
                    loadingSend = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingSend = false;
                    await Swal.FireAsync("Exito", "Correo enviado", SweetAlertIcon.Success);
                    ordenCierres = new List<OrdenCierre>();
                    ordenCierre = new OrdenCierre();
                }
                //}
                //else
                //{
                //    await Swal.FireAsync("Alerta", "Se encontraron mas de un folio en el listado de ordenes. Filtre solo uno para poder enviar el correo.", SweetAlertIcon.Warning);
                //}
            }
            else
            {
                await Swal.FireAsync("Alerta", "Se deben tener una orden para enviar el correo.", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingSend = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void CancelEdit()
    {
        try
        {
            ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
            isEditing = false;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingPedido", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingsPedido");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>
    (result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetFoliosFiltro()
    {
        try
        {
            var response = await http.Post<CierreFiltroDTO, List<string>>($"api/cierre/folios/{user.CodCte}", fechas);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Folios = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientesFiltro()
    {
        try
        {
            if (GrupoSeleccionadoFiltro != 0 && GrupoSeleccionadoFiltroB != GrupoSeleccionadoFiltro)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{GrupoSeleccionadoFiltro}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoFiltroB = GrupoSeleccionadoFiltro;
                    ClientesFiltro = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task CheckClient()
    {
        try
        {
            var response = await http.Get<UsuarioInfo>("api/cuentas/check/client");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                user = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task ChangePrecioType()
    {
        try
        {
            if (ordenCierre.CodPrd != null)
            {
                if (Precios.Any(x => x.Producto?.Cod != ordenCierre.CodPrd))
                {
                    ordenCierre.CodPrd = Precios.FirstOrDefault()?.Producto?.Cod;
                }
                ordenCierre.Precio = Precios.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd).Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task OpenModal()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosPedidosComponent>("Folios de pedidos",
            new Dictionary<string, object>() { { "isStatus", false } },
            new DialogOptions()
            {
                Width = "90%",
                Height = "600px",
                Resizable = true,
                Draggable = false
            });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}