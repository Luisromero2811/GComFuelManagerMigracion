@page "/pedidos"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject TooltipService ts
@inject IJSRuntime js
@inject AuthenticationStateProvider auth
@inject PedidoOrdenValidation validation

@*@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador")]*@

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Comprador">
    <h4><b>Pedidos</b></h4>
    <div class="col-12 card shadow-sm mb-3">
        <div class="col-12 card-body">
            <div class="col-12 px-4 mb-3">
                <div class="col-6 row">
                    <div class="col-8">
                        <label class="form-label">Folio</label>
                        @*<InputText class="form-control col-12" @bind-Value="filtro.Folio" />*@
                        <RadzenDropDown Data="Folios" class="col-12" @bind-Value="@filtro.Folio" Style="height:50px"
                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowVirtualization="true">
                            <ValueTemplate Context="data">
                                <InputText class="form-control col-12" @bind-Value="@filtro.Folio" />
                            </ValueTemplate>
                        </RadzenDropDown>
                        @*<FolioListSearch folio="@filtro.Folio">
                        </FolioListSearch>*@
                    </div>
                    <div class="col-4 d-flex row">
                        <div class="col-6 mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo" @onclick="@GetFiltroCierres">
                                <i class="fa fa-solid fa-magnifying-glass"></i>
                            </button>
                        </div>
                        <div class="col-6 mt-auto">
                            <button class="col-12 btn gcom-bg-amarillo" @onclick="@ClearGridData">
                                <i class="fa fa-solid fa-broom"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Comprador" Context="Create">
    <div class="col-12 card shadow">
        <div class="card-body">
            <EditForm Model="@ordenCierre" class="form col-12" OnValidSubmit="@GetFolio">
                @*<DataAnnotationsValidator />*@
                <FluentValidationValidator Validator="validation" />
                <ValidationSummary />
                <div class="row col-12 g-3 mb-3 px-4">
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Terminal</label>
                            <RadzenDropDown Data="Terminales" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodTad"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Grupo</label>
                            <RadzenDropDown Data="Grupos" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodGru"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" Change="@GetClientes" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Cliente</label>
                            <RadzenDropDown Data="Clientes" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodCte"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowVirtualization="true" Change="@GetEstaciones" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Estacion</label>
                            <RadzenDropDown Data="Estaciones" class="col-12" TextProperty="Den" ValueProperty="Cod" @bind-Value="ordenCierre.CodDes"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@GetPrecios"
                                            AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Producto</label>
                            <RadzenDropDown Data="Productos" class="col-12" TextProperty="Producto.Den" ValueProperty="Producto.Cod" @bind-Value="ordenCierre.CodPrd"
                                            AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change="@ChangeProducto"
                                            AllowVirtualization="true" Disabled="isFolio && !ordenCierre.IsCierreVolumen">
                                <Template Context="data">
                                    @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                </Template>
                                <ValueTemplate Context="data">
                                    @((data as Precio).Producto.Den) | $@((data as Precio).Pre)
                                </ValueTemplate>
                            </RadzenDropDown>
                        </div>
                    </div>
                    @if (!ordenCierre.IsDifferentVol)
                    {
                        <div class="col-2 mb-1">
                            <div class="col-12">
                                <label class="form-label">Volumen</label>
                                <InputSelect @bind-Value="ordenCierre.Volumen" class="form-select" disabled="@(isFolio && !ordenCierre.IsCierreVolumen)">
                                    <option>-- Selecciona una opcion --</option>
                                    @if (Cantidades is null)
                                    {
                                        <option disabled> Cargando ...</option>
                                    }
                                    else if (Cantidades.Count == 0)
                                    {
                                        <option disabled> No hay capacidades</option>
                                    }
                                    else
                                    {
                                        foreach (var item in Cantidades)
                                        {
                                            <option value="@item">@item.ToString("N2")</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    }

                    @if (ordenCierre.IsDifferentVol)
                    {
                        <div class="col-2 mb-1">
                            <div class="col-12">
                                <label class="form-label">Volumen</label>
                                <InputNumber class="form-control col-12" @bind-Value="ordenCierre.Volumen" disabled="@(isFolio  && !ordenCierre.IsCierreVolumen)" />
                            </div>
                        </div>
                    }

                    <div class="col-2 mb-1 d-flex">
                        <div class="col-12 my-auto d-flex">
                            <RadzenCheckBox @bind-Value=@ordenCierre.IsDifferentVol Name="CheckBox1" class="me-2" Disabled="isFolio && !ordenCierre.IsCierreVolumen" />
                            <div class="col-12 row p-0" @onmouseenter="@(args => ShowTooltipVolumen(infoIconVolumen))" @ref="infoIconVolumen">
                                <label class="form-label" for="CheckBox1">
                                    Volumen Libre <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Fecha de carga en terminal</label>
                            <InputDate class="col-3 form-control" TValue="DateTime?" @bind-Value="@ordenCierre.FchCar"></InputDate>
                        </div>
                    </div>

                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Fecha estimada de llegada</label>
                            <InputDate class="col-3 form-control" TValue="DateTime?" @bind-Value="@ordenCierre.FchLlegada"></InputDate>
                        </div>
                    </div>

                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Turno</label>
                            <InputSelect @bind-Value="ordenCierre.Turno" class="form-select">
                                <option>-- Selecciona una opcion --</option>
                                @if (Turnos is null)
                                {
                                    <option disabled> Cargando ...</option>
                                }
                                else if (Turnos.Count == 0)
                                {
                                    <option disabled> No hay capacidades</option>
                                }
                                else
                                {
                                    foreach (var item in Turnos)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="col-4 mb-1">
                        <div class="col-12">
                            <label>Precio</label>
                            <InputNumber class="form-control col-12" TValue="double?" @bind-Value="@ordenCierre.Precio" disabled="true"></InputNumber>
                        </div>
                    </div>
                    @if (!isFolio || ordenCierre.IsCierreVolumen)
                    {
                        <div class="col-4 mb-1">
                            <div class="col-12">
                                <label @onmouseenter="@(args => ShowTooltip(infoFolio))" @ref="infoFolio">
                                    Folio <i class="fa-solid fa-circle-info fa-xs"></i>
                                </label>
                                <div class="col-12">
                                    <RadzenTextBox class="form-control col-12 disabled" @bind-Value="ordenCierre.Folio" Disabled="true" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-12 d-flex justify-content-center mt-2">
                    @if (isEditing)
                    {
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="button" @onclick="@EditPedido">
                                <i class="fa fa-solid fa-plus"></i>
                                <b>Guardar Cambio</b>
                                @if (loadingAgregar)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="button" @onclick="@CancelEdit">
                                <i class="fa fa-solid fa-xmark"></i>
                                <b>Cancelar Cambio</b>
                            </button>
                        </div>
                    }
                    @if (!isFolio && !isEditing || ordenCierre.IsCierreVolumen)
                    {
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                                <b>Crear orden</b>
                                @if (loadingConfirm)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                    }
                    @if (!isEditing)
                    {
                        <div class="col-4 px-2">
                            <button class="btn gcom-bg-amarillo col-12 mx-2" type="button" @onclick="@ConfirmPedido">
                                <i class="fa fa-solid fa-check"></i>
                                <b>Confirmar Pedidos</b>
                                @if (loadingConfirm)
                                {
                                    <SpinnerLoading></SpinnerLoading>
                                }
                            </button>
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Comercial, Programador, Comprador">
    <div class="col-12 d-flex justify-content-center row">
        @if (ordenCierre.IsCierreVolumen is true && volumenDisponible.Productos.Count > 0)
        {
            <div class="col-12 mt-2">
                <b class="my-auto">
                    @*Volumen: @(volumenDisponible.VolumenTotal.ToString("N2"))*@
                    @foreach (var item in volumenDisponible.Productos)
                    {
                        @if (!string.IsNullOrEmpty(item.Nombre))
                        {
                            <div class="col-12 row">
                                <p>@(item.Nombre) | Disponible : @(item.Disponible?.ToString("N2")) | Espera Carga : @(item.Congelado?.ToString("N2")) | Consumido : @(item.Consumido?.ToString("N2"))</p>
                            </div>
                        }
                    }
                </b>
            </div>
        }
        <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;"
                        IsLoading="loading" @ref="@gridOC" AllowSorting="true" AllowColumnPicking="true">
            <Columns>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" Width="200px" Visible="true">
                    <Template Context="item">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Comercial, Programador, Comprador" Context="Acciones">
                            <div class="col-12 row">
                                @if (item.OrdenEmbarque!.CodordCom is null)
                                {
                                    <div class="col">
                                        <button class="btn btn-primary col-12" @onclick="@(()=>SetEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                    </div>
                                }
                            </div>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Width="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Bin" Property="OrdenEmbarque.Bin" Width="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Terminal" Property="OrdenEmbarque.Tad.Den" Width="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="OrdenEmbarque.Destino.Den" Width="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="OrdenEmbarque.Producto.Den" Width="200px" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="200px" Property="OrdenEmbarque.Vol" FormatString="{0:N2}" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Width="200px" Property="OrdenEmbarque.Pre" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de carga" Property="OrdenEmbarque.Fchcar" FormatString="{0:d}" Width="200px" />
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {
    CierreFiltroDTO filtro { get; set; } = new CierreFiltroDTO();

    public List<string> Turnos { get; set; } = new List<string>() { "11:00 pm - 7:00 am", "7:00 am - 3:00 pm", "3:00 pm - 11:00 pm" };

    //grid
    private RadzenDataGrid<OrdenCierre> gridOC = new RadzenDataGrid<OrdenCierre>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    private List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };
    private VolumenDisponibleDTO volumenDisponible { get; set; } = new VolumenDisponibleDTO();

    //listas
    private List<Tad> Terminales { get; set; } = null!;
    private IEnumerable<Grupo> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<Precio> Productos { get; set; } = null!;
    private List<Precio> ProductosDisponibles { get; set; } = null!;
    private IEnumerable<CodDenDTO> Destino { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;
    private List<string> Folios { get; set; } = new List<string>();

    private DateTime FechaCarga = DateTime.MinValue;
    private float Precio = 0;

    private string folio { get; set; } = string.Empty;

    bool loadingAgregar = false;
    bool loadingConfirm = false;
    bool loading = false;
    bool IsDifferentVol = false;
    bool isFolio = false;
    bool isEditing = false;
    bool IsCierreVolumen = false;

    private byte? CodProductoSeleccionado = 0;
    private int? DestinoSeleccionado = 0;
    private Int16? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;

    private Cliente Cliente { get; set; } = new Cliente();
    private List<int> ordenPendientes = new List<int>();

    ElementReference infoIconVolumen;
    ElementReference infoFolio;

    private ClaimsPrincipal User { get; set; } = null!;
    int width = 0;
    string TotalWidth = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetFolios();
        await GetTerminales();
        await GetGrupos();
        await GetCantidades();
        width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        Console.WriteLine(width);
        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";
        var authState = await auth.GetAuthenticationStateAsync();
        if (authState is not null)
            User = authState.User;
    }
    private void ClearGridData()
    {
        ordenCierres = new List<OrdenCierre>();
        ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
        isEditing = false;
        ordenCierre.IsCierreVolumen = false;
        isFolio = false;
    }

    void ShowTooltipVolumen(ElementReference elementReference, TooltipOptions options = null!) => ts.Open(elementReference, "Introduzca una cantidad diferente.", options);
    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null!) =>
    ts.Open(elementReference, "El Folio se llenara automaticamente al crear el pedido.", options);

    private void changeEdit()
    {
        if (!Cantidades.Any(x => x == ordenCierre.Volumen))
            ordenCierre.IsDifferentVol = true;
        else
            ordenCierre.IsDifferentVol = false;
        isEditing = !isEditing;
    }

    public async Task GetFolios()
    {
        try
        {
            var response = await http.Get<List<string>>($"api/cierre/folios");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Folios = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetPedidoFolio()
    {
        try
        {
            var response = await http.Get<List<OrdenCierre>>($"api/cierre/filtrar");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordenCierres = response.Response;
                ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };
                isFolio = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CancelPedido(OrdenCierre orden)
    {
        try
        {
            var confirm = await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar",
                    Text = "¿Desea cancelar la orden?"
                });

            if (!string.IsNullOrEmpty(confirm.Value))
            {

                var responseOC = await http.Delete($"api/cierre/{orden.Cod}/cancel");
                if (responseOC.Error)
                {
                    var responseHttp = await responseOC.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    var response = await http.Delete($"api/pedido/{orden.OrdenEmbarque.Cod}/cancel");
                    if (response.Error)
                    {
                        var responseHttp = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                    }
                    else
                    {
                        await Swal.FireAsync("Pedido cancelado", $"El pedido ha sido cancelado.", SweetAlertIcon.Info);
                        await GetPedidoFolio();
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetOrdenesPendientes()
    {
        try
        {
            List<int>? ordenesPendientes = new List<int>();
            try
            {
                if (await js.GetItemLocalStorage("PEDIDO") != null)
                {
                    ordenesPendientes = JsonConvert.DeserializeObject<List<int>>(await js.GetItemLocalStorage("PEDIDO"));
                    ordens = null!;
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            }

            DateTime expiration;
            if (DateTime.TryParse(await js.GetItemLocalStorage("EXPIRACIONPEDIDO"), out expiration))
            {
                if (DateTime.Today.Date < expiration)
                {
                    var response = await http.Post<List<int>, List<OrdenEmbarque>>("api/pedido/list", ordenesPendientes);

                    if (response.Error)
                    {
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        ordens = response.Response;
                        ordenPendientes = ordenesPendientes;
                    }
                }
                else
                {
                    try
                    {
                        foreach (var item in ordenesPendientes)
                        {
                            var response = await http.Delete($"api/pedido/{item}/cancel");
                            if (response.Error)
                            {
                                var message = await response.ObtenerMensajeError();
                                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                            }
                        }
                        ordens = new List<OrdenEmbarque>();
                        await js.RemoveItemLocalStorage("PEDIDO");
                        await js.RemoveItemLocalStorage("EXPIRACIONPEDIDO");
                    }
                    catch (Exception e)
                    {
                        await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
                        throw e;
                    }
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<Tad>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<IEnumerable<Grupo>>("api/grupo/all");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SavePedido()
    {
        loadingAgregar = true;
        try
        {
            if (ordenEmbarque.Codtad != 0 && ordenCierre.CodPrd != 0 && ordenCierre.CodDes != 0 && ordenCierre.Volumen != 0)
            {
                ordenEmbarque.Codest = 9;
                ordenEmbarque.Fchpet = DateTime.Now;
                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                if (response.Error)
                {
                    loadingAgregar = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingAgregar = false;
                    if (response.Response is not null)
                    {
                        ordens.Add(response.Response);
                    }
                }
            }
            else
            {
                await Swal.FireAsync("Advertencia", "Revise que no falte ningun campo en el formulario por llenar.", SweetAlertIcon.Warning);
                loadingAgregar = false;
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (ordenCierres.Count != 0)
            {
                foreach (var item in ordenCierres)
                    if (item.OrdenEmbarque!.CodordCom == null && item.OrdenEmbarque.Codtad != 0)
                        ordens.Add(item.OrdenEmbarque!);

                if (ordens.Count > 0)
                {
                    var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
                    if (response.Error)
                    {
                        loadingConfirm = false;
                        string? message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingConfirm = false;
                        await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                        ClearGridData();
                    }
                }
                else
                {
                    loadingAgregar = false;
                    loadingConfirm = false;

                    await Swal.FireAsync("Sin ordenes", "No tiene ordenes para confirmar", SweetAlertIcon.Info);
                }
            }
            else
            {
                        loadingConfirm = false;
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "Debe tener ordenes para poder confirmarlas", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task EditPedido()
    {
        loadingAgregar = true;
        try
        {
            var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre/update", ordenCierre);
            if (responseOC.Error)
            {
                loadingAgregar = false;
                string? message = await responseOC.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido/update", ordenCierre.OrdenEmbarque);
                if (response.Error)
                {
                    loadingAgregar = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingAgregar = false;
                    CancelEdit();
                    await GetFiltroCierres();
                }
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async void SetEdit(OrdenCierre? orden)
    {
        try
        {
            ordenCierre = orden;

            await GetClientes();
            await GetEstaciones();
            await GetPrecios();

            if (!Cantidades.Any(x => x == ordenCierre.Volumen))
                ordenCierre.IsDifferentVol = true;
            else
                ordenCierre.IsDifferentVol = false;
            isEditing = true;

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(JsonConvert.SerializeObject(e));
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            if (ordenCierre.CodCte != null && ClienteSeleccionado != ordenCierre.CodCte)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/estacion/{ordenCierre.CodCte}");
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    Estaciones = response.Response;
                    ClienteSeleccionado = ordenCierre.CodCte;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (ordenCierre.CodGru != null && GrupoSeleccionado != ordenCierre.CodGru)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{ordenCierre.CodGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = ordenCierre.CodGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetFiltroCierres()
    {
        try
        {
            isFolio = true;

            if (filtro != null)
            {
                filtro.forFolio = true;
                if (!string.IsNullOrEmpty(filtro.Folio))
                {
                    var response = await http.Post<CierreFiltroDTO, List<OrdenCierre>>("api/cierre/filtrar", filtro);
                    if (response.Error)
                    {
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        if (response.Response.FirstOrDefault()!.CodPed == 0)
                        {
                            ordenCierre.IsCierreVolumen = true;

                            filtro.forFolio = true;
                            ordenCierre.CodGru = response.Response.FirstOrDefault().CodGru;
                            ordenCierre.CodCte = response.Response.FirstOrDefault().CodCte;
                            await GetClientes();
                            ordenCierre.CodDes = response.Response.FirstOrDefault().CodDes;
                            await GetEstaciones();
                            ordenCierre.CodPrd = response.Response.FirstOrDefault().CodPrd;
                            await GetPrecios();
                            ordenCierre.Precio = response.Response.FirstOrDefault().Precio;
                            var responseDetalle = await http.Get<List<OrdenCierre>>($"api/cierre/{filtro.Folio}/detalle");
                            if (responseDetalle.Error)
                            {
                                var message = await responseDetalle.ObtenerMensajeError();
                                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                            }
                            else
                            {
                                var responseVolumen = await http.Post<CierreFiltroDTO, VolumenDisponibleDTO>($"api/cierre/volumen", filtro);
                                if (response.Error)
                                {
                                    var message = await response.ObtenerMensajeError();
                                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                                }
                                else
                                {
                                    volumenDisponible = responseVolumen.Response;
                                    ordenCierres = responseDetalle.Response;
                                }
                            }
                        }
                        else
                        {
                            ordenCierre.IsCierreVolumen = false;
                            ordenCierres = response.Response;
                        }
                    }
                }
                else
                {
                    await Swal.FireAsync("Alerta", "Introduzca un valor valido para el folio.", SweetAlertIcon.Warning);
                    return;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    public async Task GetFolio()
    {
        try
        {
            var response = await http.Get<Cliente>($"api/clientes/{ordenCierre.CodCte}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (string.IsNullOrEmpty(ordenCierre.Folio))
                {
                    Cliente = response.Response;
                    Cliente.Consecutivo = Cliente.Consecutivo != null ? Cliente.Consecutivo + 1 : 1;

                    ordenCierre.Folio = Cliente.CodCte != null ? User.Identity?.Name?.Substring(0, 3) + Convert.ToString(Cliente.Consecutivo) : string.Empty;
                }

                await PutClientes();
                await CreateCierre();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PutClientes()
    {
        try
        {
            var response = await http.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeProducto()
    {
        try
        {
            if (ordenCierre.CodPrd != null && CodProductoSeleccionado != ordenCierre.CodPrd)
            {
                ordenCierre.Precio = Productos.FirstOrDefault(x => x.Producto?.Cod == ordenCierre.CodPrd)?.Pre;
                CodProductoSeleccionado = ordenCierre.CodPrd;
                //StateHasChanged();
            }
            //CodProductoSeleccionado = ordenCierre.CodPrd;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetPrecios()
    {
        try
        {

            ZonaCliente zonaCliente = new ZonaCliente();
            zonaCliente.DesCod = ordenCierre.CodDes;
            zonaCliente.CteCod = ordenCierre.CodCte;

            var response = await http.Post<ZonaCliente, List<Precio>>($"api/precio/productos", zonaCliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
                DestinoSeleccionado = ordenCierre.CodDes;
                StateHasChanged();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CreateCierre()
    {
        try
        {
            var responseBIN = await http.Get<int>("api/pedido/binNumber");
            if (responseBIN.Error)
            {
                var message = await responseBIN.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                var bin = responseBIN.Response;
                OrdenEmbarque ordenEmbarque = new OrdenEmbarque()
                    {
                        Codest = 9,
                        Codtad = ordenCierre.CodTad,
                        Codprd = ordenCierre.CodPrd,
                        Pre = ordenCierre.Precio,
                        Vol = ordenCierre.Volumen,
                        Coddes = ordenCierre.CodDes,
                        Fchpet = DateTime.Now,
                        Fchcar = ordenCierre.FchCar,
                        Bin = ordenCierres.Count == 0 ? ++bin : ordenCierres.Count % 2 != 0 ? ++bin : bin
                    };

                var response = await http.Post<OrdenEmbarque, OrdenEmbarque>($"api/pedido/cierre/{filtro.Folio}", ordenEmbarque);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    ordenCierre.CodPed = response.Response.Cod;
                    var responseOC = await http.Post<OrdenCierre, OrdenCierre>("api/cierre", ordenCierre);
                    if (responseOC.Error)
                    {
                        var message = await responseOC.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        var orden = responseOC.Response;
                        orden.OrdenEmbarque = response.Response;

                        OrdenPedido ordenPedido = new OrdenPedido();
                        ordenPedido.CodPed = ordenCierre.CodPed;
                        ordenPedido.Folio = filtro.Folio;

                        var responseOP = await http.Post<OrdenPedido>($"api/pedido/orden/add", ordenPedido);
                        if (responseOP.Error)
                        {
                            var message = await responseOC.ObtenerMensajeError();
                            await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        }
                        else
                        {
                            ordenCierres.Add(responseOC.Response);
                            await gridOC.Reload();
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void CancelEdit()
    {
        try
        {
            ordenCierre = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() };
            isEditing = false;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
