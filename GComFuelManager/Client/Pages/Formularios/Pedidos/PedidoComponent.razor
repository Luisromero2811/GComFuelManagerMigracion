@page "/"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js

<NavigationLock OnBeforeInternalNavigation="OnPreventInternalNavigation"></NavigationLock>
<h4><b>Pedidos</b></h4>
@if (isEditing)
{
    <EditPedidoForm Terminales="Terminales" Productos="Productos" Cantidades="Cantidades" ordenEmbarque="ordenEmbarque" CancelPedido="changeEdit"
        Estacion="Destino"/>
}
else
{
    <CrearPedidoForm http="http" Swal="Swal" ordenEmbarque="ordenEmbarque" ConfirmPedido="ConfirmPedido" SavePedido="SavePedido"
                 Terminales="Terminales" Grupos="Grupos" Productos="Productos" Cantidades="Cantidades" />
}

<div class="col-12 mt-5">
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>#</th>
                <th>Binomio</th>
                <th>Estacion</th>
                <th>Terminal</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Fecha de carga</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (ordens is null)
            {
                <SpinnerLoading />
            }
            else if (ordens.Count == 0)
            {
                <tr>
                    <td colspan="10">
                        <NoHayRegistros />
                    </td>
                </tr>
            }
            else
            {
                @for (int i = 0; i < ordens.Count; i++)
                {
                    <tr>
                        <td>
                            <div>
                                <button class="btn btn-primary" @onclick="@(()=>SetEdit(ordens[i - 1]))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                            </div>
                        </td>
                        <td>@(i + 1)</td>
                        <td>BIN_@ordens[i].Bin</td>
                        <td>@ordens[i]?.Destino?.Den</td>
                        <td>@ordens[i]?.Tad?.Den</td>
                        <td>@ordens[i]?.Producto?.Den</td>
                        <td>@ordens[i]?.Vol</td>
                        <td>@ordens[i].Pre</td>
                        <td>@ordens[i].Fchcar?.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div>
                                <button class="btn btn-danger"><i class="fa fa-solid fa-ban"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    //listas
    private List<CodDenDTO> Terminales { get; set; } = null!;
    private List<CodDenDTO> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<CodDenDTO> Productos { get; set; } = null!;
    private IEnumerable<CodDenDTO> Destino { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;

    private DateTime FechaCarga = DateTime.MinValue;
    private float Precio = 0;

    //loadings
    bool loadingAgregar = false;
    bool loadingConfirm = false;

    //editmodel
    private EditContext OrdenContext = null!;
    private bool isEditing = false;

    //ordenesPendientes
    private List<int> ordenPendientes = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        OrdenContext = new(ordenEmbarque);
        await GetTerminales();
        await GetGrupos();
        await GetCantidades();
        await GetProductos();
        await GetOrdenesPendientes();
        await GetEstaciones();
    }

    private void changeEdit()
    {
        isEditing = !isEditing;
    }

    public async Task GetEstaciones()
    {
        try
        {
            var response = await http.Get<IEnumerable<CodDenDTO>>("api/destino");
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
            else
            {
                Destino = response.Response;
            }
        }
        catch (Exception e)
        {
            Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetOrdenesPendientes()
    {
        try
        {
            List<int> ordenesPendientes = new List<int>();

            try
            {
                if (await js.GetItemLocalStorage("PEDIDO") != null)
                {
                    ordenesPendientes = JsonConvert.DeserializeObject<List<int>>(await js.GetItemLocalStorage("PEDIDO"));
                }
            }
            catch (Exception e)
            {
                await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            }

            var response = await http.Post<List<int>, List<OrdenEmbarque>>("api/pedido/list", ordenesPendientes);

            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                ordens = response.Response;
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task OnPreventInternalNavigation(LocationChangingContext context)
    {
        if (ordens.Count == 0)
        {
            return;
        }

        var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "Tiene ordenes pendientes por confirma, si sale no podra volver a ver esas ordenes. ¿ Seguro que quiere salir? "
            });

        if (!string.IsNullOrEmpty(confirm.Value))
        {
            await js.SetItemLocalStorage("PEDIDO", JsonConvert.SerializeObject(ordenPendientes));
            return;
        }

        context.PreventNavigation();
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SavePedido()
    {
        loadingAgregar = true;
        try
        {
            if (ordens.Count < 8)
            {
                if (ordenEmbarque.Codtad != 0 && ordenEmbarque.Codprd != 0 && ordenEmbarque.Coddes != 0 && ordenEmbarque.Vol != 0)
                {
                    ordenEmbarque.Codest = 9;
                    ordenEmbarque.Fchpet = DateTime.Now;
                    var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                    if (response.Error)
                    {
                        loadingAgregar = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingAgregar = false;
                        if (response.Response is not null)
                        {
                            ordens.Add(response.Response);
                            ordenPendientes.Add(response.Response.Cod);
                        }
                    }
                }
                else
                {
                    await Swal.FireAsync("Advertencia", "Revise que no falte ningun campo en el formulario por llenar.", SweetAlertIcon.Warning);
                    loadingAgregar = false;
                }
            }
            else
            {
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "El limite de pedidos ha sido alcanzado", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            if (ordens.Count < 8)
            {
                var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
                if (response.Error)
                {
                    loadingConfirm = false;
                    string? message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingConfirm = false;
                    await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                    ordens = new List<OrdenEmbarque>();
                }
            }
            else
            {
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "El limite de pedidos ha sido alcanzado", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void SetEdit(OrdenEmbarque orden)
    {
        isEditing = true;
        ordenEmbarque = orden;
    }
}
