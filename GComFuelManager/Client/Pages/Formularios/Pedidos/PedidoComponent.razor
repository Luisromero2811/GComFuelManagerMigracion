@page "/"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject IJSRuntime js

<NavigationLock OnBeforeInternalNavigation="OnPreventInternalNavigation"></NavigationLock>
<h4><b>Pedidos</b></h4>
<div class="col-12 card shadow">
    <div class="card-body">
        <EditForm Model="@ordenEmbarque" class="form col-12">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row col-12 g-3 mb-3 px-4">
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Terminal</label>
                        <InputSelect @bind-Value="ordenEmbarque.Codtad" class="form-select">
                            <option>-- Selecciona una opcion --</option>
                            @if (Terminales is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Terminales.Count == 0)
                            {
                                <option disabled> No hay terminales</option>
                            }
                            else
                            {
                                foreach (var item in Terminales)
                                {
                                    <option value="@item.Cod">@item.Den</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Grupo</label>
                        <InputSelect @bind-Value="GrupoSeleccionado" class="form-select" onchange="@GetClientes()">
                            <option>-- Selecciona una opcion --</option>
                            @if (Grupos is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Grupos.Count == 0)
                            {
                                <option disabled> No hay grupos</option>
                            }
                            else
                            {
                                foreach (var item in Grupos)
                                {
                                    <option value="@item.Cod">@item.Den</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Cliente</label>
                        <InputSelect @bind-Value="ClienteSeleccionado" class="form-select" onchange="@GetEstaciones()">
                            <option>-- Selecciona una opcion --</option>
                            @if (Clientes is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Clientes.Count == 0)
                            {
                                <option disabled> No hay clientes</option>
                            }
                            else
                            {
                                foreach (var item in Clientes)
                                {
                                    <option value="@item.Cod">@item.Den</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Estacion</label>
                        <InputSelect @bind-Value="ordenEmbarque.Coddes" class="form-select">
                            <option>-- Selecciona una opcion --</option>
                            @if (Estaciones is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Estaciones.Count == 0)
                            {
                                <option disabled> No hay estaciones</option>
                            }
                            else
                            {
                                foreach (var item in Estaciones)
                                {
                                    <option value="@item.Cod">@item.Den</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Producto</label>
                        <InputSelect @bind-Value="ordenEmbarque.Codprd" class="form-select">
                            <option>-- Selecciona una opcion --</option>
                            @if (Productos is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Productos.Count == 0)
                            {
                                <option disabled> No hay productos</option>
                            }
                            else
                            {
                                foreach (var item in Productos)
                                {
                                    <option value="@item.Cod">@item.Den</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="col-4 mb-1">
                    <div class="col-12">
                        <label>Cantidad</label>
                        <InputSelect @bind-Value="ordenEmbarque.Vol" class="form-select">
                            <option>-- Selecciona una opcion --</option>
                            @if (Cantidades is null)
                            {
                                <option disabled> Cargando ...</option>
                            }
                            else if (Cantidades.Count == 0)
                            {
                                <option disabled> No hay capacidades</option>
                            }
                            else
                            {
                                foreach (var item in Cantidades)
                                {
                                    <option value="@item">@item</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="col-3 mb-1">
                    <div class="col-12">
                        <label>Fecha de carga en terminal</label>
                        <InputDate class="col-3 form-control" TValue="DateTime?" @bind-Value="@ordenEmbarque.Fchcar"></InputDate>
                    </div>
                </div>
                <div class="col-3 mb-1">
                    <div class="col-12">
                        <label>Precio</label>
                        <InputNumber class="form-control col-12" TValue="double?" @bind-Value="@ordenEmbarque.Pre"></InputNumber>
                    </div>
                </div>
                <div class="col-3 mb-1">
                    <div class="col-12">
                        <label>Temperatura</label>
                        <input class="form-control col-12 disabled" disabled />
                    </div>
                </div>
                <div class="col-3 mb-1">
                    <div class="col-12">
                        <label>Condiciones de pago</label>
                        <input class="form-control col-12 disabled" disabled />
                    </div>
                </div>
            </div>
            <div class="col-12 d-flex justify-content-center mt-2">
                <div class="col-6 row">
                    <div class="col-6">
                        <button class="btn gcom-bg-amarillo col-12" @onclick="@SavePedido">
                            <b>Agregar</b>
                            @if (loadingAgregar)
                            {
                                <SpinnerLoading></SpinnerLoading>
                            }
                        </button>
                    </div>
                    <div class="col-6">
                        <button class="btn gcom-bg-amarillo col-12" @onclick="@ConfirmPedido">
                            <b>Confirmar Pedido</b>
                            @if (loadingConfirm)
                            {
                                <SpinnerLoading></SpinnerLoading>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div class="col-12 mt-5">
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>#</th>
                <th>Binomio</th>
                <th>Estacion</th>
                <th>Terminal</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Fecha de carga</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (ordens is null)
            {
                <SpinnerLoading />
            }
            else if (ordens.Count == 0)
            {
                <tr>
                    <td colspan="8">
                        <NoHayRegistros />
                    </td>
                </tr>
            }
            else
            {
                @for (int i = 0; i < ordens.Count; i++)
                {
                    <tr>
                        <td>
                            <div>
                                <button class="btn btn-info"><i class="fa fa-solid fa-pen-to-square"></i></button>
                            </div>
                        </td>
                        <td>@(i + 1)</td>
                        <td>BIN_@ordens[i].Bin</td>
                        <td>@ordens[i]?.Destino?.Den</td>
                        <td>@ordens[i]?.Tad?.Den</td>
                        <td>@ordens[i]?.Producto?.Den</td>
                        <td>@ordens[i]?.Vol</td>
                        <td>@ordens[i].Pre</td>
                        <td>@ordens[i].Fchcar?.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div>
                                <button class="btn btn-danger"><i class="fa fa-solid fa-ban"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    //listas
    private List<CodDenDTO> Terminales { get; set; } = null!;
    private List<CodDenDTO> Grupos { get; set; } = null!;
    private List<CodDenDTO> Clientes { get; set; } = null!;
    private List<CodDenDTO> Estaciones { get; set; } = null!;
    private List<CodDenDTO> Productos { get; set; } = null!;
    private List<int> Cantidades { get; set; } = null!;

    //selecciones
    private int TerminalSeleccionada;
    private int GrupoSeleccionado;
    private int GrupoSeleccionadoB;

    private int ClienteSeleccionado;
    private int ClienteSeleccionadoB;

    private int EstacionSeleccionada;
    private int ProductoSeleccionado;
    private int CapacidadSeleccionada;

    private DateTime FechaCarga = DateTime.MinValue;
    private float Precio = 0;

    //loadings
    bool loadingAgregar = false;
    bool loadingConfirm = false;

    //editmodel
    private EditContext OrdenContext = null!;

    protected override async Task OnInitializedAsync()
    {
        OrdenContext = new(ordenEmbarque);
        await GetTerminales();
        await GetGrupos();
        await GetCantidades();
        await GetProductos();
    }

    private async Task OnPreventInternalNavigation(LocationChangingContext context)
    {
        if (ordens.Count == 0)
        {
            return;
        }

        var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar",
                Text = "Tiene ordenes pendientes por confirma, si sale no podra volver a ver esas ordenes. ¿ Seguro que quiere salir? "
            });

        if (!string.IsNullOrEmpty(confirm.Value))
        {
            List<int> ordenesTemp = new List<int>();
            ordens.ForEach(x => ordenesTemp.Add(x.Cod));
            await js.SetItemLocalStorage("PEDIDO", JsonConvert.SerializeObject(ordenesTemp));
            return;
        }

        context.PreventNavigation();
    }

    public async Task GetTerminales()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/terminal");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Terminales = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetEstaciones()
    {
        try
        {
            if (ClienteSeleccionado != 0 && ClienteSeleccionado != ClienteSeleccionadoB)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/estacion/{ClienteSeleccionado}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    Estaciones = response.Response;
                    StateHasChanged();
                    ClienteSeleccionadoB = ClienteSeleccionado;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (GrupoSeleccionado != 0 && GrupoSeleccionado != GrupoSeleccionadoB)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{GrupoSeleccionado}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionadoB = GrupoSeleccionado;
                    Console.WriteLine(GrupoSeleccionado);
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetCantidades()
    {
        try
        {
            var response = await http.Get<List<int>>("api/cantidad");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Cantidades = response.Response;
                Cantidades.OrderBy(x => x);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<CodDenDTO>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Productos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SavePedido()
    {
        loadingAgregar = true;
        try
        {
            if (ordens.Count < 6)
            {
                if (ordenEmbarque.Codtad != 0 && ordenEmbarque.Codprd != 0 && ordenEmbarque.Coddes != 0 && ordenEmbarque.Vol != 0)
                {
                    ordenEmbarque.Codest = 9;
                    ordenEmbarque.Fchpet = DateTime.Now;
                    var response = await http.Post<OrdenEmbarque, OrdenEmbarque>("api/pedido", ordenEmbarque);
                    if (response.Error)
                    {
                        loadingAgregar = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                    }
                    else
                    {
                        loadingAgregar = false;
                        if (response.Response is not null)
                            ordens.Add(response.Response);
                    }
                }
                else
                {
                    await Swal.FireAsync("Advertencia", "Revise que no falte ningun campo en el formulario por llenar.", SweetAlertIcon.Warning);
                    loadingAgregar = false;
                }
            }
            else
            {
                loadingAgregar = false;
                await Swal.FireAsync("Advertencia", "El limite de pedidos ha sido alcanzado", SweetAlertIcon.Warning);
            }
        }
        catch (Exception e)
        {
            loadingAgregar = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ConfirmPedido()
    {
        loadingConfirm = true;
        try
        {
            var response = await http.Post<List<OrdenEmbarque>, OrdenCompra>("api/pedido/confirm", ordens);
            if (response.Error)
            {
                loadingConfirm = false;
                string? message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingConfirm = false;
                await Swal.FireAsync("Folio", response.Response.den, SweetAlertIcon.Info);
                ordens = new List<OrdenEmbarque>();
            }
        }
        catch (Exception e)
        {
            loadingConfirm = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
