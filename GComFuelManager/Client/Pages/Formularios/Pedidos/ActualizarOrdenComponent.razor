@page "/actualizar/pedidos"
@inject IRepositorio http
@inject SweetAlertService Swal
@inject TooltipService ts
@inject IJSRuntime js
@inject AuthenticationStateProvider auth
@inject DialogService ds

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador")]

<AuthorizeView Roles="Admin, Administrador Sistema, Direccion, Gerencia, Ejecutivo de Cuenta Operativo, Programador">
    <div class="col-12 d-flex">
        <div class="col-3">
            <InputText class="form-control" @bind-Value="@folio"/>
        </div>
        <div class="col-12 mt-auto">
            <button class="col-12 btn gcom-bg-amarillo px-0">
                <i class="fa fa-solid fa-magnifying-glass"></i>
            </button>
        </div>
    </div>

    <div class="col-12 d-flex justify-content-center row">
        <RadzenDataGrid TItem="OrdenCierre" Data="@ordenCierres" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                        GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;" ColumnWidth="200px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Settings="@Settings"
                        IsLoading="loading" @ref="@gridOC" AllowSorting="true" AllowFiltering="true" Culture="CultureInfo.CurrentCulture" AllowColumnPicking="true">
            <Columns>
                @*<AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador, Comprador" Context="Acciones">
                <Authorized>*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Acciones" Filterable="false" Width="170px" OrderIndex="1">
                    <Template Context="item">
                        <AuthorizeView Roles="Admin, Administrador Sistema, Ejecutivo de Cuenta Operativo, Programador" Context="Acciones">
                            <Authorized>
                                <div class="col">
                                    <button class="btn btn-danger col-12"><i class="fa fa-solid fa-cancel"></i></button>
                                </div>
                            </Authorized>
                        </AuthorizeView>
                    </Template>
                </RadzenDataGridColumn>
                @*</Authorized>
                </AuthorizeView>*@
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Folio" Property="Folio" Width="110px" Filterable="false" OrderIndex="2" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Bin" Property="OrdenEmbarque.Bin" Width="100px" OrderIndex="3" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Terminal" Property="OrdenEmbarque.Tad.Den" Width="140px" OrderIndex="4" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Destino" Property="Destino.Den" Width="300px" OrderIndex="5" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Producto" Property="Producto.Den" Width="280px" OrderIndex="6" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Volumen" Width="130px" FormatString="{0:N2}" Filterable="false" OrderIndex="7">

                    <Template Context="item">
                        <div class="col-12">
                            @string.Format(new System.Globalization.CultureInfo("en-US"), "{0:N2}",
                            item?.OrdenEmbarque?.Orden is not null ? item?.OrdenEmbarque?.Orden?.Vol :
                            item?.OrdenEmbarque?.Compartment == 1 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom
                            : item?.OrdenEmbarque?.Compartment == 2 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom2
                            : item?.OrdenEmbarque?.Compartment == 3 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom3
                            : item?.OrdenEmbarque?.Compartment == 4 && item.OrdenEmbarque?.Tonel is not null ? item?.OrdenEmbarque?.Tonel?.Capcom4
                            : item?.Volumen
                            )
                        </div>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Precio" Width="140px" Property="OrdenEmbarque.Pre" OrderIndex="8" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Fecha de carga" Property="OrdenEmbarque.Fchcar" FormatString="{0:d}" Width="180px" OrderIndex="9" Filterable="false" />
                <RadzenDataGridColumn TItem="OrdenCierre" Title="Estado" Width="130px" Filterable="false" OrderIndex="10">
                    <Template Context="item">
                        <div class="col-12">
                            @(item?.OrdenEmbarque?.Estado != null ? item.OrdenEmbarque.Estado.den :
                                item?.OrdenEmbarque?.Orden != null ? item?.OrdenEmbarque?.Orden?.Estado?.den : "Sin estado")
                        </div>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</AuthorizeView>
<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {

    //grid
    private RadzenDataGrid<OrdenCierre> gridOC = new RadzenDataGrid<OrdenCierre>();

    private OrdenEmbarque ordenEmbarque { get; set; } = new OrdenEmbarque();
    private List<OrdenEmbarque> ordens { get; set; } = new List<OrdenEmbarque>();

    private List<OrdenCierre> ordenCierres { get; set; } = new List<OrdenCierre>();
    private OrdenCierre ordenCierre { get; set; } = new OrdenCierre() { OrdenEmbarque = new OrdenEmbarque() { Producto = new Producto() } };

    private float Precio = 0;

    private string folio { get; set; } = string.Empty;

    bool loading = false;

    private Cliente Cliente { get; set; } = new Cliente();
    private List<CodDenDTO> ClientesFiltro { get; set; } = null!;

    private ClaimsPrincipal User { get; set; } = null!;
    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;

    int count = 0;

    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    CierreFiltroDTO fechas { get; set; } = new CierreFiltroDTO();

    protected override async Task OnInitializedAsync()
    {
        var cm = await js.GetItemLocalStorage("CloseMenu");
        if (!string.IsNullOrEmpty(cm))
            isClose = bool.Parse(cm);

        if (isClose)
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 110;
        else
            width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;

        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";
        var authState = await auth.GetAuthenticationStateAsync();
        if (authState is not null)
            User = authState.User;
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    

    private async Task PutClientes()
    {
        try
        {
            var response = await http.Put<Cliente>("api/clientes", Cliente);
            if (response.Error)
            {
                var responseHttp = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingPedido", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingsPedido");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task OpenModal()
    {
        try
        {
            await ds.OpenAsync<ViewFoliosPedidosComponent>("Folios de pedidos", options: new DialogOptions()
                {
                    Width = "90%",
                    Height = "600px",
                    Resizable = true,
                    Draggable = false
                });
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task BuscarOrdenes()
    {
        try
        {

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }
}
