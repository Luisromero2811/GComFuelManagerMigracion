@page "/precios"
@inject IJSRuntime js
@inject IRepositorio http
@inject SweetAlertService Swal
@inject DialogService ds
@inject NotificationService ns
@inject PreciosValidation validation
@inject TooltipService ts 

@attribute [Authorize(Roles = "Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Envio Precios, Revision Precios")]

<AuthorizeView Roles="Admin, Administrador Sistema, Precios">
    <Authorized>
        <h3>Precios</h3>

        <div class="d-flex justify-content-center col-12 shadow-sm mt-3">
            <div class="col-12 card">
                <div class="col-12 row card-body">

                    <div class="col-12 row  mb-3">
                        <div class="col-6">
                            <div class="form-label">
                                <label class="form-label">Importar:</label>
                            </div>
                            @if (radzenUpload.HasValue)
                            {
                                <p>Progreso: @Progress %</p>
                            }
                            <RadzenUpload class="col-12" @ref="radzenUpload" Auto="false" Multiple="false" Url="api/precio/upload" Complete="@CompleteUpload"
                                          Accept=".xlsx,.xls" Change="@OnChangeFile" Progress="@OnProgress" ChooseText="Elegir" Error="@HandlerErrorUpload">
                                <RadzenUploadHeader Name="Authorization" Value="@Token" />
                            </RadzenUpload>
                        </div>
                        <div class="col-2 d-flex">
                            <button class="btn gcom-bg-amarillo mt-auto col-12" @onclick="@UploadFile">
                                <i class="fa-solid fa-upload"></i>
                                subir
                            </button>

                        </div>
                        <div class="col-12 mt-3">
                            @if (preciosExcel.Count() > 0)
                            {

                                <RadzenPanel AllowCollapse="true" Collapsed="true">
                                    <HeaderTemplate>
                                        Vista previa de precios
                                    </HeaderTemplate>
                                    <ChildContent>
                                        <RadzenDataGrid TItem="PreciosDTO" Data="@preciosExcel" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                                                        GridLines="DataGridGridLines.Both" class="rz-my-12" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        IsLoading="loading" @ref="@gridExcel" AllowSorting="true" AllowFiltering="true" FilterMode="FilterMode.Simple">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Codigo Synthesis" Property="CodSyn" Filterable="false" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Codigo Tuxpan" Property="CodTux" Filterable="false" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Destino" Property="Destino" Filterable="true" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Cliente" Property="Cliente" Filterable="true" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Fecha" Filterable="false" Property="Fecha" FormatString="{0:d}" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Precio" Property="Precio" Filterable="true" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Producto" Filterable="true" Property="Producto" />
                                                @*<FilterTemplate Context="filter">
                                                    <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true" AllowFiltering="true">
                                                    <InputText class="form-control col-12" @bind-Value="ProductoSeleccionado" MaxLength="180" />
                                                    </RadzenDropDown>
                                                    </FilterTemplate>
                                                    <Template Context="data">
                                                    <div class="col-12 d-flex">
                                                    <div class="col-11">
                                                    @data.Producto
                                                    </div>
                                                    </div>
                                                    </Template>
                                                    </RadzenDataGridColumn>*@
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Zona" Property="Zona" Filterable="false" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </ChildContent>
                                </RadzenPanel>
                                <div class="col-12 d-flex justify-content-center mt-3">
                                    <div class="col-4">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@SendPrecios" disabled="@loadingSend">
                                            <i class="fa fa-solid fa-floppy-disk"></i>
                                            Guardar
                                            @if (loadingSend)
                                            {
                                                <SpinnerLoading />
                                            }
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <hr />
                    <div class="col-12">
                        <EditForm Model="Precio" class="form col-12 row" Context="FORM" OnValidSubmit="@SavePrecio">
                            @*<DataAnnotationsValidator />*@
                            <FluentValidationValidator Validator="validation" />
                            <ValidationSummary />
                            <div class="col-4 mb-2">
                                <label class="form-label">Zona</label>
                                <InputSelect @bind-Value="Precio.codZona" class="form-select col-12">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Zonas == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Zonas.Count == 0)
                                    {
                                        <option>No hay zonas.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Zonas)
                                        {
                                            <option value="@item.Cod">@item.Nombre</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Grupo</label>
                                <InputSelect @bind-Value="Precio.codGru" class="form-select col-12" onchange="@GetClientes()">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Grupos == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Grupos.Count == 0)
                                    {
                                        <option>No hay clientes.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Grupos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Cliente</label>
                                <InputSelect @bind-Value="Precio.codCte" class="form-select col-12" onchange="@GetEstaciones()">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Clientes == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Clientes.Count == 0)
                                    {
                                        <option>No hay clientes.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Clientes)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Destino</label>
                                    <InputSelect @bind-Value="Precio.codDes" class="form-select col-12">
                                        <option>-- Seleccione una opcion</option>
                                        @if (Destinos == null)
                                        {
                                            <option>Cargando...</option>
                                        }
                                        else if (Destinos.Count == 0)
                                        {
                                            <option>No hay productos.</option>
                                        }
                                        else
                                        {
                                            @foreach (var item in Destinos)
                                            {
                                                <option value="@item.Cod">@item.Den</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Producto</label>
                                <InputSelect @bind-Value="Precio.codPrd" class="form-select col-12">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Productos == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Productos.Count == 0)
                                    {
                                        <option>No hay productos.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Productos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Fecha</label>
                                <InputDate @bind-Value="Precio.FchDia" class="form-control col-12" />
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Precio</label>
                                <InputNumber TValue="double" @bind-Value="Precio.Pre" class="form-control col-12" MaxLenght="10" />
                            </div>
                            <div class="col-12 d-flex ms-2 mt-2 justify-content-center row">
                                <div class="col-4">
                                    <button class="btn col-12 gcom-bg-amarillo" type="submit">
                                        <i class="fa fa-solid fa-floppy-disk"></i>
                                        Guardar
                                        @if (loadingSave)
                                        {
                                            <SpinnerLoading />
                                        }
                                    </button>
                                </div>
                                <AuthorizeView Roles="Envio Precios, Admin, Administrador Sistema" Context="SendPrecios">
                                    <Authorized>
                                        <div class="col-4"  @onmouseenter="@(args => ShowToolTip(infoIcon))" @ref="infoIcon">
                                            <button class="btn col-12 gcom-bg-amarillo" type="button" @onclick="@SendEmailPrecios">
                                                <i class="fa fa-solid fa-paper-plane"></i>
                                                Enviar precios por cliente
                                                @if (loadingSend)
                                                {
                                                    <SpinnerLoading />
                                                }
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                                <AuthorizeView Roles="Admin, Administrador Sistema" Context="SendPrecioGrupal">
                                    <Authorized>
                                        <div class="col-4"  @onmouseenter="@(args => ShowGroupTip(infosIcon))" @ref="infosIcon">
                                            <button class="btn col-12 gcom-bg-amarillo" type="button" @onclick="@SendEmailGroupPrecio">
                                                <i class="fa fa-solid fa-paper-plane"></i>
                                                Enviar precios grupal
                                                @if (loadingSend)
                                                {
                                                    <SpinnerLoading />
                                                }
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Precios, Direccion, Gerencia, Analista Credito, Contador, Revision Precios" Context="Grid">
    <Authorized>
        <RadzenTabs RenderMode="TabRenderMode.Client" TabPosition="TabPosition" Change="@OnChangeIndex">
            <Tabs>
                <RadzenTabsItem Text="Precios Vigentes">
                    <div class="col-12">
                        <table class="table table-hover table-bordered table-sm table-responsive" style="max-height:600px;overflow:auto;width:100%">
                            <thead>
                                <tr>

                                    <th scope="col" width="100px">
                                        <AuthorizeView Roles="Admin, Administrador Sistema, Precios">
                                            <Authorized>
                                                Editar
                                            </Authorized>
                                        </AuthorizeView>
                                    </th>

                                    <th scope="col">Fecha</th>
                                    <th scope="col">Precio</th>
                                    <th scope="col">Producto</th>
                                    <th scope="col">Destino</th>
                                    <th scope="col" width="150px">Zona</th>
                                    <th scope="col">Cliente</th>

                                    <th scope="col">
                                        <AuthorizeView Roles="Admin, Administrador Sistema, Precios">
                                            <Authorized>
                                                Habilitar / deshabilitar
                                            </Authorized>
                                        </AuthorizeView>
                                    </th>

                                </tr>
                            </thead>
                            <tbody>
                                <tr style="height:50px;">
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.producto" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.destino" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.zona" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadData" @bind-Value="@busquedaPrecios.cliente" />
                                    </td>
                                    <td></td>
                                </tr>
                                @if (precios is null)
                                {
                                    <tr>
                                        <td colspan="8">
                                            <p>No hay precios</p>
                                        </td>
                                    </tr>
                                }
                                else if (precios?.Count > 0)
                                {
                                    @foreach (var item in precios)
                                    {
                                        <tr style="height:50px">

                                            <td width="100px">
                                                <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="Acciones">
                                                    <div class="col-12">
                                                        <div class="col p-2">
                                                            <button class="btn btn-primary col-12" @onclick="@(()=>setEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                                        </div>
                                                    </div>
                                                </AuthorizeView>
                                            </td>

                                            <td>
                                                <RadzenText Text="@item.FchDia.ToString("dd/MM/yyyy")" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item.Pre.ToString()" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Producto?.Den" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Destino?.Den" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Zona?.Nombre" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Cliente?.Den" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="EditPrice">
                                                    <div class="col-12">
                                                        <div class="form-check form-switch m-2">
                                                            <input class="form-check-input" type="checkbox" role="switch" id="@item?.Cod" checked="@item?.Activo"
                                                                   @onchange="@((ChangeEventArgs e) => ChangeStatus(item, e))">
                                                        </div>
                                                    </div>
                                                </AuthorizeView>
                                            </td>

                                        </tr>
                                    }

                                }
                                else if (precios?.Count == 0)
                                {
                                    <tr>
                                        <td colspan="8">
                                            <p>No hay precios</p>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="8">
                                        <div class="col-12 row">
                                            <div class="text-muted col-2">
                                                <p>total de registros: @ConteoTotal</p>
                                            </div>
                                            <div class="col-6 offset-4">
                                                <PaginacionComponent PaginaActual="PaginaActual" PaginaSeleccionada="PaginasSeleccionadas" PaginasTotales="PaginasTotales" />
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Precios Programados">
                    <div class="col-12">
                        <table class="table table-hover table-bordered table-sm table-responsive" style="max-height:600px;overflow:auto;width:100%">
                            <thead>
                                <tr>
                                    <th scope="col" width="100px">
                                        <AuthorizeView Roles="Admin, Administrador Sistema, Precios, Ejecutivo de Cuenta Comercial">
                                            <Authorized>
                                                Editar
                                            </Authorized>
                                        </AuthorizeView>
                                    </th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col">Precio</th>
                                    <th scope="col">Producto</th>
                                    <th scope="col">Destino</th>
                                    <th scope="col" width="150px">Zona</th>
                                    <th scope="col">Cliente</th>
                                    <th scope="col">
                                        <AuthorizeView Roles="Admin, Administrador Sistema, Precios, Ejecutivo de Cuenta Comercial">
                                            <Authorized>
                                                Habilitar / deshabilitar
                                            </Authorized>
                                        </AuthorizeView>
                                    </th>

                                </tr>
                            </thead>
                            <tbody>
                                <tr style="height:50px;">
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <RadzenTextBox Change="@LoadDataProgramados" @bind-Value="@busquedaPreciosPro.producto" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadDataProgramados" @bind-Value="@busquedaPreciosPro.destino" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadDataProgramados" @bind-Value="@busquedaPreciosPro.zona" />
                                    </td>
                                    <td>
                                        <RadzenTextBox Change="@LoadDataProgramados" @bind-Value="@busquedaPreciosPro.cliente" />
                                    </td>
                                    <td></td>
                                </tr>
                                @if (preciosPro is null)
                                {
                                    <tr>
                                        <td colspan="8">
                                            <p>No hay precios</p>
                                        </td>
                                    </tr>
                                }
                                else if (preciosPro?.Count > 0)
                                {
                                    @foreach (var item in preciosPro)
                                    {
                                        <tr style="height:50px">

                                            <td width="100px">
                                                <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="Acciones">
                                                    <div class="col-12">
                                                        <div class="col p-2">
                                                            <button class="btn btn-primary col-12" @onclick="@(()=>setEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                                        </div>
                                                    </div>
                                                </AuthorizeView>
                                            </td>

                                            <td>
                                                <RadzenText Text="@item.FchDia.ToString("dd/MM/yyyy")" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item.Pre.ToString()" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Producto?.Den" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Destino?.Den" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Zona?.Nombre" TextStyle="TextStyle.Body2" />
                                            </td>
                                            <td>
                                                <RadzenText Text="@item?.Cliente?.Den" TextStyle="TextStyle.Body2" />
                                            </td>


                                            <td>
                                                <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="EditPrice">
                                                    <div class="col-12">
                                                        <div class="form-check form-switch m-2">
                                                            <input class="form-check-input" type="checkbox" role="switch" id="@item?.Cod" checked="@item?.Activo"
                                                                   @onchange="@((ChangeEventArgs e) => ChangeStatus(item, e))">
                                                        </div>
                                                    </div>
                                                </AuthorizeView>
                                            </td>

                                        </tr>
                                    }

                                }
                                else if (preciosPro?.Count == 0)
                                {
                                    <tr>
                                        <td colspan="8">
                                            <p>No hay precios</p>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="8">
                                        <div class="col-12 row">
                                            <div class="text-muted col-2">
                                                <p>total de registros: @ConteoTotalPro</p>
                                            </div>
                                            <div class="col-6 offset-4">
                                                <PaginacionComponent PaginaActual="PaginaActualPro" PaginaSeleccionada="PaginasSeleccionadasPro" PaginasTotales="PaginasTotalesPro" />
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

    </Authorized>
</AuthorizeView>

@*<style type="text/css">
        .ancho {
            width: @TotalWidth;
        }
    </style>*@

@code {
    ElementReference infoIcon;
    ElementReference infosIcon;
    private string ProductoSeleccionado = string.Empty;
    private string CurrentCliente = string.Empty;
    RadzenAlert alert = new RadzenAlert();
    List<Precio> precios { get; set; } = new List<Precio>();
    List<Precio> preciosPro { get; set; } = new List<Precio>();
    IEnumerable<PreciosDTO> preciosExcel { get; set; } = new List<PreciosDTO>();

    Precio Precio { get; set; } = new Precio();

    RadzenUpload radzenUpload { get; set; } = new RadzenUpload();

    List<Producto> Productos { get; set; } = new List<Producto>();
    List<Zona> Zonas { get; set; } = new List<Zona>();
    List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    List<Grupo> Grupos { get; set; } = new List<Grupo>();
    List<CodDenDTO> Destinos { get; set; } = new List<CodDenDTO>();

    private string Token { get; set; } = string.Empty;

    private short? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;

    int SelectedTab = 0;
    TabPosition TabPosition = 0;
    private int Progress = 0;
    private int TotalEmails = 0;
    private int CurrentEmails = 0;

    bool loadingUpload = false;
    bool loading = false;
    bool loadingSave = false;
    bool loadingSend = false;

    private IEnumerable<string> ProductList { get; set; } = new List<string>();
    private IEnumerable<string?> ClientesSeleccionados { get; set; } = new List<string>();
    private IEnumerable<string?> GruposSeleccionados { get; set; } = new List<string>();

    RadzenDataGrid<Precio> grid { get; set; } = new RadzenDataGrid<Precio>();
    RadzenDataGrid<PreciosDTO> gridExcel { get; set; } = new RadzenDataGrid<PreciosDTO>();

    int width = 0;
    string TotalWidth = string.Empty;
    bool isClose = false;
    DataGridSettings _settings;
    DataGridSettings Settings { get { return _settings; } set { if (_settings != value) { _settings = value; InvokeAsync(SaveStateAsync); } } }

    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };

    ParametrosBusquedaPrecios busquedaPrecios = new ParametrosBusquedaPrecios();
    int PaginasTotales;
    int PaginaActual = 1;
    int ConteoTotal;

    ParametrosBusquedaPrecios busquedaPreciosPro = new ParametrosBusquedaPrecios();
    int PaginasTotalesPro;
    int PaginaActualPro = 1;
    int ConteoTotalPro;

    Dictionary<string, string> queryStringObject = new Dictionary<string, string>();
    Dictionary<string, string> queryStringObjectPro = new Dictionary<string, string>();
    Dictionary<string, string> queryStringObjectPre = new Dictionary<string, string>();

    void ShowToolTip(ElementReference elementReference, TooltipService option = null!) => ts.Open(elementReference, "Opcion para solo mandar correo a clientes de manera individual");
    void ShowGroupTip(ElementReference elementReference, TooltipService service = null!) => ts.Open(elementReference, "Opcion para mandar correos a clientes ligados a grupos empresariales. NOTA: Tener para cada cliente un correo asignado");

    protected override async Task OnInitializedAsync()
    {
        await GetProductos();
        await GetGrupos();
        await GetZonas();
        await LoadData();
        await LoadDataProgramados();

        Token = "Bearer " + await js.GetItemLocalStorage("TOKENKEY");
    }

    private async Task LoadData()
    {
        if (queryStringObject is null) { queryStringObject = new Dictionary<string, string>(); }
        queryStringObject["producto"] = busquedaPrecios.producto;
        queryStringObject["destino"] = busquedaPrecios.destino;
        queryStringObject["cliente"] = busquedaPrecios.cliente;
        queryStringObject["zona"] = busquedaPrecios.zona;
        queryStringObject["pagina"] = busquedaPrecios.pagina.ToString();
        queryStringObject["tamanopagina"] = busquedaPrecios.tamanopagina.ToString();

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObject.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await GetPreciosFiltro(uri);
    }

    private async Task LoadDataProgramados()
    {
        if (queryStringObjectPro is null) { queryStringObjectPro = new Dictionary<string, string>(); }
        queryStringObjectPro["producto"] = busquedaPreciosPro.producto;
        queryStringObjectPro["destino"] = busquedaPreciosPro.destino;
        queryStringObjectPro["cliente"] = busquedaPreciosPro.cliente;
        queryStringObjectPro["zona"] = busquedaPreciosPro.zona;
        queryStringObjectPro["pagina"] = busquedaPreciosPro.pagina.ToString();
        queryStringObjectPro["tamanopagina"] = busquedaPreciosPro.tamanopagina.ToString();

        var DefaultValues = new List<string>() { "false", "", "0" };
        var uri = string.Join("&", queryStringObjectPro.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
        .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

        await GetPreciosFiltroPro(uri);
    }

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private void OnProgress(UploadProgressArgs e)
    {
        try
        {
            //Console.WriteLine($"{e.Progress}% / {e.Loaded} of {e.Total}");
            Progress = e.Progress;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnChangeFile(UploadChangeEventArgs e)
    {
        try
        {
            foreach (var item in e.Files)
            {
                Console.WriteLine(JsonConvert.SerializeObject(item));
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnChangeFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (var item in e.GetMultipleFiles(1))
            {

            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task GenerateExcel()
    {

        ExcelPackage.LicenseContext = LicenseContext.Commercial;
        var excel = new ExcelPackage();

        var ws = excel.Workbook.Worksheets.Add("Precios");
        ws.Columns.Width = 50;
        ws.Columns.AutoFit();

        var header = ws.Cells["A1:P1"];

        var tablebody = ws.Cells["A1:A1"].LoadFromCollection<Precio>(precios, true);

        tablebody.Style.Font.Size = 14;
        header.Style.Font.Size = 14;

        header.Style.Fill.PatternType = ExcelFillStyle.Solid;
        header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
        header.Style.Font.Bold = true;

        await js.GuardarComo($"Precios.xlsx", excel.GetAsByteArray());

    }


    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Productos = response.Response;
                ProductList = response.Response.DistinctBy(x => x.Den).Select(x => x.Den)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetZonas()
    {
        try
        {
            var response = await http.Get<List<Zona>>("api/zona");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Zonas = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<Grupo>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (Precio.codGru != null && Precio.codGru != GrupoSeleccionado)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{Precio.codGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = Precio.codGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            if (Precio.codCte != null && ClienteSeleccionado != Precio.codCte)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/estacion/{Precio.codCte}");
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    Destinos = response.Response;
                    StateHasChanged();
                    ClienteSeleccionado = Precio.codCte;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void setEdit(Precio Item)
    {
        try
        {
            Precio = Item;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SavePrecio()
    {
        try
        {
            loadingSave = true;
            if (SelectedTab == 0)
            {
                var response = await http.Post<Precio>("api/precio", Precio);
                if (response.Error)
                {
                    loadingSave = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingSave = false;
                    await LoadData();
                }
            }
            else
            {
                var response = await http.Post<Precio>("api/precio/programado", Precio);
                if (response.Error)
                {
                    loadingSave = false;
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    loadingSave = false;
                    await LoadDataProgramados();
                }
            }
        }
        catch (Exception e)
        {
            loadingSave = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task UploadFile()
    {
        try
        {
            if (radzenUpload.HasValue)
            {
                await radzenUpload.Upload();
            }
            else
            {
                await Swal.FireAsync("Alerta", "Seleccione un archivo con formato excel para poder subirlo.", SweetAlertIcon.Warning);

            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CompleteUpload(UploadCompleteEventArgs args)
    {
        try
        {
            await Swal.FireAsync("Exito", "Se ha completado la accion.", SweetAlertIcon.Info);
            preciosExcel = JsonConvert.DeserializeObject<List<PreciosDTO>>(args.RawResponse)!;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task HandlerErrorUpload(Radzen.UploadErrorEventArgs ex)
    {
        try
        {
            await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
            Progress = 0;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SendPrecios()
    {
        try
        {
            if (preciosExcel is null)
            {
                await Swal.FireAsync("Alerta", "La lista no puede estar vacia", SweetAlertIcon.Warning);
                return;
            }

            if (preciosExcel.Count() == 0)
            {
                await Swal.FireAsync("Alerta", "La lista no puede estar vacia", SweetAlertIcon.Warning);
                return;
            }
            ns.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Subiendo precios", Detail = $"Los precios se estan subiendo, esto podria tardar unos minutos. Permanesca en esta pantalla hasta terminar el proceso.", Duration = 10000 });
            loadingSend = true;
            var response = await http.Post<IEnumerable<PreciosDTO>, List<PreciosDTO>>("api/precio/confirm/upload", preciosExcel);
            if (response.Error)
            {
                loadingSend = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSend = false;

                if (response.Response.Count > 0)
                {
                    ns.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Generando reporte",
                        Detail = $"Se encontraron destinos sin precios, se generara un reporte con los datos encontrados.",
                        Duration = 15000
                    });

                    ExcelPackage.LicenseContext = LicenseContext.Commercial;
                    var excel = new ExcelPackage();

                    var ws = excel.Workbook.Worksheets.Add("Precios");
                    var header = ws.Cells["A1:H1"];

                    var tablebody = ws.Cells["A1:A1"].LoadFromCollection<PreciosDTO>(response.Response, true);

                    tablebody.Style.Font.Size = 14;
                    header.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    header.Style.Font.Size = 14;
                    header.Style.Font.Bold = true;
                    header.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    header.Style.Fill.BackgroundColor.SetColor(Color.Black);
                    header.Style.Font.Color.SetColor(Color.White);

                    ws.Columns.AutoFit();

                    await js.GuardarComo($"Destinos_sin_precio_{DateTime.Now.ToString("dd MM yyyy HH mm ss")}.xlsx", excel.GetAsByteArray());
                }

                await Swal.FireAsync("Exito", "Se han guardado los precios exitosamente.", SweetAlertIcon.Success);
                await LoadData();
                await LoadDataProgramados();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SendEmailPrecios()
    {
        try
        {
            loadingSend = true;
            var count = 0;
            var totalcount = 0;
            ClientesSeleccionados = precios.DistinctBy(x => x.NombreCliente).Select(x => x.NombreCliente);

            EnvioTipoPreciosEmailDtoClass1 clientes = new EnvioTipoPreciosEmailDtoClass1();

            var clientesPre = await ds.OpenAsync<SelectionComponent>($"Clientes",
            options: new DialogOptions() { Height = "600px", Width = "75%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });

            if (clientesPre is not null)
                clientes = clientesPre;

            if (clientes.Clientes is null || clientes.Clientes.Count == 0)
            {
                loadingSend = false;
                return;
            }
            totalcount = clientes.Clientes.Count;
            Message(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Enviando Correos",
                Detail = "Los correos se estan enviando.\nPermanezca en esta pantalla hasta terminar el proceso.",
                Duration = 15000
            });

            List<Precio> listaPrecios = new List<Precio>();

            foreach (var cliente in clientes.Clientes)
            {
                count++;

                Message(new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Enviando Correos",
                    Detail = $"Enviando {count} de {totalcount}",
                    Duration = 15000
                });

                if (queryStringObjectPre is null) { queryStringObjectPre = new Dictionary<string, string>(); }
                queryStringObjectPre["den"] = cliente;
                queryStringObjectPre["cod"] = clientes.TipoEnvio.ToString();

                var DefaultValues = new List<string>() { "false", "", "0" };

                var uri = string.Join("&", queryStringObjectPre.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());

                if (clientes.TipoEnvio == 1)
                {
                    var response = await http.Post<IEnumerable<Precio>, List<Precio>>($"api/email/precios?{uri}", listaPrecios);
                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        count--;
                    }
                    else
                    {
                        Message(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Correo enviado",
                            Detail = $"El correo se ha enviado al cliente {cliente}",
                            Duration = 15000
                        });
                    }
                }
                else if (clientes.TipoEnvio == 2)
                {
                    var response = await http.Post<IEnumerable<Precio>, List<Precio>>($"api/email/precios/programados?{uri}", listaPrecios);
                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        count--;
                    }
                    else
                    {
                        Message(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Correo enviado",
                            Detail = $"El correo se ha enviado al cliente {cliente}",
                            Duration = 15000
                        });
                    }
                }
            }

            alert.Dispose();

            await Swal.FireAsync("Correos enviados", $"Se enviaron {count} de {totalcount}.", SweetAlertIcon.Info);

            loadingSend = false;

        }
        catch (Exception e)
        {
            loadingSend = false;

            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SendEmailGroupPrecio()
    {
        try
        {
            loadingSend = true;
            var count = 0;
            var totalcount = 0;
            //Hacemos el match de los grupos seleccionados en la tablas
            GruposSeleccionados = precios.DistinctBy(x => x.NombreGrupo).Select(x => x.NombreGrupo);

            EnvioTipoPreciosEmailDtoClass1 grupos = new EnvioTipoPreciosEmailDtoClass1();
            //Abrimos el modal
            var gruposPre = await ds.OpenAsync<SelectionGroupComponent>($"Grupos",
                options: new DialogOptions() { Height = "600px", Width = "75%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });
            //Si existen grupos les damos valor
            if (gruposPre is not null)
            {
                grupos = gruposPre;
            }
            //Si no existen nada de grupo, no se hace nada
            if (grupos.Grupos is null || grupos.Grupos.Count == 0)
            {
                loadingSend = false;
                return;
            }
            //Conteo total de los grupos
            totalcount = grupos.Grupos.Count;
            //Alerta de que los correos se estan enviando
            Message(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Enviando Correos",
                Detail = "Los correos se estan enviando.\nPermanezca en esta pantalla hasta terminar el proceso.",
                Duration = 15000
            });

            List<Precio> listaPrecios = new List<Precio>();
            //Por cada grupo seleccionado, se realiza la accion de mostrar las alertas y hacer la peticion para mandar el correo
            foreach (var grupo in grupos.Grupos)
            {
                count++;
                //Enviando correo # de #...
                Message(new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Enviando Correos",
                    Detail = $"Enviando {count} de {totalcount}",
                    Duration = 15000
                });

                if (queryStringObjectPre is null) { queryStringObjectPre = new Dictionary<string, string>(); }
                queryStringObjectPre["den"] = grupo;
                queryStringObjectPre["cod"] = grupos.TipoEnvio.ToString();

                var DefaultValues = new List<string>() { "false", "", "0" };
                //Toma un objeto, filtra el contenido, mapea para poder utilizar la clave en la uri,, convierte en arreglo y los une en una cadena valida (Para poderlo utilizar en uri) 
                var uri = string.Join("&", queryStringObjectPre.Where(x => !DefaultValues.Contains(x.Value.ToLower()))
                .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
                //Peticion para mandar el precio vigente
                if (grupos.TipoEnvio == 1)
                {
                    var response = await http.Post<IEnumerable<Precio>, List<Precio>>($"api/email/preciosGroup?{uri}", listaPrecios);
                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        count--;
                    }
                    else
                    {
                        Message(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Correo enviado",
                            Detail = $"Se ha enviado correo a clientes del grupo {grupo}",
                            Duration = 15000
                        });
                    }
                }
                else if (grupos.TipoEnvio == 2)
                {
                    //Peticion para mandar el precio programado
                    var response = await http.Post<IEnumerable<Precio>, List<Precio>>($"api/email/preciosgroup/programados?{uri}", listaPrecios);
                    if (response.Error)
                    {
                        loadingSend = false;
                        var message = await response.ObtenerMensajeError();
                        await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                        count--;
                    }
                    else
                    {
                        Message(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Info,
                            Summary = "Correo enviado",
                            Detail = $"El correo se ha enviado al grupo {grupo}",
                            Duration = 15000
                        });
                    }
                }
            }

            alert.Dispose();
            //Alerta final de correos enviados
            await Swal.FireAsync("Correos enviados", $"Se enviaron {count} de {totalcount}.", SweetAlertIcon.Info);

            loadingSend = false;


        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task ChangeStatus(Precio precio, ChangeEventArgs ea)
    {
        try
        {
            precio.Activo = (bool)ea.Value;
            if (SelectedTab == 0)
            {
                var response = await http.Post<Precio>($"api/precio", precio);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    grid?.Reload();
                    if (precio.Activo)
                        Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio habilitado", Detail = "El precio ha sido habilitado." });
                    else
                        Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio deshabilitado", Detail = "El precio ha sido deshabilitado." });
                }
            }
            else
            {
                var response = await http.Post<Precio>($"api/precio/programado", precio);
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    grid?.Reload();
                    if (precio.Activo)
                        Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio habilitado", Detail = "El precio ha sido habilitado." });
                    else
                        Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio deshabilitado", Detail = "El precio ha sido deshabilitado." });
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SaveStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            await js.SetItemLocalStorage("settingsPrecios", JsonConvert.SerializeObject(Settings));
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadStateAsync()
    {
        try
        {
            await Task.CompletedTask;
            var result = await js.GetItemLocalStorage("settingsPrecios");
            if (!string.IsNullOrEmpty(result))
            {
                _settings = JsonConvert.DeserializeObject<DataGridSettings>(result)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void OnChangeIndex(int index)
    {
        SelectedTab = index;
    }

    private async Task GetPreciosFiltro(string uri)
    {
        try
        {
            loading = true;
            var response = await http.Get<List<Precio>>($"api/precio/filtro?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                PaginasTotales = int.Parse(response.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                ConteoTotal = int.Parse(response.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActual = int.Parse(response.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                precios = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PaginasSeleccionadas(int pagina)
    {
        PaginaActual = pagina;
        busquedaPrecios.pagina = PaginaActual;
        await LoadData();
    }

    private async Task GetPreciosFiltroPro(string uri)
    {
        try
        {
            loading = true;
            var response = await http.Get<List<Precio>>($"api/precio/programado/filtro?{uri}");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                PaginasTotalesPro = int.Parse(response.HttpResponseMessage.Headers.GetValues("paginas").FirstOrDefault());
                ConteoTotalPro = int.Parse(response.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault());
                PaginaActualPro = int.Parse(response.HttpResponseMessage.Headers.GetValues("pagina").FirstOrDefault());
                preciosPro = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task PaginasSeleccionadasPro(int pagina)
    {
        PaginaActualPro = pagina;
        busquedaPreciosPro.pagina = PaginaActualPro;
        await LoadDataProgramados();
    }
}
