@page "/precios"
@inject IJSRuntime js
@inject IRepositorio http
@inject SweetAlertService Swal
@inject DialogService ds
@inject NotificationService ns
@inject PreciosValidation validation

<AuthorizeView Roles="Admin, Administrador Sistema, Precios">
    <Authorized>
        <h3>Precios</h3>

        <div class="d-flex justify-content-center col-12 shadow-sm mt-3">
            <div class="col-12 card">
                <div class="col-12 row card-body">

                    <div class="col-12 row  mb-3">
                        <div class="col-6">
                            <div class="form-label">
                                <label class="form-label">Importar:</label>
                            </div>
                            @if (radzenUpload.HasValue)
                            {
                                <p>Progreso: @Progress %</p>
                            }
                            <RadzenUpload class="col-12" @ref="radzenUpload" Auto="false" Multiple="false" Url="api/precio/upload" Complete="@CompleteUpload"
                                          Accept=".xlsx" Change="@OnChangeFile" Progress="@OnProgress" ChooseText="Elegir" Error="@HandlerErrorUpload">
                                <RadzenUploadHeader Name="Authorization" Value="@Token" />
                            </RadzenUpload>
                        </div>
                        <div class="col-2 d-flex">
                            <button class="btn gcom-bg-amarillo mt-auto col-12" @onclick="@UploadFile"> <i class="fa-solid fa-upload"></i> subir</button>

                        </div>
                        <div class="col-12 mt-3">
                            @if (preciosExcel.Count() > 0)
                            {

                                <RadzenPanel AllowCollapse="true" Collapsed="true">
                                    <HeaderTemplate>
                                        Vista previa de precios
                                    </HeaderTemplate>
                                    <ChildContent>
                                        <RadzenDataGrid TItem="PreciosDTO" Data="@preciosExcel" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                                                    GridLines="DataGridGridLines.Both" class="rz-my-12" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    IsLoading="loading" @ref="@gridExcel" AllowSorting="true" AllowFiltering="true">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Fecha" Filterable="false" Property="Fecha" FormatString="{0:d}" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Precio" Property="Precio" Filterable="false" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto">
                                                    <FilterTemplate Context="filter">
                                                        <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true"></RadzenDropDown>
                                                    </FilterTemplate>
                                                    <Template Context="data">
                                                        <div class="col-12 d-flex">
                                                            <div class="col-11">
                                                                @data.Producto
                                                            </div>
                                                        </div>
                                                    </Template>
                                                </RadzenDataGridColumn>
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Zona" Property="Zona" Filterable="false" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Destino" Property="Destino" Filterable="false" />
                                                <RadzenDataGridColumn TItem="PreciosDTO" Title="Cliente" Property="Cliente" Filterable="false" />
                                            </Columns>
                                        </RadzenDataGrid>
                                    </ChildContent>
                                </RadzenPanel>
                                <div class="col-12 d-flex justify-content-center mt-3">
                                    <div class="col-4">
                                        <button class="btn gcom-bg-amarillo col-12" @onclick="@SendPrecios">
                                            <i class="fa fa-solid fa-floppy-disk"></i>
                                            Guardar
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <hr />
                    <div class="col-12">
                        <EditForm Model="Precio" class="form col-12 row" Context="FORM" OnValidSubmit="@SavePrecio">
                            @*<DataAnnotationsValidator />*@
                            <FluentValidationValidator Validator="validation"/>
                            <ValidationSummary />
                            <div class="col-4 mb-2">
                                <label class="form-label">Zona</label>
                                <InputSelect @bind-Value="Precio.codZona" class="form-select col-12">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Zonas == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Zonas.Count == 0)
                                    {
                                        <option>No hay zonas.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Zonas)
                                        {
                                            <option value="@item.Cod">@item.Nombre</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Grupo</label>
                                <InputSelect @bind-Value="Precio.codGru" class="form-select col-12" onchange="@GetClientes()">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Grupos == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Grupos.Count == 0)
                                    {
                                        <option>No hay clientes.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Grupos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Cliente</label>
                                <InputSelect @bind-Value="Precio.codCte" class="form-select col-12" onchange="@GetEstaciones()">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Clientes == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Clientes.Count == 0)
                                    {
                                        <option>No hay clientes.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Clientes)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-1">
                                <div class="col-12">
                                    <label class="form-label">Destino</label>
                                    <InputSelect @bind-Value="Precio.codDes" class="form-select col-12">
                                        <option>-- Seleccione una opcion</option>
                                        @if (Destinos == null)
                                        {
                                            <option>Cargando...</option>
                                        }
                                        else if (Destinos.Count == 0)
                                        {
                                            <option>No hay productos.</option>
                                        }
                                        else
                                        {
                                            @foreach (var item in Destinos)
                                            {
                                                <option value="@item.Cod">@item.Den</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Producto</label>
                                <InputSelect @bind-Value="Precio.codPrd" class="form-select col-12">
                                    <option>-- Seleccione una opcion</option>
                                    @if (Productos == null)
                                    {
                                        <option>Cargando...</option>
                                    }
                                    else if (Productos.Count == 0)
                                    {
                                        <option>No hay productos.</option>
                                    }
                                    else
                                    {
                                        @foreach (var item in Productos)
                                        {
                                            <option value="@item.Cod">@item.Den</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Fecha</label>
                                <InputDate @bind-Value="Precio.FchDia" class="form-control col-12" />
                            </div>
                            <div class="col-4 mb-2">
                                <label class="form-label">Precio</label>
                                <InputNumber TValue="double?" @bind-Value="Precio.Pre" class="form-control col-12" />
                            </div>
                            <div class="col-12 d-flex justify-content-center row">
                                <div class="col-4">
                                    <button class="btn col-12 gcom-bg-amarillo" type="submit">
                                        <i class="fa fa-solid fa-floppy-disk"></i>
                                        Guardar
                                        @if (loadingSave)
                                        {
                                            <SpinnerLoading />
                                        }
                                    </button>
                                </div>
                                <div class="col-4">
                                    <button class="btn col-12 gcom-bg-amarillo" type="button" @onclick="@SendEmailPrecios">
                                        <i class="fa fa-solid fa-paper-plane"></i>
                                        Enviar Precios
                                        @if (loadingSend)
                                        {
                                            <SpinnerLoading />
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin, Administrador Sistema, Precios, Direccion, Gerencia" Context="Grid">
    <Authorized>
        <div class="col-12 d-flex justify-content-center">
            <RadzenDataGrid TItem="Precio" Data="@precios" AllowColumnResize="true" AllowVirtualization="true" AllowPickAllColumns="true"
                            GridLines="DataGridGridLines.Both" class="rz-my-12 ancho" Style="height:600px;" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            IsLoading="loading" @ref="@grid" AllowSorting="true" AllowFiltering="true" ColumnWidth="200px" AllowColumnPicking="true">
                <Columns>
                    <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="Acciones">
                        <Authorized>
                            <RadzenDataGridColumn TItem="Precio" Title="Acciones" Visible="true" Filterable="false" OrderIndex="1">
                                <Template Context="item">
                                    <div class="col-12 row">
                                        <div class="col">
                                            <button class="btn btn-primary col-12" @onclick="@(()=>setEdit(item))"><i class="fa fa-solid fa-pen-to-square"></i></button>
                                        </div>
                                    </div>
                                </Template>
                            </RadzenDataGridColumn>
                        </Authorized>
                    </AuthorizeView>
                    <RadzenDataGridColumn TItem="Precio" Title="Fecha" Property="FchDia" FormatString="{0:d}" Filterable="false" OrderIndex="2"/>
                    <RadzenDataGridColumn TItem="Precio" Title="Ultima fecha de actualizacion" Property="FchActualizacion" FormatString="{0:d}" Filterable="false" OrderIndex="3"/>
                    <RadzenDataGridColumn TItem="Precio" Title="Precio" Property="Pre" Filterable="false" OrderIndex="4"/>
                    <RadzenDataGridColumn TItem="Precio" Title="Producto" FilterValue="ProductoSeleccionado" Property="Producto.Den" OrderIndex="5">
                        <FilterTemplate Context="filter">
                            <RadzenDropDown Data="ProductList" @bind-Value="ProductoSeleccionado" AllowClear="true"></RadzenDropDown>
                        </FilterTemplate>
                        <Template Context="data">
                            <div class="col-12 d-flex row">
                                <div class="col-1">
                                    @if (data.codPrd == 25 || data.codPrd == 26 || data.codPrd == 27)
                                    {
                                        <div class="badge rounded-pill regular me-1">&nbsp;</div>
                                    }
                                    else if (data.codPrd == 11 || data.codPrd == 12 || data.codPrd == 116)
                                    {
                                        <div class="badge rounded-pill regular-vdm me-1">&nbsp;</div>
                                    }
                                    else if (data.codPrd == 19 || data.codPrd == 20 || data.codPrd == 21)
                                    {
                                        <div class="badge rounded-pill premium me-1">&nbsp;</div>
                                    }
                                    else
                                    {
                                        <div class="badge rounded-pill diesel me-1">&nbsp;</div>
                                    }
                                </div>
                                <div class="col-11">
                                    @data.Producto?.Den
                                </div>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Precio" Title="Destino" Property="NombreDestino" Filterable="false" OrderIndex="6"/>
                    <RadzenDataGridColumn TItem="Precio" Title="Zona" Property="NombreZona" Filterable="false" OrderIndex="7"/>
                    <RadzenDataGridColumn TItem="Precio" Title="Cliente" Property="NombreCliente" Filterable="false" OrderIndex="8"/>
                    <AuthorizeView Roles="Admin, Administrador Sistema, Precios" Context="EditPrice">
                        <RadzenDataGridColumn TItem="Precio" Title="Habilitar / Deshabilitar" OrderIndex="9">
                            <Template Context="data">
                                <div class="col-12">
                                    <div class="form-check form-switch m-2">
                                        <input class="form-check-input" type="checkbox" role="switch" id="@data.Cod" checked="@data.Activo"
                                               @onchange="@((ChangeEventArgs e) => ChangeStatus(data, e))">
                                    </div>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </AuthorizeView>
                </Columns>
            </RadzenDataGrid>
        </div>
    </Authorized>
</AuthorizeView>

<style type="text/css">
    .ancho {
        width: @TotalWidth;
    }
</style>

@code {

    private string ProductoSeleccionado = string.Empty;
    private string CurrentCliente = string.Empty;
    RadzenAlert alert = new RadzenAlert();
    List<Precio> precios { get; set; } = new List<Precio>();
    IEnumerable<PreciosDTO> preciosExcel { get; set; } = new List<PreciosDTO>();

    Precio Precio { get; set; } = new Precio();

    RadzenUpload radzenUpload { get; set; } = new RadzenUpload();

    List<Producto> Productos { get; set; } = new List<Producto>();
    List<Zona> Zonas { get; set; } = new List<Zona>();
    List<CodDenDTO> Clientes { get; set; } = new List<CodDenDTO>();
    List<Grupo> Grupos { get; set; } = new List<Grupo>();
    List<CodDenDTO> Destinos { get; set; } = new List<CodDenDTO>();

    private string Token { get; set; } = string.Empty;

    private short? GrupoSeleccionado = 0;
    private int? ClienteSeleccionado = 0;

    private int Progress = 0;
    private int TotalEmails = 0;
    private int CurrentEmails = 0;

    bool loadingUpload = false;
    bool loading = false;
    bool loadingSave = false;
    bool loadingSend = false;

    private IEnumerable<string> ProductList { get; set; } = new List<string>();
    private IEnumerable<string?> ClientesSeleccionados { get; set; } = new List<string>();

    RadzenDataGrid<Precio> grid { get; set; } = new RadzenDataGrid<Precio>();
    RadzenDataGrid<PreciosDTO> gridExcel { get; set; } = new RadzenDataGrid<PreciosDTO>();

    int width = 0;
    string TotalWidth = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        width = await js.InvokeAsync<int>("eval", "window.innerWidth") - 360;
        if (width < 0)
            width = 500;
        TotalWidth = $"{width}px";

        await GetProductos();
        await GetPrecios();
        await GetGrupos();
        await GetZonas();

        Token = "Bearer " + await js.GetItemLocalStorage("TOKENKEY");
    }

    private void OnProgress(UploadProgressArgs e)
    {
        try
        {
            //Console.WriteLine($"{e.Progress}% / {e.Loaded} of {e.Total}");
            Progress = e.Progress;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void OnChangeFile(UploadChangeEventArgs e)
    {
        try
        {
            foreach (var item in e.Files)
            {
                Console.WriteLine(JsonConvert.SerializeObject(item));
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task GenerateExcel()
    {

        ExcelPackage.LicenseContext = LicenseContext.Commercial;
        var excel = new ExcelPackage();

        var ws = excel.Workbook.Worksheets.Add("Precios");
        ws.Columns.Width = 50;
        ws.Columns.AutoFit();

        var header = ws.Cells["A1:P1"];

        var tablebody = ws.Cells["A1:A1"].LoadFromCollection<Precio>(precios, true);

        tablebody.Style.Font.Size = 14;
        header.Style.Font.Size = 14;

        header.Style.Fill.PatternType = ExcelFillStyle.Solid;
        header.Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
        header.Style.Font.Bold = true;

        await js.GuardarComo($"Precios.xlsx", excel.GetAsByteArray());

    }


    private async Task GetProductos()
    {
        try
        {
            var response = await http.Get<List<Producto>>("api/producto");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Productos = response.Response;
                ProductList = response.Response.DistinctBy(x => x.Den).Select(x => x.Den)!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetPrecios()
    {
        try
        {
            loading = true;
            var response = await http.Get<List<Precio>>("api/precio");
            if (response.Error)
            {
                loading = false;
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                loading = false;
                precios = response.Response;
            }
        }
        catch (Exception e)
        {
            loading = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetZonas()
    {
        try
        {
            var response = await http.Get<List<Zona>>("api/zona");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Zonas = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetGrupos()
    {
        try
        {
            var response = await http.Get<List<Grupo>>("api/grupo");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
            }
            else
            {
                Grupos = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    public async Task GetClientes()
    {
        try
        {
            if (Precio.codGru != null && Precio.codGru != GrupoSeleccionado)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/cliente/{Precio.codGru}");
                if (response.Error)
                {
                    var message = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                }
                else
                {
                    GrupoSeleccionado = Precio.codGru;
                    Clientes = response.Response;
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task GetEstaciones()
    {
        try
        {
            if (Precio.codCte != 0 && ClienteSeleccionado != Precio.codCte)
            {
                var response = await http.Get<List<CodDenDTO>>($"api/estacion/{Precio.codCte}");
                if (response.Error)
                {
                    var responseHttp = await response.ObtenerMensajeError();
                    await Swal.FireAsync("Error", responseHttp, SweetAlertIcon.Error);
                }
                else
                {
                    Destinos = response.Response;
                    StateHasChanged();
                    ClienteSeleccionado = Precio.codCte;
                }
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async void setEdit(Precio Item)
    {
        try
        {
            Precio = Item;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SavePrecio()
    {
        try
        {
            loadingSave = true;
            var response = await http.Post<Precio>("api/precio", Precio);
            if (response.Error)
            {
                loadingSave = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSave = false;
                await GetPrecios();
            }
        }
        catch (Exception e)
        {
            loadingSave = false;
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task UploadFile()
    {
        try
        {
            if (radzenUpload.HasValue)
            {
                await radzenUpload.Upload();
            }
            else
            {
                await Swal.FireAsync("Alerta", "Seleccione un archivo con formato excel para poder subirlo.", SweetAlertIcon.Warning);

            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task CompleteUpload(UploadCompleteEventArgs args)
    {
        try
        {
            await Swal.FireAsync("Exito", "Se ha completado la accion.", SweetAlertIcon.Info);
            preciosExcel = JsonConvert.DeserializeObject<List<PreciosDTO>>(args.RawResponse)!;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task HandlerErrorUpload(Radzen.UploadErrorEventArgs ex)
    {
        try
        {
            await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
            Progress = 0;
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SendPrecios()
    {
        try
        {
            if (precios is null)
            {
                await Swal.FireAsync("Alerta", "La lista no puede estar vacia", SweetAlertIcon.Warning);
                return;
            }

            if (precios.Count == 0)
            {
                await Swal.FireAsync("Alerta", "La lista no puede estar vacia", SweetAlertIcon.Warning);
                return;
            }

            var response = await http.Post<IEnumerable<PreciosDTO>>("api/precio/confirm/upload", preciosExcel);
            if (response.Error)
            {
                loadingSave = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                loadingSave = false;
                await Swal.FireAsync("Exito", "Se han guardado los precios exitosamente.", SweetAlertIcon.Success);
                await GetPrecios();
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            throw e;
        }
    }

    private async Task SendEmailPrecios()
    {
        try
        {
            loadingSend = true;
            if (precios is null)
            {
                loadingSend = false;

                await Swal.FireAsync("Alerta", "La lista no puede estar vacia.", SweetAlertIcon.Error);
                return;
            }

            if (precios.Count is 0)
            {
                loadingSend = false;

                await Swal.FireAsync("Alerta", "La lista no puede estar vacia.", SweetAlertIcon.Error);
                return;
            }

            ClientesSeleccionados = precios.DistinctBy(x => x.NombreCliente).Select(x => x.NombreCliente);

            var clientes = await ds.OpenAsync<SelectionComponent>($"Clientes",
            new Dictionary<string, object>() { { "lista", ClientesSeleccionados } },
            new DialogOptions() { Height = "600px", Width = "75%", Resizable = true, Draggable = false, CloseDialogOnOverlayClick = true });

            if (clientes is null)
            {
                loadingSend = false;
                return;
            }

            Message(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Enviando Correos",
                Detail = "Los correos se estan enviando.\nPermanesca en esta pantalla hasta terminar el proceso.",
                Duration = 15000
            });

            List<Precio> listaPrecios = new List<Precio>();

            foreach (var cliente in clientes)
            {
                listaPrecios.AddRange(precios.Where(x => x.NombreCliente!.Equals(cliente) && x.Pre != 0 && x.Activo == true));
            }

            var response = await http.Post<IEnumerable<Precio>>("api/email/precios", listaPrecios);
            if (response.Error)
            {
                loadingSend = false;
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            else
            {
                await Swal.FireAsync("Exito", "Los correos han sido enviados", SweetAlertIcon.Success);
            }

            alert.Dispose();
            loadingSend = false;

        }
        catch (Exception e)
        {
            loadingSend = false;

            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private void Message(NotificationMessage message)
    {
        ns.Notify(message);
    }

    private async Task ChangeStatus(Precio precio, ChangeEventArgs ea)
    {
        try
        {
            precio.Activo = (bool)ea.Value;
            var response = await http.Post<Precio>($"api/precio", precio);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                grid?.Reload();
                if (precio.Activo)
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio habilitado", Detail = "El precio ha sido habilitado." });
                else
                    Message(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Precio deshabilitado", Detail = "El precio ha sido deshabilitado." });
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
