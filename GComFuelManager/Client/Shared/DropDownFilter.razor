@typeparam TListado
@typeparam TValue

<div style="display:inline-flex;width:100%">
    <button @onclick="@(()=>ShowDropDown = !ShowDropDown)" class="form-control-sm form-control" type="button" style="@(ShowDropDown ? "width:95%;" : "width:100%;")">
        @if (RenderValue is null || Valor_Seleleccionado is null)
        {
            @if (!string.IsNullOrEmpty(Default_Placeholder))
            {
                @Default_Placeholder
            }
            else
            {
                <p>Seleccione un valor</p>
            }

        }
        else
        {
            @if (Valor_Seleleccionado is not null)
            {
                @RenderValue(Valor_Seleleccionado)
            }
        }
    </button>

    @if (Valor_Seleleccionado is not null)
    {

        <div style="cursor:pointer;padding: .14rem;border: 1px solid #ced4da;" @onclick="ClearValue">
            <i class="fa fa-solid fa-xmark"></i>
        </div>
    }

    @if (ShowDropDown)
    {
        <ul class="dropdown-menu list-group" style="height:400px;overflow-y:scroll;">
            <li class="list-group-item">
                <input type="search" class="form-control-sm form-control col-12" @bind="Valor_Filtrado" @oninput="@On_Change_Filter_Value" />
            </li>
            <Virtualize Items="Listado" Context="Item" TItem="TListado">
                @if (Render is not null)
                {
                    <li class="list-group-item" style="cursor:pointer;" @onclick="@(()=>ValorChange(Item))">
                        @Render(Item)
                    </li>
                }
                @* <li class="list-group-item @(Item.Cod == Grupo_Seleccionado?.Cod ? "active":"")" style="cursor:pointer;" @onclick="@(()=>GrupoChange(Item))">@Item.Den</li> *@
            </Virtualize>
        </ul>
    }
</div>

@code {
    [Parameter] public string Default_Placeholder { get; set; } = string.Empty;
    private bool ShowDropDown { get; set; } = false;
    [Parameter] public List<TListado> Listado { get; set; } = new();
    [Parameter] public RenderFragment<TListado>? Render { get; set; } = null!;
    [Parameter] public RenderFragment<TListado>? RenderValue { get; set; } = null!;
    private string Valor_Filtrado = string.Empty;

    [Parameter] public EventCallback<string> FiltrarValor { get; set; }
    [Parameter] public EventCallback On_Change_Method { get; set; }

    private TListado? Valor_Seleleccionado { get; set; } = default(TListado);

    [Parameter] public string Propiedad_Valor { get; set; } = string.Empty;
    [Parameter] public string Propiedad_Filtro { get; set; } = string.Empty;

    [Parameter] public TValue? Valor { get; set; } = default(TValue);
    [Parameter] public EventCallback<TValue> ValorChanged { get; set; }
    [Parameter] public EventCallback<TValue> ValorChangedCustom { get; set; }

    private async Task ValorChange(TListado item)
    {
        ShowDropDown = false;

        Valor_Seleleccionado = item;

        var prop_name = item.GetType().GetProperty(Propiedad_Valor);
        if (prop_name is not null)
        {

            Valor = (TValue)prop_name.GetValue(item);
            await ValorChanged.InvokeAsync(Valor);
            // ValorChangedCustom.InvokeAsync(Valor);
        }

        await On_Change_Method.InvokeAsync();
    }

    private async Task ClearValue()
    {
        Valor = default(TValue);
        Valor_Seleleccionado = default(TListado);
        await ValorChanged.InvokeAsync(Valor);
    }

    private async Task On_Change_Filter_Value(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;

        await FiltrarValor.InvokeAsync(value);
    }
    // private void GrupoChange(Grupo e)
    // {
    //     Grupo_Seleccionado = e;
    //     ShowDropDown = false;
    // }

    // private async Task FilterGrupo(ChangeEventArgs e)
    // {
    //     Grupo_Filtrado = e.Value.ToString();
    //     queryParams["Grupo_Filtrado"] = Grupo_Filtrado;
    //     await GetFolios();
    // }
}