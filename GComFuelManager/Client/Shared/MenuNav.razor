@inject ILoginService login
@inject SweetAlertService swal
@inject NavigationManager navigate
    <AuthorizeView>
        <Authorized>
            <div class="col-12 py-2 @(close?"gcom-bg-rojo text-white":"gcom-bg-blanco text-black") d-flex">
                <div class="col">
                    @if (close)
                    {
                        <div class="col-4 mx-4" style="cursor:pointer" @onclick="CloseMenuLateral">
                            <img src="img/bar-de-hamburguesas(1).png" style="width:32px;" class="img-fluid" />
                        </div>
                    }
                    else
                    {
                        <div class="col-4 mx-2" style="cursor:pointer" @onclick="CloseMenuLateral">
                            <img src="img/bar-de-hamburguesas.png" style="width:32px;" class="img-fluid" />
                        </div>
                    }
                </div>
                <div class="col-11 d-flex justify-content-end">
                    <div class="col-2 text-center my-auto d-flex justify-content-end">
                        <h6> @context.User.Identity.Name</h6>
                    </div>
                    <div class="col-2 text-center my-auto">
                        <button class="btn" @onclick="@CerrarSesion">Cerrar sesion</button>
                    </div>
                </div>
            </div>

        </Authorized>
    </AuthorizeView>

    @code {
        [Parameter] public bool close { get; set; } = false;
        [Parameter] public EventCallback closeMenu { get; set; }

        private void CloseMenuLateral()
        {
            closeMenu.InvokeAsync();
        }

        private async void CerrarSesion()
        {
            try
            {
                await login.Logoute();
                navigate.NavigateTo("/login");
            }
            catch (Exception e)
            {
                await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
            }
        }
    }
