@inject ILoginService login
@inject SweetAlertService swal
@inject NavigationManager navigate
@inject IJSRuntime js
@inject IRepositorio repositorio

<AuthorizeView Context="MenuGeneral">
    <Authorized>

        <div class="col-12 gcom-bg-naranja text-black row m-0 justify-content-between">
            <div class="col-md-1 col-2 d-flex">
                <button class="btn gcom-bg-naranja my-auto" @onclick="OpenMenuLateral" id="buttonSidepanel">
                    <i class="fa fa-solid fa-bars"></i>
                </button>
            </div>
            <div class="col-md-4 col-10 d-flex gcom-bg-naranja-dark text-white">
                <div class="col d-flex justify-content-start" style="text-overflow:ellipsis; flex-wrap:nowrap;">
                    @if (MenuGeneral.User.Identity is not null)
                    {
                        <p class="my-auto">
                            @MenuGeneral.User.Identity.Name
                        </p>
                    }
                </div>
                <div class="col">
                    <button class="btn text-white col-12" @onclick="@CerrarSesion">Cerrar sesion</button>
                </div>
            </div>
        </div>

    </Authorized>
</AuthorizeView>

@code {

    private async void OpenMenuLateral()
    {
        await js.InvokeVoidAsync("OpenMenu");
    }

    private async void CerrarSesion()
    {
        try
        {
            await login.Logoute();
            navigate.NavigateTo("/login");
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}