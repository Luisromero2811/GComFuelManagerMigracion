@inject IJSRuntime js
@inject IRepositorio http
@implements IDisposable
@* @using ChartJs.Blazor.PieChart *@

<h3>Grafico</h3>

@* <Chart Config="_config"></Chart> *@
@* <Chart Config="_config"></Chart> *@
<canvas id="myChart" style="width:100%; max-width:700px;"></canvas>
@* <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> *@
@* <script src="js/Grafico.js" type="module"></script> *@

@code {
    private DotNetObjectReference<Grafico> objRef;
    private List<Productos_Grafica> productos_ = new();
    // private PieConfig _config = new();

    protected override async Task OnInitializedAsync()
    {
        // _config = new PieConfig
        //     {
        //         Options = new PieOptions
        //         {
        //             Responsive = true,
        //             Title = new OptionsTitle
        //             {
        //                 Display = true,
        //                 Text = "Grafico de pastel"
        //             }
        //         }
        //     };

        await Data();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await Data();

            await js.InvokeVoidAsync("initializeChart", productos_.Select(x => x.Producto), productos_.Select(x => x.Volumen));

            // js.InvokeVoidAsync("Graficar");
            // await js.InvokeVoidAsync("initializeChart");z
            // await js.InvokeVoidAsync("importarScript", "js/Grafico.js");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task Data()
    {
        var response = await http.Get<List<Productos_Grafica>>("api/orden/grafico");
        if (!response.Error)
        {
            productos_ = response.Response;
        }
    }

    private record Productos_Grafica(string Producto, double? Volumen);

}
