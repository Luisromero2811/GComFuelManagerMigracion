@inherits LayoutComponentBase
@inject GComFuelManager.Client.Auth.RenovadorToken renovadorToken
@inject IJSRuntime js
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        <RadzenDialog />
        <RadzenNotification />
        <RadzenContextMenu />
        <RadzenTooltip />

        <div class="page">
            <Menu_Lateral_Emergente />
            <main>
                <div>
                    <MenuNav />
                </div>
                <article class="content px-2">
                    <ErrorBoundary @ref="errorBoundary">
                        <ChildContent>
                            @Body
                        </ChildContent>
                    </ErrorBoundary>
                </article>
            </main>
        </div>
    </Authorized>
</AuthorizeView>

@code{
    //public bool isClosed = false;

    //public async void CloseMenu()
    //{
    //    isClosed = !isClosed;
    //    await js.SetItemLocalStorage("CloseMenu", isClosed.ToString());
    //}



    //[CascadingParameter]
    //public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    protected override void OnInitialized()
    {
        //await js.InvokeVoidAsync("timerInactivo", DotNetObjectReference.Create(this));
        //var cm = await js.GetItemLocalStorage("CloseMenu");
        //if (cm is not null)
        //    isClosed = bool.Parse(cm);
        renovadorToken.Iniciar();
    }

    private ErrorBoundary? errorBoundary;
    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    //[JSInvokable]
    //public async Task Logoute()
    //{
    //    var authstate = await AuthenticationStateTask;
    //    if (authstate.User.Identity!.IsAuthenticated)
    //    {
    //        navigationManager.NavigateTo("logout");
    //    }
    //}

}